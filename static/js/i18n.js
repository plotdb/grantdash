// Generated by LiveScript 1.3.0
(function(it){
  return it();
})(function(){
  var win, doc, engine;
  if (!(typeof i18next != 'undefined' && i18next !== null)) {
    return;
  }
  win = window;
  doc = document;
  window.i18nEngine = engine = {
    _transform: function(node, tag, func){
      var regex, _, wk, this$ = this;
      regex = new RegExp("^" + tag + "-(.+)$");
      _ = function(n){
        var i$, to$, i, ref$, name, value, ret, v, results$ = [];
        if (n.nodeType === win.Element.TEXT_NODE) {
          n.parentNode.setAttribute(tag, n.textContent);
          return n.parentNode.replaceChild(doc.createTextNode(func(n.textContent)), n);
        } else {
          for (i$ = 0, to$ = n.attributes.length; i$ < to$; ++i$) {
            i = i$;
            ref$ = n.attributes[i], name = ref$.name, value = ref$.value;
            if (!(ret = regex.exec(name))) {
              continue;
            }
            n.setAttribute(ret[1], func(value || ''));
          }
          if ((v = n.getAttribute(tag)) && v !== 't') {
            return n.textContent = func(v);
          }
          for (i$ = 0, to$ = n.childNodes.length; i$ < to$; ++i$) {
            i = i$;
            results$.push(_(n.childNodes[i]));
          }
          return results$;
        }
      };
      wk = new WeakMap();
      Array.from(node.querySelectorAll("[" + tag + "]")).map(function(n){
        return _(n);
      });
      return node;
    },
    transform: function(root){
      var this$ = this;
      return this._transform(root, 't', function(it){
        return this$.i18n(it);
      });
    },
    i18n: function(it){
      return i18next.t(it);
    }
  };
  return i18next.init({
    supportedLng: ['en', 'zh-TW'],
    fallbackLng: 'en',
    fallbackNS: '',
    defaultNS: ''
  }).then(function(){
    return i18next.use(i18nextBrowserLanguageDetector);
  }).then(function(){
    var lng, k, ref$, v;
    lng = navigator.language || navigator.userLanguage;
    lng = "en";
    console.log("use language: ", lng);
    i18next.changeLanguage(lng);
    for (k in ref$ = i18nData.en) {
      v = ref$[k];
      (i18nData["zh-TW"] || (i18nData["zh-TW"] = {}))[k] = k;
    }
    for (k in ref$ = i18nData) {
      v = ref$[k];
      i18next.addResourceBundle(k, '', v, true, true);
    }
    return engine.transform(document.body);
  });
});