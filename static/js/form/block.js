// Generated by LiveScript 1.3.0
(function(){
  return ldc.register('prjFormBlock', [], function(){
    var renderList, module, fillAnswer, fill, render;
    renderList = function(arg$){
      var node, data, viewMode, update, localData, view;
      node = arg$.node, data = arg$.data, viewMode = arg$.viewMode, update = arg$.update;
      localData = data;
      return (node.view || (node.view = {})).list = view = new ldView({
        root: node,
        action: {
          click: {
            "list-add": function(){
              (localData.data || (localData.data = [])).push({
                title: "某個點",
                desc: "某個點的描述"
              });
              return view.render();
            }
          }
        },
        handler: {
          list: {
            list: function(){
              return localData.data || (localData.data = []);
            },
            init: function(arg$){
              var node, data, editable, view;
              node = arg$.node, data = arg$.data;
              editable = node.hasAttribute('data-user-editable');
              if (!editable && viewMode) {
                node.removeAttribute('draggable');
              }
              return node.view = view = new ldView({
                root: node,
                action: {
                  input: {
                    "list-data": function(arg$){
                      var node;
                      node = arg$.node;
                      return data[node.getAttribute('data-name')] = node.innerText;
                    },
                    "list-input": function(arg$){
                      var node;
                      node = arg$.node;
                      return console.log('ok123');
                    }
                  }
                },
                init: {
                  "list-data": function(arg$){
                    var node;
                    node = arg$.node;
                    node.setAttribute('data-name', node.getAttribute('editable'));
                    if (!editable && viewMode) {
                      return node.removeAttribute('editable');
                    }
                  }
                },
                handler: {
                  "list-input": function(arg$){
                    var node;
                    node = arg$.node;
                    return node.setAttribute('name', localData.title);
                  },
                  "list-data": function(arg$){
                    var node;
                    node = arg$.node;
                    return node.innerText = data[node.getAttribute('data-name')] || '';
                  }
                }
              });
            },
            render: function(arg$){
              var node;
              node = arg$.node;
              return node.render();
            }
          }
        }
      });
    };
    module = {
      "form-radio": renderList,
      "form-checkbox": renderList,
      "form-checkpoint": renderList
    };
    fillAnswer = function(arg$){
      var node, data, viewMode, update;
      node = arg$.node, data = arg$.data, viewMode = arg$.viewMode, update = arg$.update;
      return (node.view || (node.view = {})).fill = new ldView({
        root: node,
        action: {
          input: {
            "input-field": function(arg$){
              var node;
              node = arg$.node;
              data.value = node.value;
              return update(data);
            }
          }
        },
        handler: {
          "input-field": function(arg$){
            var node;
            node = arg$.node;
            return node.value = data.value || '';
          }
        }
      });
    };
    fill = {
      "form-short-answer": fillAnswer,
      "form-long-answer": fillAnswer
    };
    render = function(arg$){
      var node, data, viewMode, update;
      node = arg$.node, data = arg$.data, viewMode = arg$.viewMode, update = arg$.update;
      (node.view || (node.view = {})).block = new ldView({
        root: node,
        action: {
          input: {
            title: function(arg$){
              var node, evt;
              node = arg$.node, evt = arg$.evt;
              return data.title = node.innerText;
            },
            desc: function(arg$){
              var node, evt;
              node = arg$.node, evt = arg$.evt;
              return data.desc = node.innerText;
            }
          },
          click: {
            'switch': function(arg$){
              var node, evt;
              node = arg$.node, evt = arg$.evt;
              node.classList.toggle('on');
              return (data.config || (data.config = {}))[node.getAttribute('data-name')] = node.classList.contains('on');
            },
            'delete': function(arg$){
              var node, evt;
              node = arg$.node, evt = arg$.evt;
            },
            clone: function(arg$){
              var node, evt;
              node = arg$.node, evt = arg$.evt;
              return console.log(data);
            }
          }
        },
        handler: {
          title: function(arg$){
            var node;
            node = arg$.node;
            node.innerText = data.title;
            return node.removeAttribute('editable');
          },
          desc: function(arg$){
            var node;
            node = arg$.node;
            node.innerText = data.desc;
            return node.removeAttribute('editable');
          },
          'switch': function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('on', !!(data.config || (data.config = {}))[node.getAttribute('data-name')]);
          },
          "edit-only": function(arg$){
            var node;
            node = arg$.node;
            return node.remove();
          },
          "list-input": function(arg$){
            var node;
            node = arg$.node;
            return node.setAttribute('name', "input-" + data.key);
          }
        }
      });
      if (module[data.name]) {
        module[data.name]({
          node: node,
          data: data,
          viewMode: viewMode,
          update: update
        });
      }
      if (viewMode && fill[data.name]) {
        return fill[data.name]({
          node: node,
          data: data,
          viewMode: viewMode,
          update: update
        });
      }
    };
    return {
      render: render,
      module: module
    };
  });
})();