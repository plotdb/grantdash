// Generated by LiveScript 1.3.0
ldc.register('prjFormBlock', [], function(){
  var settext, schema, module, moduleList, moduleTextarea, Ctrl;
  settext = function(n, v){
    if (n.innerText !== v) {
      return n.innerText = v;
    }
  };
  schema = {
    types: {
      "number": {
        name: "數值",
        ops: "number"
      },
      "string": {
        name: "文字",
        ops: "string"
      },
      "length": {
        name: "長度",
        ops: "count"
      },
      "regex": {
        name: "正規式",
        ops: "regex"
      },
      "count": {
        name: "選項數",
        ops: "count"
      },
      "file-size": {
        name: "檔案大小",
        ops: "smaller"
      },
      "file-format": {
        name: "檔案格式",
        ops: "extension"
      },
      "file-count": {
        name: "檔案數量",
        ops: "count"
      }
    },
    ops: {
      extension: {
        "extension": {
          name: "副檔名"
        }
      },
      regex: {
        "match": {
          name: "符合"
        },
        "not-match": {
          name: "不符"
        }
      },
      count: {
        "gte": {
          name: '<div class="s mr-2">&#x2265;</div> 大於或等於'
        },
        "lte": {
          name: '<div class="s mr-2">&#x2264;</div> 小於或等於'
        },
        "eq": {
          name: '<div class="s mr-2">=</div> 等於'
        },
        "between": {
          name: '<div class="s mr-2">&#x223c;</div> 介於',
          field: 2
        }
      },
      string: {
        "include": {
          name: "包含"
        },
        "exclude": {
          name: "不包含"
        },
        "email": {
          name: "電子郵件位置"
        },
        "url": {
          name: "網址"
        }
      },
      number: {
        "gte": {
          name: '<div class="s mr-2">&#x2265;</div> 大於或等於'
        },
        "lte": {
          name: '<div class="s mr-2">&#x2264;</div> 小於或等於'
        },
        "ge": {
          name: '<div class="s mr-2">&gt;</div> 大於'
        },
        "le": {
          name: '<div class="s mr-2">&lt;</div> 小於'
        },
        "eq": {
          name: '<div class="s mr-2">=</div> 等於'
        },
        "ne": {
          name: '<div class="s mr-2">&#x2260;</div> 不等於'
        },
        "between": {
          name: '<div class="s mr-2">&#x223c;</div> 介於',
          field: 2
        }
      },
      smaller: {
        "lte": {
          name: '<div class="s mr-2">&lt;</div> 小於'
        }
      }
    },
    support: {
      'form-short-answer': ['number', 'string', 'length', 'regex'],
      'form-long-answer': ['string', 'length', 'regex'],
      'form-radio': [],
      'form-checkbox': ['count'],
      'form-file': ['file-size', 'file-formt', 'file-count'],
      'form-budget': ['count'],
      'form-checkpoint': ['count']
    }
  };
  module = {};
  moduleList = {
    moduleInit: function(){
      var ref$, view, this$ = this;
      if (this.block.name === 'form-checkpoint' && this.viewing) {
        if (!((ref$ = this.block).value || (ref$.value = {})).list) {
          ((ref$ = this.block).value || (ref$.value = {})).list = (ref$ = this.block).data || (ref$.data = []);
        } else {
          this.block.data = this.block.value.list;
        }
        ld$.find(this.root, '.timeline-list', 0).addEventListener('input', function(){
          return this$.update();
        });
      }
      return this.view.module = view = new ldView({
        root: this.root,
        action: {
          click: {
            "list-add": function(){
              var ref$;
              ((ref$ = this$.block).data || (ref$.data = [])).push({
                title: "新項目",
                desc: "關於這個項目的描述 ... ",
                key: Math.random().toString(36).substring(2)
              });
              this$.update();
              return this$.render();
            }
          }
        },
        handler: {
          list: {
            key: function(it){
              return it.key;
            },
            list: function(){
              return (this$.block.data || []).concat([{
                other: true
              }]);
            },
            init: function(arg$){
              var node, data, editable;
              node = arg$.node, data = arg$.data;
              editable = node.hasAttribute('data-user-editable');
              if (!editable && this$.viewing) {
                return node.removeAttribute('draggable');
              }
            },
            action: {
              click: !this.viewing
                ? function(){}
                : function(arg$){
                  var node, data, evt, isRadio, val, ref$, ison, list;
                  node = arg$.node, data = arg$.data, evt = arg$.evt;
                  if (evt.target.nodeName === 'INPUT') {
                    return;
                  }
                  isRadio = this$.block.name === 'form-radio';
                  val = (ref$ = this$.block).value || (ref$.value = {});
                  if (data.other) {
                    ison = isRadio
                      ? true
                      : !val.other;
                    val.other = ison;
                    if (ison && isRadio) {
                      val.list = [];
                    }
                  } else {
                    list = val.list || [];
                    ison = isRadio
                      ? true
                      : !in$(data.title, list);
                    if (ison) {
                      list.push(data.title);
                      val.other = false;
                    } else {
                      list.splice(list.indexOf(data.title), 1);
                    }
                    val.list = list;
                  }
                  view.render();
                  return this$.update();
                }
            },
            handler: function(arg$){
              var node, data, editable;
              node = arg$.node, data = arg$.data;
              editable = node.hasAttribute('data-user-editable');
              if (node.view) {
                return node.view.render();
              }
              return node.view = new ldView({
                root: node,
                init: {
                  data: function(arg$){
                    var node;
                    node = arg$.node;
                    node.setAttribute('data-name', node.getAttribute('editable'));
                    if (!editable && this$.viewing) {
                      return node.removeAttribute('editable');
                    }
                  }
                },
                action: {
                  input: {
                    "other-value": function(arg$){
                      var node, ref$;
                      node = arg$.node;
                      return ((ref$ = this$.block).value || (ref$.value = {})).otherValue = node.value;
                    },
                    data: function(arg$){
                      var node;
                      node = arg$.node;
                      data[node.getAttribute('data-name')] = node.innerText;
                      return this$.update();
                    }
                  },
                  click: {
                    'delete': function(arg$){
                      var node, evt;
                      node = arg$.node, evt = arg$.evt;
                      this$.block.data.splice(this$.block.data.indexOf(data), 1);
                      this$.update();
                      this$.render();
                      return evt.stopPropagation();
                    }
                  }
                },
                handler: {
                  drag: function(arg$){
                    var node;
                    node = arg$.node;
                    return node.classList.toggle('d-none', this$.viewing);
                  },
                  state: function(arg$){
                    var node, val, ref$, ison;
                    node = arg$.node;
                    val = (ref$ = this$.block).value || (ref$.value = {});
                    ison = (data.other && val.other) || (!data.other && in$(data.title, val.list || (val.list = [])));
                    return node.classList.toggle('active', ison);
                  },
                  "other-value": function(arg$){
                    var node, ref$;
                    node = arg$.node;
                    return node.value = ((ref$ = this$.block).value || (ref$.value = {})).otherValue || '';
                  },
                  'delete': function(arg$){
                    var node;
                    node = arg$.node;
                    return node.classList.toggle('d-none', this$.viewing || data.other);
                  },
                  other: function(arg$){
                    var node;
                    node = arg$.node;
                    return node.classList.toggle('d-none', !data.other);
                  },
                  data: function(arg$){
                    var node;
                    node = arg$.node;
                    if (data.other) {
                      node.removeAttribute('editable');
                      node.classList.toggle('flex-grow-1', false);
                    }
                    return settext(node, (data.other
                      ? '其它'
                      : data[node.getAttribute('data-name')]) || '');
                  }
                }
              });
            }
          }
        }
      });
    }
  };
  module = import$({}, {
    "form-radio": moduleList,
    "form-checkbox": moduleList,
    "form-checkpoint": moduleList
  });
  moduleTextarea = {
    moduleInit: function(){
      var view, this$ = this;
      return this.view.module = view = new ldView({
        root: this.root,
        action: {
          input: {
            "use-markdown": function(arg$){
              var node, ref$;
              node = arg$.node;
              ((ref$ = this$.block).value || (ref$.value = {})).useMarkdown = node.checked;
              this$.update();
              return view.render();
            },
            "input-field": function(arg$){
              var node, ref$;
              node = arg$.node;
              ((ref$ = this$.block).value || (ref$.value = {})).content = node.value;
              return this$.update();
            },
            "toggle-preview": function(arg$){
              var node;
              node = arg$.node;
              this$.preview = !!node.checked;
              return view.render();
            }
          }
        },
        handler: {
          "input-field": function(arg$){
            var node, ref$;
            node = arg$.node;
            return node.value = ((ref$ = this$.block).value || (ref$.value = {})).content || '';
          },
          "preview-panel": function(arg$){
            var node, ref$;
            node = arg$.node;
            node.classList.toggle('d-none', !this$.preview);
            if (this$.preview) {
              return node.innerHTML = marked(((ref$ = this$.block).value || (ref$.value = {})).content || '');
            }
          },
          "edit-panel": function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', !!this$.preview);
          },
          "if-markdown": function(arg$){
            var node, ref$;
            node = arg$.node;
            return node.classList.toggle('d-none', !((ref$ = this$.block).value || (ref$.value = {})).useMarkdown);
          }
        }
      });
    }
  };
  import$(module, {
    "form-long-answer": moduleTextarea,
    "form-short-answer": moduleTextarea
  });
  Ctrl = function(opt){
    var root, this$ = this;
    this.opt = opt;
    this.viewing = opt.viewMode;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.hub = opt.hub;
    this.view = this.root.view = {};
    this.block = opt.data;
    this.view.block = new ldView({
      root: root,
      action: {
        input: {
          title: function(arg$){
            var node, evt;
            node = arg$.node, evt = arg$.evt;
            this$.block.title = node.innerText;
            return this$.update();
          },
          desc: function(arg$){
            var node, evt;
            node = arg$.node, evt = arg$.evt;
            this$.block.desc = node.innerText;
            return this$.update();
          }
        },
        click: {
          'switch': function(arg$){
            var node, evt, ref$;
            node = arg$.node, evt = arg$.evt;
            node.classList.toggle('on');
            ((ref$ = this$.block).config || (ref$.config = {}))[node.getAttribute('data-name')] = node.classList.contains('on');
            return this$.update();
          },
          'delete': function(arg$){
            var node, evt;
            node = arg$.node, evt = arg$.evt;
            return this$['delete']();
          },
          clone: function(arg$){
            var node, evt;
            node = arg$.node, evt = arg$.evt;
            return this$.clone();
          }
        }
      },
      handler: {
        invalid: function(arg$){
          var node, isValid, ref$;
          node = arg$.node;
          isValid = !(((ref$ = this$.block).valid || (ref$.valid = {})).result != null) || this$.block.valid.result;
          if (!isValid) {
            settext(node, this$.block.valid.criteria.invalid) || "這個欄位格式不符";
          }
          return node.classList.toggle('d-none', isValid);
        },
        block: function(arg$){
          var node, isValid, ref$;
          node = arg$.node;
          isValid = !(((ref$ = this$.block).valid || (ref$.valid = {})).result != null) || this$.block.valid.result;
          return node.classList.toggle('invalid', !isValid);
        },
        title: function(arg$){
          var node;
          node = arg$.node;
          settext(node, this$.block.title);
          if (this$.viewing) {
            return node.removeAttribute('editable');
          }
        },
        desc: function(arg$){
          var node;
          node = arg$.node;
          settext(node, this$.block.desc);
          if (this$.viewing) {
            return node.removeAttribute('editable');
          }
        },
        'switch': function(arg$){
          var node, ref$;
          node = arg$.node;
          return node.classList.toggle('on', !!((ref$ = this$.block).config || (ref$.config = {}))[node.getAttribute('data-name')]);
        },
        "edit-only": function(arg$){
          var node;
          node = arg$.node;
          if (this$.viewing) {
            return node.remove();
          }
        },
        "list-input": function(arg$){
          var node;
          node = arg$.node;
          return node.setAttribute('name', "input-" + this$.block.key);
        }
      }
    });
    if (!this.viewing) {
      this.view.criteria = new ldView({
        root: this.root,
        action: {
          click: {
            add: function(){
              var ref$;
              ((ref$ = this$.block).criteria || (ref$.criteria = [])).push({
                type: 'number'
              });
              return this$.view.criteria.render();
            }
          }
        },
        handler: {
          criteria: {
            list: function(){
              var ref$;
              return (ref$ = this$.block).criteria || (ref$.criteria = []);
            },
            action: {
              click: function(arg$){
                var node, data, evt, n;
                node = arg$.node, data = arg$.data, evt = arg$.evt;
                if (!(n = ld$.parent(evt.target, '.dropdown-item', node))) {
                  return;
                }
                if (n.type) {
                  data.type = n.type;
                }
                if (n.op) {
                  data.op = n.op;
                }
                this$.update();
                return node.view.render();
              }
            },
            init: function(arg$){
              var node, data, getType, getOp;
              node = arg$.node, data = arg$.data;
              getType = function(){
                return data.type || schema.support[this$.block.name][0] || 'number';
              };
              getOp = function(){
                var ops, v, k;
                ops = schema.ops[schema.types[getType()].ops];
                v = (function(){
                  var ref$, results$ = [];
                  for (k in ref$ = ops) {
                    v = ref$[k];
                    results$.push(v);
                  }
                  return results$;
                }())[0];
                return ops[data.op] || v || {
                  name: ""
                };
              };
              ld$.find(node, '.dropdown .dropdown-toggle').map(function(it){
                return new Dropdown(it);
              });
              return node.view = new ldView({
                root: node,
                action: {
                  input: {
                    input1: function(arg$){
                      var node;
                      node = arg$.node;
                      data.input1 = ld$.find(node, 'input', 0).value;
                      return this$.update();
                    },
                    input2: function(arg$){
                      var node;
                      node = arg$.node;
                      data.input2 = ld$.find(node, 'input', 0).value;
                      return this$.update();
                    },
                    "input-invalid": function(arg$){
                      var node;
                      node = arg$.node;
                      data.invalid = node.value;
                      return this$.update();
                    }
                  }
                },
                handler: {
                  input1: function(arg$){
                    var node;
                    node = arg$.node;
                    return ld$.find(node, 'input', 0).value = data.input1 || '';
                  },
                  input2: function(arg$){
                    var node;
                    node = arg$.node;
                    node.classList.toggle('d-none', (getOp().field || 1) < 2);
                    return ld$.find(node, 'input', 0).value = data.input2 || '';
                  },
                  "input-invalid": function(arg$){
                    var node;
                    node = arg$.node;
                    return node.value = data.invalid || '';
                  },
                  type: function(arg$){
                    var node;
                    node = arg$.node;
                    return settext(node, schema.types[getType()].name);
                  },
                  op: function(arg$){
                    var node;
                    node = arg$.node;
                    return node.innerHTML = getOp().name;
                  },
                  "types": {
                    list: function(){
                      return schema.support[this$.block.name];
                    },
                    handler: function(arg$){
                      var node, data;
                      node = arg$.node, data = arg$.data;
                      settext(node, schema.types[data].name);
                      return node.type = data;
                    }
                  },
                  "ops": {
                    list: function(){
                      var k, ref$, v, results$ = [];
                      for (k in ref$ = schema.ops[schema.types[getType()].ops]) {
                        v = ref$[k];
                        results$.push([k, v]);
                      }
                      return results$;
                    },
                    handler: function(arg$){
                      var node, data;
                      node = arg$.node, data = arg$.data;
                      node.innerHTML = data[1].name;
                      return node.op = data[0];
                    }
                  }
                }
              });
            },
            handler: function(arg$){
              var node, data;
              node = arg$.node, data = arg$.data;
              if (node.view) {
                return node.view.render();
              }
            }
          }
        }
      });
    }
    if (module[this.block.name]) {
      this.moduleInit = module[this.block.name].moduleInit;
      this.moduleInit();
    }
    return this;
  };
  Ctrl.prototype = import$(Object.create(Object.prototype), {
    setData: function(it){
      return this.block = it;
    },
    render: function(){
      this.view.block.render();
      if (this.view.module) {
        this.view.module.render();
      }
      if (this.view.criteria) {
        return this.view.criteria.render();
      }
    },
    update: function(){
      return this.hub.update(this.block);
    },
    'delete': function(){
      return this.hub['delete'](this.block);
    },
    clone: function(){
      return this.hub.clone(this.block);
    }
  });
  return Ctrl;
});
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}