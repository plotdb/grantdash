// Generated by LiveScript 1.3.0
(function(){
  ldc.register('prjForm', ['prjFormCriteria', 'prjFormBlock', 'prjFormValidation'], function(arg$){
    var prjFormCriteria, prjFormBlock, prjFormValidation, viewMode, lc, bmgr, fillData, validate, update, blocksView, n, reb, progress, viewer, renderAnswer, viewAnswer;
    prjFormCriteria = arg$.prjFormCriteria, prjFormBlock = arg$.prjFormBlock, prjFormValidation = arg$.prjFormValidation;
    viewMode = false;
    lc = {
      view: false
    };
    bmgr = {
      get: function(name){
        return new Promise(function(res, rej){
          var n, div;
          n = ld$.find("[data-name=" + name + "]", 0);
          if (!n) {
            rej(new Error("block not found"));
          }
          div = ld$.create({
            name: "div",
            attr: {
              draggable: true
            }
          });
          div.appendChild(n.cloneNode(true));
          return res(div);
        });
      }
    };
    fillData = {};
    validate = debounce(function(block){
      block.valid = prjFormValidation.validate(block);
      blocksView.render();
      if (viewer) {
        return viewer.render();
      }
    });
    update = function(block){
      if (viewMode) {
        fillData[block.key] = block.value;
        console.log("[update]", fillData);
        return validate(block);
      }
    };
    blocksView = new ldView({
      root: '#form',
      handler: {
        block: {
          list: function(){
            return sampleBlocks;
          },
          init: function(arg$){
            var node, data;
            node = arg$.node, data = arg$.data;
            return bmgr.get(data.name).then(function(n){
              n = n.childNodes[0];
              n.parentNode.removeChild(n);
              node.innerHTML = "";
              node.appendChild(n);
              prjFormBlock.render({
                node: node,
                data: data,
                viewMode: viewMode,
                update: update
              });
              if (!viewMode) {
                return prjFormCriteria.render({
                  node: node,
                  data: data
                });
              }
            });
          },
          handler: function(arg$){
            var node, data;
            node = arg$.node, data = arg$.data;
            if (node.view) {
              return node.view.block.render();
            }
          }
        }
      }
    });
    if (n = ld$.find('[ld-scope=blocksrc]', 0)) {
      new ldView({
        root: n,
        action: {
          dragstart: {
            block: function(arg$){
              var node, evt;
              node = arg$.node, evt = arg$.evt;
              return evt.dataTransfer.setData('text/plain', node.getAttribute('data-name') + "");
            }
          }
        }
      });
    }
    reb = new reblock({
      root: '#form',
      blockManager: bmgr,
      action: {
        afterMoveNode: function(arg$){
          var src, des, ib, n;
          src = arg$.src, des = arg$.des, ib = arg$.ib;
          if (src.parentNode.hasAttribute('hostable')) {
            n = src.parentNode;
            while (n && !n._data) {
              n = n.parentNode;
            }
            if (!n) {
              return;
            }
            n._data.data = Array.from(src.parentNode.childNodes).filter(function(it){
              return it.nodeType === 1;
            }).map(function(it){
              return it._data;
            }).filter(function(it){
              return it;
            });
            return n.view.list.render();
          }
        }
      }
    });
    if (viewMode) {
      progress = function(){
        var done, total, percent, remain;
        done = sampleBlocks.filter(function(it){
          return (it.valid || (it.valid = {})).result;
        }).length;
        total = sampleBlocks.length;
        percent = done / sampleBlocks.length;
        remain = total - done;
        return {
          remain: remain,
          done: done,
          total: total,
          percent: percent
        };
      };
      viewer = new ldView({
        root: document.body,
        action: {
          click: {
            viewing: function(){
              lc.view = !lc.view;
              viewer.render();
              return viewAnswer.render();
            },
            invalid: function(){
              var filled, res$, k, i$, to$, i, node;
              res$ = [];
              for (k in fillData) {
                res$.push(k);
              }
              filled = res$;
              for (i$ = 0, to$ = sampleBlocks.length; i$ < to$; ++i$) {
                i = i$;
                if (!in$(sampleBlocks[i].key + "", filled)) {
                  break;
                }
              }
              node = ld$.find("#block-" + sampleBlocks[i].key, 0);
              if (node) {
                return scrollto(node);
              }
            }
          }
        },
        handler: {
          nview: function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', lc.view);
          },
          view: function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', !lc.view);
          },
          progress: function(arg$){
            var node;
            node = arg$.node;
            return node.style.width = progress().percent * 100 + "%";
          },
          invalid: function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', progress().remain === 0);
          },
          valid: function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', progress().remain > 0);
          },
          remain: function(arg$){
            var node;
            node = arg$.node;
            return node.innerText = progress().remain;
          },
          submit: function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('disabled', progress().remain > 0);
          }
        }
      });
      renderAnswer = {
        "form-checkpoint": function(arg$){
          var node, data, block, items;
          node = arg$.node, data = arg$.data, block = arg$.block;
          items = (data.list || []).map(function(it){
            return "<div class=\"item\">\n<div class=\"title\">" + it.title + "</div>\n<p>" + it.desc + "</p>\n</div>";
          }).join("");
          return node.innerHTML = "<div class=\"timeline-list\">" + items + "</div>";
        },
        "form-radio": function(arg$){
          var node, data;
          node = arg$.node, data = arg$.data;
          return node.innerText = ((data.list || []).concat(data.other
            ? [data.otherValue || '']
            : [])).join(', ');
        },
        "form-checkbox": function(arg$){
          var node, data;
          node = arg$.node, data = arg$.data;
          return node.innerText = ((data.list || []).concat(data.other
            ? [data.otherValue || '']
            : [])).join(', ');
        }
      };
      return viewAnswer = new ldView({
        root: document.body,
        handler: {
          answer: {
            list: function(){
              return sampleBlocks;
            },
            init: function(arg$){
              var node, data;
              node = arg$.node, data = arg$.data;
              return node.view = new ldView({
                root: node,
                handler: {
                  title: function(arg$){
                    var node;
                    node = arg$.node;
                    return node.innerText = data.title || '';
                  },
                  desc: function(arg$){
                    var node;
                    node = arg$.node;
                    return node.innerText = data.desc || '';
                  },
                  content: function(arg$){
                    var node;
                    node = arg$.node;
                    if (renderAnswer[data.name]) {
                      return renderAnswer[data.name]({
                        node: node,
                        block: data,
                        data: fillData[data.key] || {}
                      });
                    } else {
                      return node.innerText = (fillData[data.key] || {}).content || '';
                    }
                  }
                }
              });
            },
            handler: function(arg$){
              var node, data;
              node = arg$.node, data = arg$.data;
              return node.view.render();
            }
          }
        }
      });
    }
  });
  return ldc.app('prjForm');
})();
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}