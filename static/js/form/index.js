// Generated by LiveScript 1.3.0
(function(){
  ldc.register('prjForm', ['prjFormCriteria', 'prjFormBlock'], function(arg$){
    var prjFormCriteria, prjFormBlock, viewMode, lc, bmgr, fillData, update, blocksView, n, reb, handle, viewer, renderAnswer, viewAnswer;
    prjFormCriteria = arg$.prjFormCriteria, prjFormBlock = arg$.prjFormBlock;
    viewMode = true;
    lc = {
      view: true
    };
    bmgr = {
      get: function(name){
        return new Promise(function(res, rej){
          var n, div;
          n = ld$.find("[data-name=" + name + "]", 0);
          if (!n) {
            rej(new Error("block not found"));
          }
          div = ld$.create({
            name: "div",
            attr: {
              draggable: true
            }
          });
          div.appendChild(n.cloneNode(true));
          return res(div);
        });
      }
    };
    fillData = {};
    update = function(block){
      fillData[block.key] = block.value;
      return console.log("[update]", fillData);
    };
    blocksView = new ldView({
      root: '#form',
      handler: {
        block: {
          list: function(){
            return sampleBlocks;
          },
          init: function(arg$){
            var node, data;
            node = arg$.node, data = arg$.data;
            return bmgr.get(data.name).then(function(n){
              n = n.childNodes[0];
              n.parentNode.removeChild(n);
              node.innerHTML = "";
              node.appendChild(n);
              prjFormBlock.render({
                node: node,
                data: data,
                viewMode: viewMode,
                update: update
              });
              if (!viewMode) {
                return prjFormCriteria.render({
                  node: node,
                  data: data
                });
              }
            });
          }
        }
      }
    });
    if (n = ld$.find('[ld-scope=blocksrc]', 0)) {
      new ldView({
        root: n,
        action: {
          dragstart: {
            block: function(arg$){
              var node, evt;
              node = arg$.node, evt = arg$.evt;
              return evt.dataTransfer.setData('text/plain', node.getAttribute('data-name') + "");
            }
          }
        }
      });
    }
    reb = new reblock({
      root: '#form',
      blockManager: bmgr,
      action: {
        afterMoveNode: function(arg$){
          var src, des, ib, n;
          src = arg$.src, des = arg$.des, ib = arg$.ib;
          if (src.parentNode.hasAttribute('hostable')) {
            n = src.parentNode;
            while (n && !n._data) {
              n = n.parentNode;
            }
            if (!n) {
              return;
            }
            n._data.data = Array.from(src.parentNode.childNodes).filter(function(it){
              return it.nodeType === 1;
            }).map(function(it){
              return it._data;
            }).filter(function(it){
              return it;
            });
            return n.view.list.render();
          }
        }
      }
    });
    handle = function(){};
    /*
    view = new ldView do
      root: '[ld-scope=project-edit]'
      action: click: do
        submit: -> handle!
    */
    viewer = new ldView({
      root: document.body,
      action: {
        click: {
          viewing: function(){
            lc.view = !lc.view;
            viewer.render();
            return viewAnswer.render();
          }
        }
      },
      handler: {
        nview: function(arg$){
          var node;
          node = arg$.node;
          return node.classList.toggle('d-none', lc.view);
        },
        view: function(arg$){
          var node;
          node = arg$.node;
          return node.classList.toggle('d-none', !lc.view);
        }
      }
    });
    renderAnswer = {
      "form-checkpoint": function(arg$){
        var node, data, block, items;
        node = arg$.node, data = arg$.data, block = arg$.block;
        items = (data.list || []).map(function(it){
          return "<div class=\"item\">\n<div class=\"title\">" + it.title + "</div>\n<p>" + it.desc + "</p>\n</div>";
        }).join("");
        node.innerHTML = "<div class=\"timeline-list\">" + items + "</div>";
        return console.log(data);
      },
      "form-radio": function(arg$){
        var node, data;
        node = arg$.node, data = arg$.data;
        return node.innerText = ((data.list || []).concat(data.other
          ? [data.otherValue || '']
          : [])).join(', ');
      },
      "form-checkbox": function(arg$){
        var node, data;
        node = arg$.node, data = arg$.data;
        return node.innerText = ((data.list || []).concat(data.other
          ? [data.otherValue || '']
          : [])).join(', ');
      }
    };
    return viewAnswer = new ldView({
      root: document.body,
      handler: {
        answer: {
          list: function(){
            return sampleBlocks;
          },
          init: function(arg$){
            var node, data;
            node = arg$.node, data = arg$.data;
            return node.view = new ldView({
              root: node,
              handler: {
                title: function(arg$){
                  var node;
                  node = arg$.node;
                  return node.innerText = data.title || '';
                },
                desc: function(arg$){
                  var node;
                  node = arg$.node;
                  return node.innerText = data.desc || '';
                },
                content: function(arg$){
                  var node;
                  node = arg$.node;
                  if (renderAnswer[data.name]) {
                    return renderAnswer[data.name]({
                      node: node,
                      block: data,
                      data: fillData[data.key] || {}
                    });
                  } else {
                    return node.innerText = (fillData[data.key] || {}).content || '';
                  }
                }
              }
            });
          },
          handler: function(arg$){
            var node, data;
            node = arg$.node, data = arg$.data;
            return node.view.render();
          }
        }
      }
    });
  });
  return ldc.app('prjForm');
})();