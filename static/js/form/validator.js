// Generated by LiveScript 1.3.0
ldc.register('prjFormValidation', ['prjFormCriteria'], function(arg$){
  var prjFormCriteria, validator, getData, isEmpty, retcode, applyCriteria, emptyHelper, validate;
  prjFormCriteria = arg$.prjFormCriteria;
  validator = {
    number: {
      type: function(v, i, j){
        return !(isNaN(v) || (i != null && isNaN(i)) || (j != null && isNaN(j)));
      },
      convert: function(v, i, j){
        return [+v, +(i || 0), +(j || 0)];
      },
      gte: function(v, i){
        return v >= i;
      },
      lte: function(v, i){
        return v <= i;
      },
      ge: function(v, i){
        return v > i;
      },
      le: function(v, i){
        return v < i;
      },
      eq: function(v, i){
        return v === i;
      },
      ne: function(v, i){
        return v !== i;
      },
      between: function(v, i, j){
        return v >= i && v <= j;
      }
    },
    string: {
      type: function(v, i){
        return v != null && i != null;
      },
      convert: function(v, i){
        return [v + "", i + ""];
      },
      include: function(v, i){
        return ~v.indexOf(i);
      },
      exclude: function(v, i){
        return !~v.indexOf(i);
      },
      email: function(v, i){
        return /^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.[a-z]{2,}|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i.exec(v);
      },
      url: function(v, i){
        return /^\s*http(s):\/\/[a-zA-Z0-9-]+/.exec(v);
      }
    },
    count: {
      type: function(v, i, j){
        return v != null && i != null && j != null;
      },
      convert: function(v, i, j){
        var len;
        len = Array.isArray(v)
          ? v.length
          : v != null ? v.length || (v + "").length : 0;
        return [len, +(i || 0), +(j || 0)];
      },
      gte: function(v, i){
        return v >= i;
      },
      lte: function(v, i){
        return v <= i;
      },
      eq: function(v, i){
        return v === i;
      },
      between: function(v, i, j){
        return v >= i && v <= j;
      }
    },
    regex: {
      match: function(v, i){
        return new RegExp(i).exec(v);
      },
      "not-match": function(v, i){
        return !new RegExp(i).exec(v);
      }
    },
    smaller: {
      type: function(v, i, j){
        return !(isNaN(v) || (i != null && isNaN(i)) || (j != null && isNaN(j)));
      },
      convert: function(v, i, j){
        return [+v, +(i || 0), +(j || 0)];
      },
      le: function(v, i){
        return v < i;
      }
    }
  };
  getData = {
    "form-checkpoint": function(arg$){
      var block;
      block = arg$.block;
      return (block.value || {}).list || [];
    },
    "form-datetime": function(arg$){
      var block;
      block = arg$.block;
      return block.value || {};
    },
    "form-checkbox": function(arg$){
      var block, value;
      block = arg$.block;
      value = block.value || {};
      return (value.list || []).concat(value.other
        ? [value.otherValue]
        : []);
    },
    "form-radio": function(arg$){
      var block, value;
      block = arg$.block;
      value = block.value || {};
      return (value.list || []).concat(value.other
        ? [value.otherValue]
        : []);
    },
    "form-table": function(arg$){
      var block;
      block = arg$.block;
      return ((block.value || {}).sheet || []).filter(function(it){
        return it.filter(function(it){
          return it;
        }).length;
      });
    }
  };
  isEmpty = {
    "form-checkpoint": function(arg$){
      var block, data;
      block = arg$.block, data = arg$.data;
      return !data.length || data.filter(function(it){
        return it.title && it.desc && it.date;
      }).length !== data.length;
    },
    "form-datetime": function(arg$){
      var block, data, config;
      block = arg$.block, data = arg$.data;
      config = block.config || {};
      return !(data.start && (!config.rangeEnabled || data.end));
    },
    "form-checkbox": function(arg$){
      var block, data;
      block = arg$.block, data = arg$.data;
      return !data.filter(function(it){
        return it;
      }).length;
    },
    "form-radio": function(arg$){
      var block, data;
      block = arg$.block, data = arg$.data;
      return !data.filter(function(it){
        return it;
      }).length;
    },
    "form-table": function(arg$){
      var block, data;
      block = arg$.block, data = arg$.data;
      return !(data && data.length);
    }
  };
  retcode = {
    empty: {
      result: false,
      criteria: {
        invalid: "此為必填項目"
      }
    },
    pass: {
      result: true
    }
  };
  applyCriteria = function(c, data){
    var type, vtr, ref$, v, i, j;
    if (!c.enabled) {
      return null;
    }
    type = prjFormCriteria.schema.types[c.type];
    if (!(c.type && type)) {
      return null;
    }
    vtr = validator[type.ops];
    if (!vtr[c.op]) {
      return null;
    }
    ref$ = vtr.convert(data, c.input1, c.input2), v = ref$[0], i = ref$[1], j = ref$[2];
    if (!(vtr.type(v, i, j) && vtr[c.op](v, i, j))) {
      return {
        result: false,
        criteria: c
      };
    }
    return null;
  };
  emptyHelper = function(arg$){
    var block, empty, force, config;
    block = arg$.block, empty = arg$.empty, force = arg$.force;
    config = block.config || (block.config = {});
    if (empty && ((config.required && block.touched) || force)) {
      return retcode.empty;
    }
    if (empty) {
      return {};
    }
    block.touched = true;
    return null;
  };
  validate = {
    "form-text": function(){
      return {
        result: true
      };
    },
    "form-budget": function(arg$){
      var block, force, sheet, data, empty, that, total, subsidy, percent, i$, ref$, len$, c;
      block = arg$.block, force = arg$.force;
      sheet = (block.value || {}).sheet || [];
      data = sheet.reduce(function(a, b){
        return a + +b[2] + +b[3];
      }, 0);
      empty = !data || isNaN(data);
      if (that = emptyHelper({
        block: block,
        empty: empty,
        force: force
      })) {
        return that;
      }
      total = sheet.reduce(function(a, b){
        return a + +b[2] + +b[3];
      }, 0);
      subsidy = sheet.reduce(function(a, b){
        return a + +b[3];
      }, 0);
      percent = (subsidy / (total || 1)) * 100;
      for (i$ = 0, len$ = (ref$ = block.criteria || []).length; i$ < len$; ++i$) {
        c = ref$[i$];
        if (c.type === 'budget-percent') {
          data = percent;
        } else if (c.type === 'budget-number') {
          data = subsidy;
        }
        if (that = applyCriteria(c, data)) {
          return that;
        }
      }
      return {
        result: true
      };
    }
  };
  return {
    validate: function(block, force){
      var ref$, value, config, empty, data, that, i$, len$, c;
      force == null && (force = false);
      ref$ = [block.value || (block.value = {}), block.config || (block.config = {}), false], value = ref$[0], config = ref$[1], empty = ref$[2];
      if (validate[block.name]) {
        return validate[block.name]({
          block: block,
          force: force
        });
      }
      data = getData[block.name]
        ? getData[block.name]({
          block: block
        })
        : value.content
          ? value.content
          : value.list ? data = value.list : null;
      empty = isEmpty[block.name]
        ? isEmpty[block.name]({
          block: block,
          data: data
        })
        : value.content
          ? !value.content
          : value.list ? !(value.list && value.list.length) : true;
      if (that = emptyHelper({
        block: block,
        empty: empty,
        force: force
      })) {
        return that;
      }
      for (i$ = 0, len$ = (ref$ = block.criteria || []).length; i$ < len$; ++i$) {
        c = ref$[i$];
        if (that = applyCriteria(c, data)) {
          return that;
        }
      }
      return retcode.pass;
    }
  };
});