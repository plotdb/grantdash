// Generated by LiveScript 1.3.0
(function(){
  var formData, view, root, container, bmgr, reb, criteriaConfig, renderCriteria, getBlock, getCriteria;
  formData = {
    blocks: []
  };
  view = new ldView({
    root: '#menu',
    action: {
      dragstart: {
        blocksrc: function(arg$){
          var node, evt;
          node = arg$.node, evt = arg$.evt;
          return evt.dataTransfer.setData('text/plain', "form-" + node.getAttribute('data-name'));
        }
      }
    },
    init: {
      blocksrc: function(){}
    }
  });
  root = ld$.find('#root', 0);
  container = ld$.find(root, '.inner', 0);
  bmgr = {
    get: function(name){
      var ret, type, op;
      ret = ld$.find(root, ".sample [data-name=" + name + "]", 0).cloneNode(true);
      ret.setAttribute('draggable', true);
      type = ld$.find(ret, "[ld=criteria-type]", 0);
      new Dropdown(type);
      op = ld$.find(ret, "[criteria-op]", 0);
      return Promise.resolve(ret);
    }
  };
  reb = new reblock({
    root: root,
    blockManager: bmgr,
    data: formData,
    action: {
      inject: function(arg$){
        var parent, node, name, data, idx;
        parent = arg$.parent, node = arg$.node, name = arg$.name, data = arg$.data;
        idx = Array.from(parent.childNodes).indexOf(node);
        formData.blocks.splice(idx, 0, data = data || {
          name: name
        });
        node.blockData = data;
        return renderCriteria(node);
      },
      input: function(arg$){
        var node, n, data, name;
        node = arg$.node;
        n = node;
        while (n) {
          if (n.blockData) {
            break;
          }
          n = n.parentNode;
        }
        if (!(data = n.blockData)) {
          return;
        }
        name = node.getAttribute('editable');
        (data.data || (data.data = {}))[name] = node.innerText || node.value || '';
        return console.log(data);
      },
      clone: function(arg$){
        var node, idx;
        node = arg$.node;
        if (node.previousSibling.blockData) {
          idx = Array.from(node.parentNode).indexOf(node);
          formData.blocks.splice(idx, 0, JSON.parse(JSON.stringify(node.previousSibling.blockData)));
        }
        return console.log(formData);
      },
      'delete': function(arg$){
        var node;
        node = arg$.node;
        if (node.blockData) {
          formData.blocks.splice(Array.from(node.parentNode).indexOf(node), 1);
        }
        return console.log(formData);
      },
      move: function(arg$){
        var src, des, origin;
        src = arg$.src, des = arg$.des, origin = arg$.origin;
      }
    }
  });
  criteriaConfig = {
    types: {
      'form-short-answer': ['number', 'string', 'length', 'regex'],
      'form-long-answer': ['string', 'length', 'regex'],
      'form-radio': [],
      'form-checkbox': ['count'],
      'form-file': ['file-size', 'file-formt', 'file-count'],
      'budget': ['count'],
      'checkpoint': ['count']
    }
  };
  renderCriteria = function(block){
    var data, type, ref$, availableTypes, typeNode, typeToggler, item, opsNode, opsType, opsDropdown, op, opToggler;
    data = block.blockData;
    type = ((ref$ = data.config || (data.config = {})).criteria || (ref$.criteria = {})).type;
    availableTypes = criteriaConfig.types[data.name];
    if (!in$(type, availableTypes)) {
      type = availableTypes[0];
    }
    typeNode = ld$.find(block, '[ld=criteria-type]', 0);
    typeToggler = ld$.find(typeNode, '.dropdown-toggle', 0);
    ld$.find(typeNode, '.dropdown-item').map(function(it){
      return it.classList.toggle('d-none', !in$(it.getAttribute('data-criteria-type'), availableTypes));
    });
    item = ld$.find(typeNode, ".dropdown-item[data-criteria-type=" + type + "]", 0);
    typeToggler.innerText = item.innerText;
    opsNode = ld$.find(block, '[ld=criteria-op]', 0);
    opsType = item.getAttribute('data-ops') || type;
    console.log(opsType);
    opsDropdown = ld$.find(opsNode, '.dropdown', 0);
    if (!opsDropdown || opsDropdown.getAttribute("data-criteria-ops") !== opsType) {
      opsDropdown = ld$.find(root, "[data-criteria-ops=" + opsType + "]", 0);
      opsNode.innerHTML = "";
      opsNode.appendChild(opsDropdown = opsDropdown.cloneNode(true));
      new Dropdown(opsDropdown);
    }
    console.log(opsDropdown);
    op = ((ref$ = data.config || (data.config = {})).criteria || (ref$.criteria = {})).op || ld$.find(opsDropdown, '.dropdown-item', 0).getAttribute('data-op');
    item = ld$.find(opsNode, ".dropdown-item[data-op=" + op + "]", 0);
    if (!item) {
      op = ld$.find(opsDropdown, '.dropdown-item', 0).getAttribute('data-op');
      item = ld$.find(opsNode, ".dropdown-item[data-op=" + op + "]", 0);
    }
    opToggler = ld$.find(opsDropdown, '.dropdown-toggle', 0);
    opToggler.innerText = item.innerText;
    return ref$ = data.config.criteria, ref$.op = op, ref$.type = type, ref$;
  };
  getBlock = function(node){
    while (node) {
      if (node.blockData) {
        break;
      }
      node = node.parentNode;
    }
    if (!(node && node.blockData)) {
      return;
    }
    return node;
  };
  root.addEventListener('click', function(e){
    var node, block, blockData, name, dropdown, toggler, type, ref$, ref1$, op;
    if (!(node = e.target) || !node.getAttribute || !node.classList) {
      return;
    }
    if (!(block = getBlock(node))) {
      return;
    }
    blockData = block.blockData;
    if (node.classList.contains('switch')) {
      node.classList.toggle('on');
      name = node.getAttribute('data-name');
      (blockData.config || (blockData.config = {}))[name] = node.classList.contains('on');
    }
    if (node.getAttribute('data-action') === 'delete') {
      reb.select(block);
      reb['delete']();
    }
    if (node.getAttribute('data-action') === 'clone') {
      reb.inject({
        node: node,
        data: JSON.parse(JSON.stringify(blockData))
      });
    }
    if (node.classList.contains('dropdown-item')) {
      dropdown = ld$.parent(node, '[ld]');
      toggler = ld$.find(dropdown, '.dropdown-toggle', 0);
      name = dropdown.getAttribute('ld');
      console.log(name);
      if (name === 'criteria-type') {
        type = node.getAttribute('data-criteria-type');
        ((ref$ = (ref1$ = block.blockData).config || (ref1$.config = {})).criteria || (ref$.criteria = {})).type = type;
        return renderCriteria(block);
      } else if (name === 'criteria-op') {
        op = node.getAttribute('data-op');
        ((ref$ = (ref1$ = block.blockData).config || (ref1$.config = {})).criteria || (ref$.criteria = {})).op = op;
        console.log(123, op);
        return renderCriteria(block);
      }
    }
  });
  /*
    if (type = node.getAttribute(\data-criteria-type)) =>
      optype = node.getAttribute(\data-ops) or type
      op = ld$.find(p, '[ld=criteria-op]',0)
      node = ld$.find(root, "[data-criteria-ops=#{optype}]", 0)
      if !node => return
      node = node.cloneNode(true)
      console.log node
      op.innerHTML = ""
      op.appendChild node
      new Dropdown(node)
  
  set-criteria = ({root, type, optype, op})->
    node = do
      type: ld$.find(root, '[ld=criteria-type]', 0)
      op: ld$.find(root, '[ld=criteria-op]', 0)
    node = ld$.find(root, "[data-criteria-ops=#{optype}]", 0).cloneNode(true)
    node.op.innerHTML = ""
    node.op.appendChild node
    toggle = do
      type: ld$.find(node.type, ".dropdown-toggle", 0)
      op: ld$.find(node.op, ".dropdown-toggle", 0)
    toggle.type.innerText = ld$.find(node.type, "[data-criteria-type=#{type}]", 0).innerText
    toggle.op.innerText = ld$.find(node.op, "[data-op=#{op}]", 0).innerText
  */
  return getCriteria = function(){};
})();
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}