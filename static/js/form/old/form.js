// Generated by LiveScript 1.3.0
(function(){
  var criteria, criteriaRender, renderList, formModules, blockRenderer, blocks, bmgr, blocksView, viewBlocksrc, reb;
  criteria = {
    types: {
      "number": {
        name: "數值",
        ops: "number"
      },
      "string": {
        name: "文字",
        ops: "string"
      },
      "length": {
        name: "長度",
        ops: "count"
      },
      "regex": {
        name: "正規式",
        ops: "regex"
      },
      "count": {
        name: "選項數",
        ops: "count"
      },
      "file-size": {
        name: "檔案大小",
        ops: "smaller"
      },
      "file-format": {
        name: "檔案格式",
        ops: "extension"
      },
      "file-count": {
        name: "檔案數量",
        ops: "count"
      }
    },
    ops: {
      extension: {
        "extension": {
          name: "副檔名"
        }
      },
      regex: {
        "match": {
          name: "符合"
        },
        "not-match": {
          name: "不符"
        }
      },
      count: {
        "gte": {
          name: '<div class="s mr-2">&#x2265;</div> 大於或等於'
        },
        "lte": {
          name: '<div class="s mr-2">&#x2264;</div> 小於或等於'
        },
        "eq": {
          name: '<div class="s mr-2">=</div> 等於'
        },
        "between": {
          name: '<div class="s mr-2">&#x223c;</div> 介於',
          field: 2
        }
      },
      string: {
        "include": {
          name: "包含"
        },
        "exclude": {
          name: "不包含"
        },
        "email": {
          name: "電子郵件位置"
        },
        "url": {
          name: "網址"
        }
      },
      number: {
        "gte": {
          name: '<div class="s mr-2">&#x2265;</div> 大於或等於'
        },
        "lte": {
          name: '<div class="s mr-2">&#x2264;</div> 小於或等於'
        },
        "ge": {
          name: '<div class="s mr-2">&gt;</div> 大於'
        },
        "le": {
          name: '<div class="s mr-2">&lt;</div> 小於'
        },
        "eq": {
          name: '<div class="s mr-2">=</div> 等於'
        },
        "ne": {
          name: '<div class="s mr-2">&#x2260;</div> 不等於'
        },
        "between": {
          name: '<div class="s mr-2">&#x223c;</div> 介於',
          field: 2
        }
      },
      smaller: {
        "ge": {
          name: '<div class="s mr-2">&gt;</div> 大於'
        }
      }
    },
    support: {
      'form-short-answer': ['number', 'string', 'length', 'regex'],
      'form-long-answer': ['string', 'length', 'regex'],
      'form-radio': [],
      'form-checkbox': ['count'],
      'form-file': ['file-size', 'file-formt', 'file-count'],
      'form-budget': ['count'],
      'form-checkpoint': ['count']
    }
  };
  criteriaRender = function(arg$){
    var node, data, rootData, view;
    node = arg$.node, data = arg$.data;
    rootData = data;
    return (node.view || (node.view = {})).criteria = view = new ldView({
      root: node,
      action: {
        click: {
          add: function(){
            (data.criteria || (data.criteria = [])).push({
              type: 'number'
            });
            return view.render();
          }
        }
      },
      handler: {
        criteria: {
          list: function(){
            return data.criteria || (data.criteria = []);
          },
          action: {
            click: function(arg$){
              var node, data, evt, n;
              node = arg$.node, data = arg$.data, evt = arg$.evt;
              if (!(n = ld$.parent(evt.target, '.dropdown-item', node))) {
                return;
              }
              if (n.type) {
                data.type = n.type;
              }
              if (n.op) {
                data.op = n.op;
              }
              return node.view.render();
            }
          },
          init: function(arg$){
            var node, data, getType, getOp;
            node = arg$.node, data = arg$.data;
            getType = function(){
              return data.type || criteria.support[rootData.name][0] || 'number';
            };
            getOp = function(){
              var ops, v, k;
              ops = criteria.ops[criteria.types[getType()].ops];
              v = (function(){
                var ref$, results$ = [];
                for (k in ref$ = ops) {
                  v = ref$[k];
                  results$.push(v);
                }
                return results$;
              }())[0];
              return ops[data.op] || v || {
                name: ""
              };
            };
            ld$.find(node, '.dropdown .dropdown-toggle').map(function(it){
              return new Dropdown(it);
            });
            return node.view = new ldView({
              root: node,
              action: {
                input: {
                  input1: function(arg$){
                    var node;
                    node = arg$.node;
                    return data.input1 = ld$.find(node, 'input', 0).value;
                  },
                  input2: function(arg$){
                    var node;
                    node = arg$.node;
                    return data.input2 = ld$.find(node, 'input', 0).value;
                  },
                  invalid: function(arg$){
                    var node;
                    node = arg$.node;
                    return data.invalid = node.value;
                  }
                }
              },
              handler: {
                input1: function(arg$){
                  var node;
                  node = arg$.node;
                  return ld$.find(node, 'input', 0).value = data.input1 || '';
                },
                input2: function(arg$){
                  var node;
                  node = arg$.node;
                  node.classList.toggle('d-none', (getOp().field || 1) < 2);
                  return ld$.find(node, 'input', 0).value = data.input2 || '';
                },
                invalid: function(arg$){
                  var node;
                  node = arg$.node;
                  return node.value = data.invalid || '';
                },
                type: function(arg$){
                  var node;
                  node = arg$.node;
                  return node.innerText = criteria.types[getType()].name;
                },
                op: function(arg$){
                  var node;
                  node = arg$.node;
                  return node.innerHTML = getOp().name;
                },
                "types": {
                  list: function(){
                    return criteria.support[rootData.name];
                  },
                  handler: function(arg$){
                    var node, data;
                    node = arg$.node, data = arg$.data;
                    node.innerText = criteria.types[data].name;
                    return node.type = data;
                  }
                },
                "ops": {
                  list: function(){
                    var k, ref$, v, results$ = [];
                    for (k in ref$ = criteria.ops[criteria.types[getType()].ops]) {
                      v = ref$[k];
                      results$.push([k, v]);
                    }
                    return results$;
                  },
                  handler: function(arg$){
                    var node, data;
                    node = arg$.node, data = arg$.data;
                    node.innerHTML = data[1].name;
                    return node.op = data[0];
                  }
                }
              }
            });
          },
          handler: function(arg$){
            var node, data;
            node = arg$.node, data = arg$.data;
            if (node.view) {
              return node.view.render();
            }
          }
        }
      }
    });
  };
  renderList = function(arg$){
    var node, data, localData, view;
    node = arg$.node, data = arg$.data;
    localData = data.data || (data.data = []);
    return (node.view || (node.view = {})).list = view = new ldView({
      root: node,
      action: {
        click: {
          "list-add": function(){
            localData.push({
              title: "某個點",
              desc: "某個點的描述"
            });
            return view.render();
          }
        }
      },
      handler: {
        list: {
          list: function(){
            return localData;
          },
          init: function(arg$){
            var node, data, editable, view;
            node = arg$.node, data = arg$.data;
            editable = true;
            if (!editable) {
              node.removeAttribute('draggable');
            }
            return node.view = view = new ldView({
              root: node,
              action: {
                input: {
                  "list-data": function(arg$){
                    var node;
                    node = arg$.node;
                    return data[node.getAttribute('data-name')] = node.innerText;
                  }
                }
              },
              init: {
                "list-data": function(arg$){
                  var node;
                  node = arg$.node;
                  node.setAttribute('data-name', node.getAttribute('editable'));
                  if (!editable) {
                    return node.removeAttribute('editable');
                  }
                }
              },
              handler: {
                "list-data": function(arg$){
                  var node;
                  node = arg$.node;
                  return node.innerText = data[node.getAttribute('data-name')] || '';
                }
              }
            });
          },
          render: function(arg$){
            var node;
            node = arg$.node;
            return node.render();
          }
        }
      }
    });
  };
  formModules = {
    "form-radio": renderList,
    "form-checkbox": renderList,
    "form-checkpoint": renderList
  };
  blockRenderer = function(arg$){
    var node, data;
    node = arg$.node, data = arg$.data;
    return (node.view || (node.view = {})).block = new ldView({
      root: node,
      action: {
        input: {
          title: function(arg$){
            var node, evt;
            node = arg$.node, evt = arg$.evt;
            return data.title = node.innerText;
          },
          desc: function(arg$){
            var node, evt;
            node = arg$.node, evt = arg$.evt;
            return data.desc = node.innerText;
          }
        },
        click: {
          'switch': function(arg$){
            var node, evt;
            node = arg$.node, evt = arg$.evt;
            node.classList.toggle('on');
            return (data.config || (data.config = {}))[node.getAttribute('data-name')] = node.classList.contains('on');
          },
          'delete': function(arg$){
            var node, evt;
            node = arg$.node, evt = arg$.evt;
          },
          clone: function(arg$){
            var node, evt;
            node = arg$.node, evt = arg$.evt;
            return console.log(data);
          }
        }
      },
      handler: {
        title: function(arg$){
          var node;
          node = arg$.node;
          return node.innerText = data.title;
        },
        desc: function(arg$){
          var node;
          node = arg$.node;
          return node.innerText = data.desc;
        },
        'switch': function(arg$){
          var node;
          node = arg$.node;
          return node.classList.toggle('on', !!(data.config || (data.config = {}))[node.getAttribute('data-name')]);
        }
      }
    });
  };
  blocks = [
    {
      name: "form-short-answer",
      title: "提問的標題1",
      desc: "提問的描述",
      config: {
        required: true
      },
      criteria: [{}]
    }, {
      name: "form-long-answer",
      title: "提問的標題2",
      desc: "提問的描述",
      config: {
        required: true
      },
      criteria: [{}]
    }, {
      name: "form-checkpoint",
      title: "提問的標題3",
      desc: "提問的描述",
      data: [{
        title: "第一個點",
        desc: "第一個點的描述"
      }],
      config: {
        required: true
      },
      criteria: [{}]
    }, {
      name: "form-radio",
      title: "提問的標題3",
      desc: "提問的描述",
      data: [{
        title: "第一個點",
        desc: "第一個點的描述"
      }],
      config: {
        required: true
      },
      criteria: [{}]
    }, {
      name: "form-checkbox",
      title: "提問的標題3",
      desc: "提問的描述",
      data: [{
        title: "第一個點",
        desc: "第一個點的描述"
      }],
      config: {
        required: true
      },
      criteria: [{}]
    }
  ];
  bmgr = {
    get: function(name){
      return new Promise(function(res, rej){
        var n, div;
        n = ld$.find("[data-name=" + name + "]", 0);
        if (!n) {
          rej(new Error("block not found"));
        }
        div = ld$.create({
          name: "div",
          attr: {
            draggable: true
          }
        });
        div.appendChild(n.cloneNode(true));
        return res(div);
      });
    }
  };
  blocksView = new ldView({
    root: '#form',
    handler: {
      block: {
        list: function(){
          return blocks;
        },
        init: function(arg$){
          var node, data;
          node = arg$.node, data = arg$.data;
          return bmgr.get(data.name).then(function(n){
            var that;
            n = n.childNodes[0];
            n.parentNode.removeChild(n);
            node.innerHTML = "";
            node.appendChild(n);
            blockRenderer({
              node: node,
              data: data
            });
            criteriaRender({
              node: node,
              data: data
            });
            if (that = formModules[data.name]) {
              return that({
                node: node,
                data: data
              });
            }
          });
        }
      }
    }
  });
  viewBlocksrc = new ldView({
    root: '[ld-scope=blocksrc]',
    action: {
      dragstart: {
        block: function(arg$){
          var node, evt;
          node = arg$.node, evt = arg$.evt;
          return evt.dataTransfer.setData('text/plain', node.getAttribute('data-name') + "");
        }
      }
    }
  });
  return reb = new reblock({
    root: '#form',
    blockManager: bmgr,
    action: {
      afterMoveNode: function(arg$){
        var src, des, ib, n;
        src = arg$.src, des = arg$.des, ib = arg$.ib;
        if (src.parentNode.hasAttribute('hostable')) {
          n = src.parentNode;
          while (n && !n._data) {
            n = n.parentNode;
          }
          if (!n) {
            return;
          }
          n._data.data = Array.from(src.parentNode.childNodes).filter(function(it){
            return it.nodeType === 1;
          }).map(function(it){
            return it._data;
          }).filter(function(it){
            return it;
          });
          return n.view.list.render();
        }
      }
    }
  });
})();