// Generated by LiveScript 1.3.0
(function(){
  ldc.register('change-password', ['error', 'auth', 'notify'], function(arg$){
    var error, auth, notify, local;
    error = arg$.error, auth = arg$.auth, notify = arg$.notify;
    local = {};
    return auth.get({
      authed: true
    }).then(function(g){
      var local, form, btn, ldld;
      local = g;
      form = new ldForm({
        root: '.form[data-name=passwd]',
        submit: '.btn[ld=update-password]',
        afterCheck: function(s){
          var ref$, p1, p2, passwd, len, text, width, color, bar, cls;
          ref$ = [this.fields.newpasswd1.value, this.fields.newpasswd2.value], p1 = ref$[0], p2 = ref$[1];
          if (s.newpasswd1 !== 1 && p1.length < 6) {
            s.newpasswd1 = 2;
            s.newpasswd2 = 1;
          }
          if (p1 !== p2 && (s.newpasswd2 !== 1 || p2 && s.newpasswd1 === 0)) {
            s.newpasswd2 = 2;
          }
          passwd = ld$.find(this.root, '[data-node]', 0);
          if (s.newpasswd1 !== 1) {
            len = Math.round(p1.length);
            text = len < 8
              ? '不妙'
              : len < 10 ? '還好' : '不錯';
            width = 100 * (len < 12 ? len : 12) / 12;
            color = len < 8
              ? 'danger'
              : len < 10 ? 'warning' : 'success';
            ld$.find(passwd, 'label', 0).textContent = "長度: " + text;
            bar = ld$.find(passwd, '.progress-bar', 0);
            bar.style.width = width + "%";
            cls = bar.getAttribute('class');
            cls = cls.replace(/bg-\S+/, '').trim() + (" bg-" + color);
            return bar.setAttribute('class', cls);
          }
        }
      });
      btn = ld$.find(document, '.form[data-name=passwd] .btn[ld=update-password]', 0);
      ldld = new ldLoader({
        root: btn
      });
      return btn.addEventListener('click', function(){
        var val;
        if (btn.classList.contains('disabled')) {
          return;
        }
        ldld.on();
        val = form.values();
        return auth.recaptcha.get().then(function(recaptcha){
          var json;
          json = {
            o: val.oldpasswd,
            n: val.newpasswd1,
            recaptcha: recaptcha
          };
          return ld$.fetch('/dash/api/me/passwd/', {
            method: 'put',
            headers: {
              'Content-Type': 'application/json; charset=UTF-8'
            }
          }, {
            json: json
          });
        })['finally'](function(){
          return ldld.off();
        }).then(function(){
          notify.send('success', "密碼更新完成");
          return form.reset();
        })['catch'](function(){
          return notify.send('danger', "密碼更新失敗");
        });
      });
    });
  });
  return ldc.register(['error', 'auth', 'ldcvmgr', 'change-password', 'notify'], function(arg$){
    var error, auth, ldcvmgr, changePassword, notify, local;
    error = arg$.error, auth = arg$.auth, ldcvmgr = arg$.ldcvmgr, changePassword = arg$.changePassword, notify = arg$.notify;
    local = {};
    return auth.get({
      authed: true
    })['catch'](function(){
      return ldcvmgr.toggle("auth-required");
    }).then(function(g){
      local.g = g;
      return auth.userinfo(g.user);
    }).then(function(it){
      var form, view;
      local.user = it;
      form = new ldForm({
        root: '.form[data-name=basic]',
        submit: '.btn[ld=updateBasicData]',
        afterCheck: function(s){
          s.title = 0;
          s.tags = 0;
          if (this.fields.displayname.value) {
            return s.displayname = 0;
          }
        },
        verify: function(n, v, e){
          if (n === 'description') {
            return !(v && v.length >= 1024) ? 0 : 2;
          }
        }
      });
      new Tagify(form.fields.tags, {
        originalInputValueFormat: function(vals){
          return vals.map(function(it){
            return it.value;
          }).join(',');
        },
        delimiters: /[,.:;，。：；]/
      });
      return view = new ldView({
        root: document.body,
        action: {
          change: {
            "avatar": function(arg$){
              var node, bg, btn, fd;
              node = arg$.node;
              if (!(bg = ld$.parent(node, '.bg'))) {
                return;
              }
              if (!(btn = ld$.parent(node, '.btn'))) {
                return;
              }
              if (!node.files.length) {
                return;
              }
              btn.classList.toggle('running', true);
              fd = new FormData();
              fd.append("avatar", node.files[0]);
              return auth.recaptcha.get().then(function(recaptcha){
                fd.append("recaptcha", recaptcha);
                return ld$.fetch('/dash/api/user/avatar', {
                  method: 'POST',
                  body: fd
                }, {
                  type: 'json'
                });
              })['finally'](function(){
                return debounce(1000).then(function(){
                  return btn.classList.toggle('running', false);
                });
              }).then(function(){
                return ldFile.fromFile(node.files[0], 'dataurl');
              }).then(function(r){
                return bg.style.backgroundImage = "url(" + r.result + ")";
              })['finally'](function(){
                return node.value = '';
              })['catch'](error());
            }
          }
        },
        handler: {
          updateBasicData: function(arg$){
            var node, ldld;
            node = arg$.node;
            ldld = new ldLoader({
              root: node
            });
            return node.addEventListener('click', function(){
              var val;
              ldld.on();
              val = form.values();
              return auth.recaptcha.get().then(function(recaptcha){
                var json, ref$;
                recaptcha == null && (recaptcha = "");
                json = (ref$ = {
                  recaptcha: recaptcha
                }, ref$.description = val.description, ref$.displayname = val.displayname, ref$.title = val.title, ref$.tags = val.tags, ref$);
                return ld$.fetch("/dash/api/user/" + ((ref$ = local.g).user || (ref$.user = {})).key, {
                  method: 'PUT'
                }, {
                  json: json,
                  type: 'text'
                });
              }).then(function(){
                return auth.fetch({
                  renew: true
                });
              }).then(function(){
                return debounce(500);
              }).then(function(){
                return notify.send('success', '更新完成');
              }).then(function(){
                return debounce(500);
              })['catch'](function(it){
                ldcvmgr.toggle('error');
                return console.log(it);
              }).then(function(){
                return ldld.off();
              });
            });
          },
          mailVerify: function(arg$){
            var node, ldld;
            node = arg$.node;
            ldld = new ldLoader({
              root: node
            });
            if (local.user.verified) {
              return node.innerText = "已於 " + moment(local.user.verified.date).format("YYYY/MM/DD") + " 驗證";
            } else {
              return node.addEventListener('click', function(){
                ldld.on();
                if (node.classList.contains('disabled')) {
                  return;
                }
                return ld$.fetch('/dash/api/me/mail/verify', {
                  method: 'POST'
                })['catch'](function(){
                  return ldcvmgr.toggle('error');
                }).then(function(){
                  return debounce(1000);
                }).then(function(){
                  return ldld.off();
                }).then(function(){
                  return ldcvmgr.toggle('verification-mail-sent');
                });
              });
            }
          },
          sendResetLink: function(arg$){
            var node;
            node = arg$.node;
            return node.addEventListener('click', function(){
              if (node.classList.contains('disabled')) {
                return;
              }
              return ld$.fetch('/dash/api/me/passwd/reset', {
                method: 'POST',
                body: JSON.stringify({
                  email: local.g.user.username
                }),
                headers: {
                  'Content-Type': 'application/json; charset=UTF-8'
                }
              }, {}).then(function(){
                node.innerHTML = '連結已寄出 <i class="i-check"></i>';
                return node.classList.add('disabled');
              });
            });
          },
          copyUid: function(arg$){
            var node, c;
            node = arg$.node;
            c = new ClipboardJS(node);
            return c.on('success', function(){
              node.classList.add('tip-on');
              return debounce(2000).then(function(){
                return node.classList.remove('tip-on');
              });
            });
          }
        }
      });
    });
  });
})();