// Generated by LiveScript 1.3.0
(function(){
  ldc.register('discus', ['auth'], function(arg$){
    var auth, markedOptions, lc;
    auth = arg$.auth;
    markedOptions = {};
    lc = {
      loading: true,
      data: {
        slug: '/',
        content: {
          config: {}
        }
      }
    };
    return auth.get().then(function(g){
      var view;
      ld$.fetch('/dash/api/discus', {
        method: 'GET'
      }, {
        params: {
          slug: '/'
        },
        type: 'json'
      }).then(function(comments){
        lc.comments = comments;
        lc.loading = false;
        return view.render();
      });
      lc.g = g;
      return view = new ldView({
        root: '[ld-scope=discus]',
        action: {
          input: {
            "use-markdown": function(arg$){
              var node, ref$, ref1$;
              node = arg$.node;
              ((ref$ = (ref1$ = lc.data).content || (ref1$.content = {})).config || (ref$.config = {})).useMarkdown = lc.useMarkdown = node.checked;
              return view.render();
            },
            "toggle-preview": function(arg$){
              var node;
              node = arg$.node;
              lc.preview = !!node.checked;
              return view.render();
            },
            input: function(arg$){
              var node, ref$;
              node = arg$.node;
              ((ref$ = lc.data).content || (ref$.content = {})).body = node.value;
              lc.ready = !!(((ref$ = lc.data).content || (ref$.content = {})).body || "").trim().length;
              return view.render('post');
            }
          },
          click: {
            link: function(){},
            attach: function(){},
            post: function(arg$){
              var node, payload, ref$;
              node = arg$.node;
              if (node.classList.contains('running')) {
                return;
              }
              payload = {
                slug: (ref$ = lc.data).slug,
                reply: ref$.reply,
                content: ref$.content
              };
              lc.ldld.on();
              return ld$.fetch('/dash/api/comment', {
                method: 'POST'
              }, {
                type: 'json',
                json: payload
              })['finally'](function(){
                return lc.ldld.off();
              }).then(function(){
                return console.log('posted');
              })['catch'](function(){
                return console.log("failed");
              });
            }
          }
        },
        init: {
          post: function(arg$){
            var node;
            node = arg$.node;
            return lc.ldld = new ldLoader({
              root: node
            });
          }
        },
        handler: {
          loading: function(arg$){
            var node, ref$;
            node = arg$.node;
            return node.classList.toggle('d-none', !(!lc.loading !== !(ref$ = in$('off', node.getAttribute('ld').split(' '))) && (lc.loading || ref$)));
          },
          avatar: function(arg$){
            var node;
            node = arg$.node;
            return node.style.backgroundImage = "url(/s/avatar/" + g.user.key + ".png)";
          },
          preview: function(arg$){
            var node, revert, state, ref$;
            node = arg$.node;
            revert = in$("off", node.getAttribute('ld').split(" "));
            state = !(ref$ = !(lc.preview && lc.useMarkdown)) !== !revert && (ref$ || revert);
            return node.classList.toggle('d-none', state);
          },
          panel: function(arg$){
            var node;
            node = arg$.node;
            if (lc.preview) {
              return node.innerHTML = marked(lc.data.content.body || '', markedOptions);
            }
          },
          post: function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('disabled', !lc.ready);
          },
          "edit-panel": function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', !!lc.preview);
          },
          "if-markdown": function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', !lc.useMarkdown);
          },
          comment: {
            list: function(){
              return lc.comments;
            },
            init: function(arg$){
              var node, data, idx, view;
              node = arg$.node, data = arg$.data, idx = arg$.idx;
              node.classList.add('ld', 'ld-float-ltr-in', 'xp35');
              node.style.animationDelay = idx * 0.1 + "s";
              return view = new ldView({
                root: node,
                handler: {
                  avatar: function(arg$){
                    var node;
                    node = arg$.node;
                    return node.style.backgroundImage = "url(/s/avatar/" + data.owner + ".png)";
                  },
                  author: function(arg$){
                    var node;
                    node = arg$.node;
                    return node.innerText = data.displayname;
                  },
                  role: function(arg$){
                    var node;
                    node = arg$.node;
                    node.classList.toggle('d-none', !data.role);
                    return ld$.find(node, 'span', 0).innerText = data.role;
                  },
                  date: function(arg$){
                    var node;
                    node = arg$.node;
                    return node.innerText = moment(data.createdtime).tz("Asia/Taipei").format("YYYY/MM/DD hh:mm:ss");
                  },
                  content: function(arg$){
                    var node, ref$;
                    node = arg$.node;
                    if (((ref$ = data.content).config || (ref$.config = {})).useMarkdown) {
                      return node.innerHTML = marked(data.content.body);
                    } else {
                      return node.innerText = data.content.body;
                    }
                  }
                }
              });
            }
          }
        }
      });
    });
  });
  return ldc.app('discus');
})();
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}