// Generated by LiveScript 1.3.0
ldc.register('judgeFinalAll', ['error', 'loader', 'auth', 'ldcvmgr', 'sdbAdapter'], function(arg$){
  var error, loader, auth, ldcvmgr, sdbAdapter, Ctrl, initHot;
  error = arg$.error, loader = arg$.loader, auth = arg$.auth, ldcvmgr = arg$.ldcvmgr, sdbAdapter = arg$.sdbAdapter;
  Ctrl = function(opt){
    var root, this$ = this;
    this.loader = loader;
    this.brd = opt.brd;
    this.grp = opt.grp;
    this.user = opt.user;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.prjs = [];
    this.data = {};
    this._update = debounce(function(){
      return this$.opsOut(function(){
        return this$.data;
      });
    });
    return this;
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    render: function(){},
    update: function(opt){
      opt == null && (opt = {});
      if (!opt.debounced) {
        return this._update().now();
      } else {
        return this._update();
      }
    },
    initSheet: function(){
      var this$ = this;
      console.log("init sheet ... ");
      return this.sheet = initHot({
        afterChange: function(changes){
          changes == null && (changes = []);
          changes.map(function(arg$){
            var row, prop, old, cur, ref$, key$;
            row = arg$[0], prop = arg$[1], old = arg$[2], cur = arg$[3];
            return ((ref$ = this$.data.value)[key$ = row - 1] || (ref$[key$] = {}))[prop - 3] = cur;
          });
          return this$.update();
        }
      });
    },
    fetch: function(){
      var this$ = this;
      console.log("get project list ... ");
      return ld$.fetch('/dash/api/brd/test-brd/list', {
        method: 'GET'
      }, {
        type: 'json'
      }).then(function(it){
        var data;
        this$.prjs = it;
        data = this$.prjs.map(function(d, i){
          return ['', i, '', d.name, 0, 1, 0, 1, 1, '', ''];
        });
        data = [["", "", "", "評審", "評審A", "", "評審B", "", "平均", "孔多塞", "決選", "優勝"]].concat([['標註', '編號', '評論', '名稱', '分數', '排名', '分數', '排名', '排名', '排名', '註記', '註記']], data);
        this$.sheet.loadData(data);
        this$.sheet.render();
        return this$.render();
      });
    },
    sharedb: function(){
      var sdb, this$ = this;
      console.log("prepare sharedb ...");
      this.sdb = sdb = new sharedbWrapper({
        url: {
          scheme: window.location.protocol.replace(':', ''),
          domain: window.location.host
        },
        path: '/dash/ws'
      });
      this.hub = new Hub({
        sdb: sdb
      });
      sdb.on('error', function(){
        return ldcvmgr.toggle('not-sync');
      });
      sdb.on('close', function(){
        ldcvmgr.toggle('offline-retry', true);
        return sdb.reconnect().then(function(){
          return this$.getdoc();
        }).then(function(){
          return this$.adapt({
            hub: this$.hub,
            path: []
          });
        }).then(function(){
          return console.log("admin initialized.");
        }).then(function(){
          return ldcvmgr.toggle('offline-retry', false);
        });
      });
      return sdb.ready();
    },
    getdoc: function(){
      var this$ = this;
      console.log("get judge document ... ");
      this.hub.doc = null;
      return this.sdb.get({
        id: "brd/" + this.brd + "/grp/" + this.grp + "/judge/final",
        watch: function(ops, source){
          return this$.hub.fire('change', {
            ops: ops,
            source: source
          });
        },
        create: function(){
          return {};
        }
      }).then(function(doc){
        this$.hub.doc = doc;
        doc.on('op', function(){
          return this$.render();
        });
        return this$.adapt({
          hub: this$.hub,
          path: []
        });
      })['catch'](function(it){
        return console.log("getdoc failed.", it);
      });
    },
    opsIn: function(arg$){
      var data, ops, source;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.data = JSON.parse(JSON.stringify(data));
      return this.render();
    }
  });
  auth.get().then(function(g){
    var ctrl;
    ctrl = new Ctrl({
      root: document.body,
      brd: 'test-brd',
      grp: '4jUmMh07zZ05kl0Col03v-Bhu'
    });
    return Promise.resolve().then(function(){
      return ctrl.initSheet();
    }).then(function(){
      return ctrl.fetch();
    }).then(function(){
      return ctrl.sharedb();
    }).then(function(){
      return ctrl.getdoc();
    }).then(function(){
      return console.log("initied.");
    });
  });
  return initHot = function(opt){
    var dom, hot;
    dom = example;
    Handsontable.renderers.registerRenderer('myrenderer', function(instance, td, row, col, prop, value, cellProperties){
      return Handsontable.renderers.TextRenderer.apply(this, arguments);
    });
    hot = new Handsontable(dom, import$({
      rowHeaders: true,
      colHeaders: true,
      filters: true,
      dropdownMenu: true,
      rowHeights: 25,
      colWidths: [30, 50, 30, 150, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40],
      minRows: 50,
      minCols: 15,
      stretchH: 'all',
      fixedRowsTop: 2,
      fixedColumnsLeft: 4,
      cells: function(row, col){
        return {
          renderer: 'myrenderer'
        };
      }
    }, opt));
    return hot;
  };
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}