// Generated by LiveScript 1.3.0
ldc.register('judgeCriteriaAll', ['notify', 'judgeBase', 'error', 'loader', 'auth', 'ldcvmgr', 'sdbAdapter'], function(arg$){
  var notify, judgeBase, error, loader, auth, ldcvmgr, sdbAdapter, Ctrl, ctrl;
  notify = arg$.notify, judgeBase = arg$.judgeBase, error = arg$.error, loader = arg$.loader, auth = arg$.auth, ldcvmgr = arg$.ldcvmgr, sdbAdapter = arg$.sdbAdapter;
  Ctrl = function(opt){
    var obj, view, this$ = this;
    import$(this, obj = new judgeBase(opt));
    this.data = {
      prj: {}
    };
    this.active = null;
    this.ldcv = {
      comment: new ldCover({
        root: ld$.find(this.root, '[ld=comment-ldcv]', 0)
      }),
      detail: new ldCover({
        root: ld$.find(this.root, '[ld=detail-ldcv]', 0)
      }),
      criteria: new ldCover({
        root: ld$.find(this.root, '[ld=criteria-ldcv]', 0)
      })
    };
    this.view = view = new ldView({
      initRender: false,
      root: this.root,
      action: {
        click: {
          detail: function(arg$){
            var node;
            node = arg$.node;
            return this$.ldcv.detail.toggle();
          },
          criteria: function(arg$){
            var node;
            node = arg$.node;
            return this$.ldcv.criteria.toggle();
          },
          sort: function(arg$){
            var node;
            node = arg$.node;
            return this$.sort(node.getAttribute('data-name'), node.getAttribute('data-value'));
          }
        }
      },
      text: {
        count: function(arg$){
          var node;
          node = arg$.node;
          return this$.progress[node.getAttribute('data-name')] || 0;
        },
        reviewer: function(arg$){
          var node;
          node = arg$.node;
          if (this$.user) {
            return this$.user.displayname;
          }
        }
      },
      handler: {
        "comment-name": function(arg$){
          var node;
          node = arg$.node;
          if (this$.active) {
            return node.innerText = this$.active.name || '';
          }
        },
        progress: function(arg$){
          var node, names, p, n;
          node = arg$.node, names = arg$.names;
          p = this$.progress;
          if (in$('progress-bar', names)) {
            n = node.getAttribute('data-name');
            return node.style.width = 100 * p[n] / p.total + "%";
          } else if (in$('progress-percent', names)) {
            return node.innerText = Math.round(100 * p.done / p.total);
          }
        },
        project: {
          key: function(it){
            return it.slug;
          },
          list: function(){
            return this$.prjs;
          },
          init: function(arg$){
            var node, local, data, root;
            node = arg$.node, local = arg$.local, data = arg$.data;
            root = node;
            node.classList.remove('d-none');
            return local.view = new ldView({
              initRender: false,
              root: node,
              context: data,
              action: {
                click: {
                  detail: function(arg$){
                    var node, context;
                    node = arg$.node, context = arg$.context;
                    return this$.ldcv.detail.toggle();
                  },
                  comment: function(arg$){
                    var node, context, ref$, key$;
                    node = arg$.node, context = arg$.context;
                    this$.active = context;
                    view.get('comment').value = ((ref$ = this$.data.prj)[key$ = this$.active.slug] || (ref$[key$] = {})).comment || '';
                    this$.ldcv.comment.toggle();
                    return this$.view.render('comment-name');
                  },
                  name: function(arg$){
                    var node, context;
                    node = arg$.node, context = arg$.context;
                    view.get("iframe").setAttribute('src', "/prj/" + context.slug + "?simple");
                    view.get("iframe-placeholder").classList.add('d-none');
                    if (this.activeNode) {
                      this.activeNode.classList.remove('active');
                    }
                    this.activeNode = root;
                    return this.activeNode.classList.add('active');
                  }
                }
              },
              text: {
                count: function(arg$){
                  var node, context, n;
                  node = arg$.node, context = arg$.context;
                  n = node.getAttribute('data-name');
                  return context.count[n].length || '0';
                }
              },
              handler: {
                "has-comment": function(arg$){
                  var node, context, ref$, key$;
                  node = arg$.node, context = arg$.context;
                  return node.classList.toggle('invisible', !((ref$ = this$.data.prj)[key$ = context.slug] || (ref$[key$] = {})).comment);
                },
                state: function(arg$){
                  var node, context, span, icon, state, cls;
                  node = arg$.node, context = arg$.context;
                  span = ld$.find(node, 'span', 0);
                  icon = ld$.find(node, 'i', 0);
                  state = context.state;
                  icon.classList.remove.apply(icon.classList, icon.classList);
                  icon.classList.add(['i-check', 'i-circle', 'i-close'][state]);
                  node.classList.remove.apply(node.classList, node.classList);
                  cls = [['bg-success', 'text-white'], ['bg-light', 'text-secondary'], ['bg-danger', 'text-white']];
                  node.classList.add.apply(node.classList, cls[state].concat(['rounded']));
                  return span.innerText = ['通過', '待查', '不符'][state];
                },
                name: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return node.innerText = context.name;
                },
                key: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return node.innerText = context.key || '';
                }
              }
            });
          },
          handler: function(arg$){
            var node, local, data;
            node = arg$.node, local = arg$.local, data = arg$.data;
            local.view.setContext(data);
            this$.getCount(data);
            return local.view.render();
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(import$({}, judgeBase.prototype), {
    opsIn: function(arg$){
      var data, ops, source, ref$;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.data = JSON.parse(JSON.stringify(data));
      (ref$ = this.data).prj || (ref$.prj = {});
      return this.render();
    },
    render: function(){
      this.getProgress();
      return this.view.render();
    },
    fetchCriteria: function(){
      console.log("fetch criteria ... ");
      return this.criteria = [
        {
          name: "開源",
          key: 1
        }, {
          name: "協作",
          key: 2
        }, {
          name: "參與",
          key: 3
        }
      ];
    },
    init: function(){
      var this$ = this;
      return Promise.resolve().then(function(){
        return ctrl.auth();
      }).then(function(){
        return ctrl.fetchCriteria();
      }).then(function(){
        return ctrl.fetchPrjs();
      }).then(function(){
        return ctrl.sharedb();
      }).then(function(){
        return ctrl.getdoc();
      }).then(function(){
        return this$.sort('name', null, false);
      }).then(function(){
        return console.log("initied.");
      })['catch'](error);
    },
    sort: function(name, value, hint){
      var n, dir, verbose, this$ = this;
      hint == null && (hint = true);
      if (hint) {
        loader.on();
      }
      n = name + "" + (value != null ? '-' + value : '');
      if (!this.sort.inversed) {
        this.sort.inversed = {};
      }
      dir = this.sort.inversed[n]
        ? 1
        : -1;
      verbose = {
        name: {
          name: "名稱",
          state: "狀態",
          comment: "評論長度"
        }[name] || value,
        dir: dir > 0 ? "順向" : "逆向"
      };
      if (name === 'count') {
        verbose.name = {
          accept: "通過",
          pending: "待審",
          reject: "不符"
        }[value] + "的數量";
      }
      if (hint) {
        notify.send('success', "重新將表格依 " + verbose.name + " 做 " + verbose.dir + " 排序");
      }
      return debounce(100).then(function(){
        var statemap;
        this$.sort.inversed[n] = !this$.sort.inversed[n];
        statemap = [2, 0, 1];
        if (name === 'state') {
          this$.prjs.sort(function(a, b){
            return dir * (statemap[a.state] - statemap[b.state]);
          });
        } else if (name === 'name') {
          this$.prjs.sort(function(a, b){
            return dir * (a.name > b.name
              ? 1
              : a.name < b.name ? -1 : 0);
          });
        } else if (name === 'comment') {
          this$.prjs.sort(function(a, b){
            var ref$, key$;
            return dir * ((((ref$ = this$.data.prj)[key$ = a.slug] || (ref$[key$] = {})).comment || '').length - (((ref$ = this$.data.prj)[key$ = b.slug] || (ref$[key$] = {})).comment || '').length);
          });
        } else if (name === 'criteria') {
          this$.prjs.sort(function(a, b){
            var ref$, ref1$, key$;
            a = ((ref$ = (ref1$ = this$.data.prj)[key$ = a.slug] || (ref1$[key$] = {})).value || (ref$.value = {}))[value];
            b = ((ref$ = (ref1$ = this$.data.prj)[key$ = b.slug] || (ref1$[key$] = {})).value || (ref$.value = {}))[value];
            a = a != null ? a : 1;
            b = b != null ? b : 1;
            return dir * (statemap[a] - statemap[b]);
          });
        } else if (name === 'count') {
          this$.prjs.sort(function(a, b){
            var ref$;
            return dir * (((ref$ = a.count)[value] || (ref$[value] = [])).length - ((ref$ = b.count)[value] || (ref$[value] = [])).length);
          });
        }
        if (hint) {
          loader.off();
        }
        return this$.render();
      });
    },
    getCount: function(context){
      var count, k, ref$, ref1$, user, val, results$ = [], this$ = this;
      context.count = count = {
        accept: [],
        pending: [],
        reject: []
      };
      for (k in ref$ = (ref1$ = this.data).user || (ref1$.user = {})) {
        user = ref$[k];
        val = this.criteria.reduce(fn$, 0);
        count[['accept', 'pending', 'reject'][val]].push(user);
        results$.push(context.state = count.reject.length
          ? 2
          : count.pending.length ? 1 : 0);
      }
      return results$;
      function fn$(a, b){
        var v, ref$, ref1$, key$;
        v = ((ref$ = (ref1$ = user.prj)[key$ = context.slug] || (ref1$[key$] = {})).value || (ref$.value = {}))[b.name];
        return Math.max(a, v != null ? v : 1);
      }
    },
    getProgress: function(){
      var val, this$ = this;
      val = {
        0: 0,
        1: 0,
        2: 0
      };
      this.prjs.map(function(p){
        if (!(p.state != null)) {
          this$.getCount(p);
        }
        return val[p.state]++;
      });
      return this.progress = {
        accept: val[0],
        pending: val[1],
        reject: val[2],
        done: val[0] + val[2],
        total: this.prjs.length || 1
      };
    }
  });
  ctrl = new Ctrl({
    root: document.body
  });
  return ctrl.init();
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}