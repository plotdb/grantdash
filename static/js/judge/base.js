// Generated by LiveScript 1.3.0
ldc.register('judgeBase', ['error', 'loader', 'auth', 'ldcvmgr', 'sdbAdapter'], function(arg$){
  var error, loader, auth, ldcvmgr, sdbAdapter, Ctrl;
  error = arg$.error, loader = arg$.loader, auth = arg$.auth, ldcvmgr = arg$.ldcvmgr, sdbAdapter = arg$.sdbAdapter;
  Ctrl = function(opt){
    var ret, ref$, brd, grp, type, lv, root;
    this.loader = loader;
    this.brd = opt.brd;
    this.grp = opt.grp;
    this.user = opt.user;
    ret = /brd\/([^/]+)\/grp\/([^/]+)\/judge\/([^/]+)\/([^/]+)$/.exec(window.location.href);
    if (!ret) {
      throw new ldError(1015);
    }
    ref$ = ret.slice(1), brd = ref$[0], grp = ref$[1], type = ref$[2], lv = ref$[3];
    if (!((type === 'criteria' || type === 'primary' || type === 'final') && (lv === 'user' || lv === 'all'))) {
      throw new ldError(1015);
    }
    this.brd = brd;
    this.grp = grp;
    this.type = type;
    this.lv = lv;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.prjs = [];
    this.data = {};
    return this;
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    init: function(){},
    render: function(){},
    _update: function(){
      var this$ = this;
      return this.opsOut(function(){
        return this$.data;
      });
    },
    update: function(opt){
      var this$ = this;
      opt == null && (opt = {});
      if (!opt.debounced) {
        return this._update();
      } else {
        return debounce(opt.debounced).then(function(){
          return this$._update();
        });
      }
    },
    fetchPrjs: function(){
      var this$ = this;
      console.log("fetch prjs ... ");
      return ld$.fetch("/dash/api/brd/" + this.brd + "/grp/" + this.grp + "/judge-list", {
        method: 'GET'
      }, {
        type: 'json'
      }).then(function(it){
        return this$.prjs = it;
      });
    },
    sharedb: function(){
      var sdb, this$ = this;
      console.log("prepare sharedb ...");
      this.sdb = sdb = new sharedbWrapper({
        url: {
          scheme: window.location.protocol.replace(':', ''),
          domain: window.location.host
        },
        path: '/dash/ws'
      });
      this.hub = new Hub({
        sdb: sdb
      });
      sdb.on('error', function(){
        return ldcvmgr.toggle('not-sync');
      });
      sdb.on('close', function(){
        ldcvmgr.toggle('offline-retry', true);
        return sdb.reconnect().then(function(){
          return this$.getdoc();
        }).then(function(){
          return this$.adapt({
            hub: this$.hub,
            path: []
          });
        }).then(function(){
          return console.log("reinitialized.");
        }).then(function(){
          return ldcvmgr.toggle('offline-retry', false);
        });
      });
      return sdb.ready();
    },
    getdoc: function(){
      var this$ = this;
      console.log("get judge document ... ");
      this.hub.doc = null;
      return this.sdb.get({
        id: "brd/" + this.brd + "/grp/" + this.grp + "/judge/" + this.type,
        watch: function(ops, source){
          return this$.hub.fire('change', {
            ops: ops,
            source: source
          });
        },
        create: function(){
          return {};
        }
      }).then(function(doc){
        this$.hub.doc = doc;
        return this$.adapt({
          hub: this$.hub,
          path: this$.user
            ? ['user', this$.user]
            : []
        });
      });
    },
    opsIn: function(){},
    auth: function(){
      var this$ = this;
      console.log("get user auth info ...");
      return auth.get().then(function(g){
        return this$.global = g;
      });
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}