// Generated by LiveScript 1.3.0
ldc.register('judgeCriteriaUser', ['error', 'loader', 'auth', 'ldcvmgr', 'sdbAdapter'], function(arg$){
  var error, loader, auth, ldcvmgr, sdbAdapter, clsmap, clsset, Ctrl, ctrl;
  error = arg$.error, loader = arg$.loader, auth = arg$.auth, ldcvmgr = arg$.ldcvmgr, sdbAdapter = arg$.sdbAdapter;
  clsmap = [['i-check', 'text-success'], ['i-circle', 'text-warning'], ['i-close', 'text-danger']];
  clsset = function(node, val){
    var newcls, oldcls;
    newcls = clsmap[val];
    oldcls = Array.from(node.classList);
    if (oldcls.length) {
      node.classList.remove.apply(node.classList, oldcls);
    }
    return node.classList.add.apply(node.classList, newcls);
  };
  Ctrl = function(opt){
    this.loader = loader;
    /*
    view = new ldView do
      root: document.body
      action: input: do
        comment: ->
      handler: do
        comment: 
        project: do
          list: ~> @list
          init: ({node, local, data}) ->
            data.qualify = <[開源 協作 重用]>.map -> {name: it, value: 1}
            local.view = new ldView do
              root: node
              context: data
              action: click: do
                comment: ({node}) -> ldcv-comment.toggle!
              handler: do
                state: ({node, context}) ->
                  val = context.qualify.reduce(((a, b) -> Math.max(a, b.value)), 0)
                  clsset node, val
                name: ({node, context}) ->
                  node.innerText = context.name
                key: ({node, context}) -> node.innerText = context.key
                qualify: do
                  list: -> data.qualify
                  init: ({node, local}) -> local.icon = ld$.find(node, 'i', 0)
                  action: click: ({node, data}) ->
                    data.value = ( data.value + 2 ) % 3
                    local.view.render!
                  handler: ({local, data}) -> clsset local.icon, data.value
          handler: ({local, data}) ->
            local.view.setContext data
            local.view.render!
    */
    return this;
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    render: function(){
      return this.view.render();
    },
    sharedb: function(){
      var sdb, this$ = this;
      console.log("prepare sharedb ...");
      this.sdb = sdb = new sharedbWrapper({
        url: {
          scheme: window.location.protocol.replace(':', ''),
          domain: window.location.host
        },
        path: '/dash/ws'
      });
      this.hub = new Hub({
        sdb: sdb
      });
      sdb.on('error', function(){
        return ldcvmgr.toggle('not-sync');
      });
      return sdb.on('close', function(){
        this$.loader.on();
        return sdb.reconnect().then(function(){
          return this$.getdoc();
        }).then(function(){
          return this$.adapt();
        }).then(function(){
          return console.log("admin initialized.");
        }).then(function(){
          return this$.loader.off();
        });
      });
    },
    getdoc: function(){
      var this$ = this;
      this.hub.doc = null;
      return this.sdb.get({
        id: "brd/" + brd + "/grp/" + grp + "/judge/criteria",
        watch: function(ops, source){
          return this$.hub.fire('change', {
            ops: ops,
            source: source
          });
        },
        create: function(){
          return {};
        }
      }).then(function(doc){
        return doc.on('op', function(){
          return this$.render();
        });
      })['catch'](function(){
        return console.log("getdoc " + n + " failed.");
      });
    },
    opsIn: function(arg$){
      var data, ops, source;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
    }
  });
  ctrl = new Ctrl({});
  return ld$.fetch('/dash/api/brd/sch001/list', {
    method: 'GET'
  }, {
    type: 'json'
  }).then(function(it){
    var list;
    return list = it;
  });
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}