// Generated by LiveScript 1.3.0
ldc.register('judgeFinalAll', ['notify', 'judgeBase', 'error', 'loader', 'auth', 'ldcvmgr', 'sdbAdapter'], function(arg$){
  var notify, judgeBase, error, loader, auth, ldcvmgr, sdbAdapter, typemap, clsmap, clsset, Ctrl, ctrl, initHot;
  notify = arg$.notify, judgeBase = arg$.judgeBase, error = arg$.error, loader = arg$.loader, auth = arg$.auth, ldcvmgr = arg$.ldcvmgr, sdbAdapter = arg$.sdbAdapter;
  typemap = {
    0: "accept",
    1: "pending",
    2: "reject"
  };
  clsmap = [['i-check', 'text-success'], ['i-circle', 'text-secondary'], ['i-close', 'text-danger']];
  clsset = function(node, val){
    var newcls, oldcls;
    newcls = clsmap[val];
    oldcls = Array.from(node.classList);
    if (oldcls.length) {
      node.classList.remove.apply(node.classList, oldcls);
    }
    return node.classList.add.apply(node.classList, newcls);
  };
  Ctrl = function(opt){
    var obj, view;
    import$(this, obj = new judgeBase(opt));
    this.data = {
      prj: {}
    };
    this.active = null;
    this.view.local = view = new ldView({
      initRender: false,
      root: this.root
    });
    return this;
  };
  Ctrl.prototype = import$(import$({}, judgeBase.prototype), {
    opsIn: function(arg$){
      var data, ops, source, ref$, ret, this$ = this;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.data = JSON.parse(JSON.stringify(data));
      (ref$ = this.data).prj || (ref$.prj = {});
      ret = this.prjs.map(function(p, i){
        var ret;
        ret = [i];
        this$.judges.map(function(judge){
          var v, ref$, key$, sum;
          v = (ref$ = this$.data.user)[key$ = judge.key] || (ref$[key$] = {});
          sum = this$.grade.map(function(g, i){
            var ref$, ref1$, key$;
            return ((ref$ = (ref1$ = v.prj || (v.prj = {}))[key$ = p.key] || (ref1$[key$] = {})).v || (ref$.v = {}))[g.key] || 0;
          }).reduce(function(a, b){
            return a + +b;
          }, 0);
          ret.push(sum);
          return ret.push(0);
        });
        return ret;
      });
      this.judges.map(function(judge, i){
        var idx, last, i$, to$, results$ = [];
        idx = 2 * i + 1;
        ret.sort(function(a, b){
          return b[idx] - a[idx];
        });
        last = {
          idx: 0,
          value: null
        };
        for (i$ = 0, to$ = ret.length; i$ < to$; ++i$) {
          i = i$;
          if (last.value !== ret[i][idx]) {
            last.idx = i;
            last.value = ret[i][idx];
          }
          results$.push(ret[i][idx + 1] = last.idx + 1);
        }
        return results$;
      });
      ret.sort(function(a, b){
        return a[0] - b[0];
      });
      ret = ret.map(function(it){
        return it.splice(1);
      });
      if (!ret.length) {
        ret = [[]];
      }
      this.sheet.populateFromArray(2, 3, ret);
      return this.render();
    },
    render: function(){
      this.getProgress();
      this.view.base.render();
      return this.view.local.render();
    },
    reconnect: function(){
      var this$ = this;
      return this.getdoc().then(function(){
        return this$.sort('name', null, false);
      }).then(function(){
        return console.log("initied.");
      });
    },
    initSheet: function(){
      var data, this$ = this;
      console.log("init sheet ... ");
      this.sheet = initHot({
        root: edit,
        afterChange: function(changes){
          changes == null && (changes = []);
        }
      });
      this.judges = [
        {
          name: "評審A",
          key: 1
        }, {
          name: "評審B",
          key: 2
        }, {
          name: "評審C",
          key: 3
        }
      ];
      this.prjs.sort(function(a, b){
        return a.key - b.key;
      });
      data = [
        ['', '', '評審'].concat(this.judges.map(function(it){
          return [it.name, ''];
        }).reduce(function(a, b){
          return a.concat(b);
        }, []), ['平均', '優勝']), ['編號', '評論', '提案'].concat(this.judges.map(function(){
          return ["分數", "排名"];
        }).reduce(function(a, b){
          return a.concat(b);
        }, []), ['排名', '註記'])
      ].concat(this.prjs.map(function(d, i){
        return [d.key, '', d.name].concat(this$.grade.map(function(){
          return 0;
        }), [0, 1, '']);
      }));
      this.sheet.loadData(data);
      this.sheet.render();
      return this.render();
    },
    init: function(){
      var this$ = this;
      return Promise.resolve().then(function(){
        return this$.auth();
      }).then(function(){
        return this$.initView();
      }).then(function(){
        return this$.fetchInfo();
      }).then(function(){
        if (!this$.grpinfo.grade) {
          return ldcvmgr.get('judge-grade-missing');
        } else {
          return this$.grade = this$.grpinfo.grade.entries;
        }
      }).then(function(){
        return this$.fetchPrjs();
      }).then(function(){
        return this$.initSheet();
      }).then(function(){
        return this$.sharedb();
      }).then(function(){
        return this$.getdoc();
      }).then(function(){
        return console.log("initied.");
      })['catch'](error());
    },
    getProgress: function(){}
  });
  ctrl = new Ctrl({
    root: document.body
  });
  ctrl.init();
  return initHot = function(opt){
    var hot;
    Handsontable.renderers.registerRenderer('myrenderer', function(instance, td, row, col, prop, value, cellProperties){
      return Handsontable.renderers.TextRenderer.apply(this, arguments);
    });
    hot = new Handsontable(opt.root, import$({
      rowHeaders: true,
      colHeaders: true,
      filters: true,
      dropdownMenu: true,
      rowHeights: 25,
      colWidths: [40, 50, 220],
      minRows: 50,
      minCols: 15,
      stretchH: 'all',
      fixedRowsTop: 2,
      fixedColumnsLeft: 3,
      cells: function(row, col){
        return {
          renderer: 'myrenderer'
        };
      }
    }, opt));
    return hot;
  };
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}