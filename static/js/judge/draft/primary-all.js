// Generated by LiveScript 1.3.0
ldc.register('judgePreliminaryAll', ['error', 'loader', 'auth', 'ldcvmgr', 'sdbAdapter'], function(arg$){
  var error, loader, auth, ldcvmgr, sdbAdapter, Ctrl;
  error = arg$.error, loader = arg$.loader, auth = arg$.auth, ldcvmgr = arg$.ldcvmgr, sdbAdapter = arg$.sdbAdapter;
  Ctrl = function(opt){
    var root, view, this$ = this;
    this.opt = opt;
    this.brd = opt.brd;
    this.grp = opt.grp;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.data = {};
    this._update = debounce(function(){
      return this$.opsOut(function(){
        return this$.data;
      });
    });
    this.view = view = new ldView({
      root: root,
      handler: {
        prj: {
          list: function(){
            return this$.prjs;
          },
          init: function(arg$){
            var node, data, local;
            node = arg$.node, data = arg$.data, local = arg$.local;
            return local.view = new ldView({
              context: data,
              root: node,
              text: {
                name: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return context.name;
                },
                ownername: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return context.ownername;
                }
              },
              action: {
                click: {
                  pick: function(arg$){
                    var node, context, obj, ref$, key$, ref1$;
                    node = arg$.node, context = arg$.context;
                    obj = (ref$ = (ref1$ = this$.data).prj || (ref1$.prj = {}))[key$ = context.slug] || (ref$[key$] = {});
                    obj.picked = !obj.picked;
                    local.view.render();
                    return this$.update();
                  }
                }
              },
              handler: {
                pick: function(arg$){
                  var node, context, cls, obj, ref$, key$, ref1$, cl;
                  node = arg$.node, context = arg$.context;
                  cls = [['i-check', 'text-white', 'bg-success'], ['i-circle', 'text-secondary', 'bg-light']];
                  obj = (ref$ = (ref1$ = this$.data).prj || (ref1$.prj = {}))[key$ = context.slug] || (ref$[key$] = {});
                  cl = node.classList;
                  cl.add.apply(cl, obj.picked
                    ? cls[0]
                    : cls[1]);
                  return cl.remove.apply(cl, obj.picked
                    ? cls[1]
                    : cls[0]);
                },
                progress: function(arg$){
                  var node, context, n;
                  node = arg$.node, context = arg$.context;
                  n = node.getAttribute('data-name');
                  return node.style.width = 100 * (context.count || (context.count = {}))[n] / ((context.count || (context.count = {})).total || 1) + "%";
                },
                count: function(arg$){
                  var node, context, n;
                  node = arg$.node, context = arg$.context;
                  n = node.getAttribute('data-name');
                  return node.innerText = (context.count || (context.count = {}))[n] || 0;
                }
              }
            });
          },
          handler: function(arg$){
            var node, data, local;
            node = arg$.node, data = arg$.data, local = arg$.local;
            local.view.setContext(data);
            return local.view.render();
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    render: function(){
      return this.view.render();
    },
    update: function(opt){
      opt == null && (opt = {});
      if (!opt.debounced) {
        return this._update().now();
      } else {
        return this._update();
      }
    },
    fetch: function(){
      var this$ = this;
      console.log("get project list ... ");
      return ld$.fetch('/dash/api/brd/test-brd/list', {
        method: 'GET'
      }, {
        type: 'json'
      }).then(function(it){
        this$.prjs = it;
        return this$.render();
      });
    },
    sharedb: function(){
      var sdb, this$ = this;
      console.log("prepare sharedb ...");
      this.sdb = sdb = new sharedbWrapper({
        url: {
          scheme: window.location.protocol.replace(':', ''),
          domain: window.location.host
        },
        path: '/dash/ws'
      });
      this.hub = new Hub({
        sdb: sdb
      });
      sdb.on('error', function(){
        return ldcvmgr.toggle('not-sync');
      });
      sdb.on('close', function(){
        ldcvmgr.toggle('offline-retry', true);
        return sdb.reconnect().then(function(){
          return this$.getdoc();
        }).then(function(){
          return this$.adapt({
            hub: this$.hub,
            path: []
          });
        }).then(function(){
          return console.log("admin initialized.");
        }).then(function(){
          return ldcvmgr.toggle('offline-retry', false);
        });
      });
      return sdb.ready();
    },
    getdoc: function(){
      var this$ = this;
      console.log("get judge document ... ");
      this.hub.doc = null;
      return this.sdb.get({
        id: "brd/" + this.brd + "/grp/" + this.grp + "/judge/preliminary",
        watch: function(ops, source){
          return this$.hub.fire('change', {
            ops: ops,
            source: source
          });
        },
        create: function(){
          return {};
        }
      }).then(function(doc){
        this$.hub.doc = doc;
        doc.on('op', function(){
          return this$.render();
        });
        return this$.adapt({
          hub: this$.hub,
          path: []
        });
      })['catch'](function(it){
        return console.log("getdoc failed.", it);
      });
    },
    opsIn: function(arg$){
      var data, ops, source, count, this$ = this;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.data = JSON.parse(JSON.stringify(data));
      console.log(this.data);
      count = {
        accept: 0,
        pending: 0,
        reject: 0
      };
      this.prjs.map(function(prj){
        var k, ref$, v;
        prj.count = {
          accept: 0,
          pending: 0,
          reject: 0,
          total: 0
        };
        for (k in ref$ = this$.data.user) {
          v = ref$[k];
          prj.count[v[prj.slug].value]++;
        }
        return prj.count.total = prj.count.accept + prj.count.pending + prj.count.reject;
      });
      return this.render();
    }
  });
  return auth.get().then(function(g){
    var ctrl;
    ctrl = new Ctrl({
      root: document.body,
      brd: 'test-brd',
      grp: '4jUmMh07zZ05kl0Col03v-Bhu'
    });
    return Promise.resolve().then(function(){
      return ctrl.fetch();
    }).then(function(){
      return ctrl.sharedb();
    }).then(function(){
      return ctrl.getdoc();
    }).then(function(){
      return console.log("initied.");
    });
  });
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}