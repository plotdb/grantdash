// Generated by LiveScript 1.3.0
ldc.register('judgeFinalUser', ['notify', 'judgeBase', 'error', 'loader', 'auth', 'ldcvmgr', 'sdbAdapter'], function(arg$){
  var notify, judgeBase, error, loader, auth, ldcvmgr, sdbAdapter, Ctrl, ctrl, initHot;
  notify = arg$.notify, judgeBase = arg$.judgeBase, error = arg$.error, loader = arg$.loader, auth = arg$.auth, ldcvmgr = arg$.ldcvmgr, sdbAdapter = arg$.sdbAdapter;
  Ctrl = function(opt){
    var obj, view, this$ = this;
    import$(this, obj = new judgeBase(opt));
    this.data = {
      prj: {}
    };
    this.active = null;
    this.sortDir = {};
    this.view.local = view = new ldView({
      initRender: false,
      root: this.root,
      handler: {
        progress: function(arg$){
          var node, names, p, n;
          node = arg$.node, names = arg$.names;
          p = this$.progress;
          if (in$('progress-bar', names)) {
            n = node.getAttribute('data-name');
            return node.style.width = 100 * p[n] / p.total + "%";
          } else if (in$('progress-percent', names)) {
            return node.innerText = Math.round(100 * p.done / p.total);
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(import$({}, judgeBase.prototype), {
    opsIn: function(arg$){
      var data, ops, source, ref$, ret, this$ = this;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.data = JSON.parse(JSON.stringify(data));
      (ref$ = this.data).prj || (ref$.prj = {});
      ops = [];
      ret = this.prjs.map(function(p, i){
        var value;
        if (!this$.data.prj[p.key]) {
          value = {};
          this$.grade.map(function(g){
            return value[g.key] = 0;
          });
          ops.push({
            p: ['prj', p.key],
            oi: {
              v: value
            }
          });
        }
        return this$.grade.map(function(g, i){
          var ref$, ref1$, key$;
          return ((ref$ = (ref1$ = this$.data.prj)[key$ = p.key] || (ref1$[key$] = {})).v || (ref$.v = {}))[g.key] || 0;
        });
      });
      if (ops.length) {
        this.update({
          ops: ops
        });
      }
      if (!ret.length) {
        ret = [[]];
      }
      this.sheet.populateFromArray(1, 3, ret);
      return this.render();
    },
    render: function(){
      this.getProgress();
      this.view.base.render();
      this.view.local.render();
      return this.sheet;
    },
    initSheet: function(){
      var data, this$ = this;
      console.log("init sheet ... ");
      this.sheet = initHot({
        root: edit,
        afterChange: function(changes){
          var ops, sums, data, rank;
          changes == null && (changes = []);
          ops = [];
          sums = [];
          data = this$.sheet
            ? this$.sheet.getSourceData()
            : [[]];
          changes.map(function(arg$){
            var row, prop, old, cur, pk, gk, ref$, ref1$, sum;
            row = arg$[0], prop = arg$[1], old = arg$[2], cur = arg$[3];
            if (!(row > 0 && prop > 2 && prop < 3 + this$.grade.length)) {
              return;
            }
            pk = this$.prjkeymap[data[row][0]].key;
            gk = this$.grade[prop - 3].key;
            old = ((ref$ = (ref1$ = this$.data.prj)[pk] || (ref1$[pk] = {})).v || (ref$.v = {}))[gk];
            ((ref$ = (ref1$ = this$.data.prj)[pk] || (ref1$[pk] = {})).v || (ref$.v = {}))[gk] = cur;
            sum = this$.grade.map(function(g){
              var ref$, ref1$;
              return ((ref$ = (ref1$ = this$.data.prj)[pk] || (ref1$[pk] = {})).v || (ref$.v = {}))[g.key];
            }).reduce(function(a, b){
              return a + +b;
            }, 0);
            sums.push([row, 3 + this$.grade.length, sum]);
            if (old !== cur) {
              if (old != null) {
                ops.push({
                  p: ['prj', pk, 'v', gk],
                  od: old
                });
              }
              return ops.push({
                p: ['prj', pk, 'v', gk],
                oi: cur
              });
            }
          });
          if (this$.sheet && sums.length) {
            this$.sheet.setDataAtCell(sums);
            data = this$.sheet.getSourceData(1, 3 + this$.grade.length, this$.prjs.length, 3 + this$.grade.length);
            data = data.map(function(d, i){
              return [d[0], i + 1];
            });
            data.sort(function(a, b){
              return b[0] - a[0];
            });
            rank = [];
            data.map(function(v, i){
              return rank.push([v[1], 3 + this$.grade.length + 1, i + 1]);
            });
            this$.sheet.setDataAtCell(rank);
          }
          return this$.update({
            ops: ops
          });
        }
      }, {
        grade: this.grade
      });
      this.sheet.addHook('beforeOnCellMouseDown', function(e, coord){
        var col, data, head, dir, prj;
        if (coord.row < 0) {
          col = coord.col;
          data = this$.sheet.getSourceData() || [[]];
          head = data.splice(0, 1)[0];
          this$.sortDir[col] = dir = 1 - (this$.sortDir[col] || 0);
          data.sort(function(a, b){
            return (dir * 2 - 1) * (b[col] > a[col]
              ? 1
              : b[col] < a[col] ? -1 : 0);
          });
          data.splice(0, 0, head);
          return this$.sheet.loadData(data);
        } else if (coord.col === 2) {
          data = this$.sheet.getSourceData() || [[]];
          if (!(prj = this$.prjs.filter(function(it){
            return it.key === data[coord.row][0];
          })[0])) {
            return;
          }
          this$.view.local.get("iframe").setAttribute('src', "/dash/prj/" + prj.slug + "?simple");
          this$.view.local.get("iframe-placeholder").classList.add('d-none');
          if (this$.activeNode) {
            return this$.activeNode.classList.remove('active');
          }
        }
      });
      this.prjs.sort(function(a, b){
        return a.key - b.key;
      });
      data = this.prjs.map(function(d, i){
        return [d.key, '', d.name].concat(this$.grade.map(function(){
          return 0;
        }), [0, 1, '']);
      });
      data = [["編號", "評論", "名稱"].concat(this.grade.map(function(it){
        return it.name;
      }), ["總分", "排名", "評論"])].concat(data);
      this.sheet.loadData(data);
      this.sheet.render();
      return this.render();
    },
    reconnect: function(){
      var this$ = this;
      return this.getdoc().then(function(){
        return console.log("initied.");
      });
    },
    init: function(){
      var this$ = this;
      return Promise.resolve().then(function(){
        return this$.auth();
      }).then(function(){
        return this$.initView();
      }).then(function(){
        return this$.user = this$.global.user;
      }).then(function(){
        return this$.fetchInfo();
      }).then(function(){
        if (!this$.grpinfo.grade) {
          return ldcvmgr.get('judge-grade-missing');
        } else {
          return this$.grade = this$.grpinfo.grade.entries;
        }
      }).then(function(){
        return this$.fetchPrjs();
      }).then(function(){
        return this$.initSheet();
      }).then(function(){
        return this$.sharedb();
      }).then(function(){
        return this$.reconnect();
      })['catch'](error());
    },
    getState: function(context){
      var this$ = this;
      return context.state = this.criteria.reduce(function(a, b){
        var v, ref$, ref1$, key$;
        v = ((ref$ = (ref1$ = this$.data.prj)[key$ = context.slug] || (ref1$[key$] = {})).value || (ref$.value = {}))[b.key];
        return Math.max(a, v != null ? v : 1);
      }, 0);
    },
    getProgress: function(){
      var ret, this$ = this;
      this.progress = ret = {
        done: 0,
        accept: 0,
        pending: 0,
        reject: 0,
        total: this.prjs.length || 1
      };
      this.prjs.map(function(p){
        var v, ref$, key$;
        if (v = ((ref$ = this$.data.prj)[key$ = p.slug] || (ref$[key$] = {})).value) {
          return ret[v]++;
        }
      });
      return ret.done = ret.accept + ret.pending + ret.reject || 0;
    }
  });
  ctrl = new Ctrl({
    root: document.body
  });
  ctrl.init();
  return initHot = function(opt, optJudge){
    var hot;
    Handsontable.renderers.registerRenderer('myrenderer', function(instance, td, row, col, prop, value, cellProperties){
      return Handsontable.renderers.TextRenderer.apply(this, arguments);
    });
    hot = new Handsontable(opt.root, import$({
      rowHeaders: true,
      colHeaders: true,
      filters: true,
      dropdownMenu: true,
      rowHeights: 25,
      colWidths: [40, 50, 220, 50, 50, 50, 50, 50, 250],
      minRows: 50,
      minCols: 15,
      stretchH: 'all',
      fixedRowsTop: 1,
      fixedColumnsLeft: 3,
      cells: function(row, col, prop){
        var readOnly;
        readOnly = row < 1 || col < 3 || col === optJudge.grade.length + 4 ? true : false;
        return {
          renderer: 'myrenderer',
          readOnly: readOnly
        };
      }
    }, opt));
    return hot;
  };
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}