// Generated by LiveScript 1.3.0
ldc.register('judgeFinalUser', ['notify', 'judgeBase', 'error', 'loader', 'auth', 'ldcvmgr', 'sdbAdapter'], function(arg$){
  var notify, judgeBase, error, loader, auth, ldcvmgr, sdbAdapter, Ctrl, ctrl, initHot;
  notify = arg$.notify, judgeBase = arg$.judgeBase, error = arg$.error, loader = arg$.loader, auth = arg$.auth, ldcvmgr = arg$.ldcvmgr, sdbAdapter = arg$.sdbAdapter;
  Ctrl = function(opt){
    var obj, view, this$ = this;
    import$(this, obj = new judgeBase(opt));
    this.data = {
      prj: {}
    };
    this.active = null;
    this.view.local = view = new ldView({
      initRender: false,
      root: this.root,
      action: {
        click: {
          sort: function(arg$){
            var node;
            node = arg$.node;
            return this$.sort(node.getAttribute('data-name'), node.getAttribute('data-value'));
          }
        }
      },
      text: {
        count: function(arg$){
          var node;
          node = arg$.node;
          return this$.progress[node.getAttribute('data-name')] || 0;
        }
      },
      handler: {
        "comment-name": function(arg$){
          var node;
          node = arg$.node;
          if (this$.active) {
            return node.innerText = this$.active.name || '';
          }
        },
        progress: function(arg$){
          var node, names, p, n;
          node = arg$.node, names = arg$.names;
          p = this$.progress;
          if (in$('progress-bar', names)) {
            n = node.getAttribute('data-name');
            return node.style.width = 100 * p[n] / p.total + "%";
          } else if (in$('progress-percent', names)) {
            return node.innerText = Math.round(100 * p.done / p.total);
          }
        },
        "header-criteria": {
          list: function(){
            return this$.criteria;
          },
          action: {
            click: function(arg$){
              var node, data;
              node = arg$.node, data = arg$.data;
              return this$.sort('criteria', data.key);
            }
          },
          handler: function(arg$){
            var node, data;
            node = arg$.node, data = arg$.data;
            return node.innerText = data.name;
          }
        },
        project: {
          key: function(it){
            return it.slug;
          },
          list: function(){
            return this$.prjs;
          },
          init: function(arg$){
            var node, local, data, root;
            node = arg$.node, local = arg$.local, data = arg$.data;
            root = node;
            node.classList.remove('d-none');
            return local.view = new ldView({
              initRender: false,
              root: node,
              context: data,
              action: {
                click: {
                  option: function(arg$){
                    var node, context, name, ref$, key$;
                    node = arg$.node, context = arg$.context;
                    name = node.getAttribute('data-name');
                    ((ref$ = this$.data.prj)[key$ = context.slug] || (ref$[key$] = {})).value = name;
                    local.view.render();
                    this$.getProgress();
                    this$.view.local.render(['progress']);
                    return this$.update({
                      debounced: 10
                    });
                  },
                  name: function(arg$){
                    var node, context;
                    node = arg$.node, context = arg$.context;
                    view.get("iframe").setAttribute('src', "/dash/prj/" + context.slug + "?simple");
                    view.get("iframe-placeholder").classList.add('d-none');
                    if (this.activeNode) {
                      this.activeNode.classList.remove('active');
                    }
                    this.activeNode = root;
                    return this.activeNode.classList.add('active');
                  }
                }
              },
              text: {
                name: function(arg$){
                  var context;
                  context = arg$.context;
                  return context.name || '';
                },
                ownername: function(arg$){
                  var context;
                  context = arg$.context;
                  return context.info.teamname || context.ownername || '';
                },
                key: function(arg$){
                  var context;
                  context = arg$.context;
                  return context.key || '';
                },
                budget: function(arg$){
                  var context;
                  context = arg$.context;
                  if (!context.info.budget) {
                    return '';
                  }
                  return Math.round(context.info.budget / 10000) + "萬";
                }
              },
              handler: {
                "has-comment": function(arg$){
                  var node, context, ref$, key$;
                  node = arg$.node, context = arg$.context;
                  return node.classList.toggle('invisible', !((ref$ = this$.data.prj)[key$ = context.slug] || (ref$[key$] = {})).comment);
                },
                option: function(arg$){
                  var node, local, context, name, cls, act, ref$, key$;
                  node = arg$.node, local = arg$.local, context = arg$.context;
                  name = node.getAttribute('data-name');
                  cls = {
                    accept: "bg-success",
                    pending: "bg-warning",
                    reject: "bg-danger"
                  }[name];
                  act = ((ref$ = this$.data.prj)[key$ = context.slug] || (ref$[key$] = {})).value === name ? 'add' : 'remove';
                  return node.classList[act].apply(node.classList, [cls, 'text-white']);
                }
              }
            });
          },
          handler: function(arg$){
            var node, local, data;
            node = arg$.node, local = arg$.local, data = arg$.data;
            local.view.setContext(data);
            this$.getState(data);
            return local.view.render();
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(import$({}, judgeBase.prototype), {
    opsIn: function(arg$){
      var data, ops, source, ref$, ret, res$, r, lresult$, c;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.data = JSON.parse(JSON.stringify(data));
      (ref$ = this.data).prj || (ref$.prj = {});
      res$ = [];
      for (r in (ref$ = this.data).value || (ref$.value = {})) {
        lresult$ = [];
        for (c in (ref$ = this.data.value)[r] || (ref$[r] = {})) {
          lresult$.push(this.data.value[r][c] || 0);
        }
        res$.push(lresult$);
      }
      ret = res$;
      this.sheet.populateFromArray(1, 3, ret);
      return this.render();
    },
    render: function(){
      this.getProgress();
      this.view.base.render();
      return this.view.local.render();
    },
    initSheet: function(){
      var data, this$ = this;
      console.log("init sheet ... ");
      this.sheet = initHot({
        root: edit,
        afterChange: function(changes){
          changes == null && (changes = []);
          changes.map(function(arg$){
            var row, prop, old, cur, ref$, key$;
            row = arg$[0], prop = arg$[1], old = arg$[2], cur = arg$[3];
            return ((ref$ = this$.data.value)[key$ = row - 1] || (ref$[key$] = {}))[prop - 3] = cur;
          });
          return this$.update();
        }
      });
      data = this.prjs.map(function(d, i){
        return [i, 0, d.name, 0, 0, 0, 0, 1, ''];
      });
      data = [["編號", "評論", "名稱", "創意", "技術", "設計", "總分", "排名", "評論"]].concat(data);
      this.sheet.loadData(data);
      this.sheet.render();
      return this.render();
    },
    init: function(){
      var this$ = this;
      return Promise.resolve().then(function(){
        return this$.auth();
      }).then(function(){
        return this$.initView();
      }).then(function(){
        return this$.user = this$.global.user;
      }).then(function(){
        return this$.fetchInfo();
      }).then(function(){
        return this$.fetchPrjs();
      }).then(function(){
        return this$.initSheet();
      }).then(function(){
        return this$.sharedb();
      }).then(function(){
        return this$.getdoc();
      }).then(function(){
        return this$.sort('name', null, false);
      }).then(function(){
        return console.log("initied.");
      })['catch'](function(e){
        console.log(e, ldError.id(e));
        return error()(e);
      });
    },
    getState: function(context){
      var this$ = this;
      return context.state = this.criteria.reduce(function(a, b){
        var v, ref$, ref1$, key$;
        v = ((ref$ = (ref1$ = this$.data.prj)[key$ = context.slug] || (ref1$[key$] = {})).value || (ref$.value = {}))[b.key];
        return Math.max(a, v != null ? v : 1);
      }, 0);
    },
    getProgress: function(){
      var ret, this$ = this;
      this.progress = ret = {
        done: 0,
        accept: 0,
        pending: 0,
        reject: 0,
        total: this.prjs.length || 1
      };
      this.prjs.map(function(p){
        var v, ref$, key$;
        if (v = ((ref$ = this$.data.prj)[key$ = p.slug] || (ref$[key$] = {})).value) {
          return ret[v]++;
        }
      });
      return ret.done = ret.accept + ret.pending + ret.reject || 0;
    }
  });
  ctrl = new Ctrl({
    root: document.body
  });
  ctrl.init();
  return initHot = function(opt){
    var hot;
    Handsontable.renderers.registerRenderer('myrenderer', function(instance, td, row, col, prop, value, cellProperties){
      return Handsontable.renderers.TextRenderer.apply(this, arguments);
    });
    hot = new Handsontable(opt.root, import$({
      rowHeaders: true,
      colHeaders: true,
      filters: true,
      dropdownMenu: true,
      rowHeights: 25,
      colWidths: [40, 50, 220, 50, 50, 50, 50, 50, 250],
      minRows: 50,
      minCols: 15,
      stretchH: 'all',
      fixedRowsTop: 1,
      fixedColumnsLeft: 3,
      cells: function(row, col){
        return {
          renderer: 'myrenderer'
        };
      }
    }, opt));
    return hot;
  };
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}