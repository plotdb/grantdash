// Generated by LiveScript 1.3.0
ldc.register(['ldcvmgr', 'error'], function(arg$){
  var ldcvmgr, error, lc, form, view, viewPosts;
  ldcvmgr = arg$.ldcvmgr, error = arg$.error;
  lc = {};
  form = new ldForm({
    root: '[ld-scope=post-new]',
    submit: '[ld=post]'
  });
  view = new ldView({
    root: '[ld-scope=post-new]',
    action: {
      click: {
        post: function(arg$){
          var node, payload;
          node = arg$.node;
          payload = {
            brd: 'sch001',
            title: form.values().title
          };
          return ld$.fetch("/dash/api/post/", {
            method: 'POST'
          }, {
            json: payload,
            type: 'json'
          }).then(function(ret){
            return window.location.href = "/dash/post/" + ret.slug + "/edit";
          })['catch'](error());
        }
      }
    }
  });
  viewPosts = new ldView({
    initRender: false,
    root: '[ld-scope=posts]',
    action: {
      click: {
        "new-post": function(){
          return ldcvmgr.toggle("post-new");
        }
      }
    },
    handler: {
      loading: function(arg$){
        var node;
        node = arg$.node;
        return node.classList.toggle('d-none', true);
      },
      empty: function(arg$){
        var node;
        node = arg$.node;
        return node.classList.toggle('d-none', lc.posts && lc.posts.length);
      },
      post: {
        list: function(){
          return lc.posts || [];
        },
        init: function(arg$){
          var node, local, data;
          node = arg$.node, local = arg$.local, data = arg$.data;
          node.classList.remove('d-none');
          return local.view = new ldView({
            root: node,
            context: data,
            handler: {
              title: function(arg$){
                var node, context;
                node = arg$.node, context = arg$.context;
                return node.innerText = context.title;
              },
              owner: function(arg$){
                var node, context;
                node = arg$.node, context = arg$.context;
                return node.innerText = context.ownername;
              },
              date: function(arg$){
                var node, context;
                node = arg$.node, context = arg$.context;
                return node.innerText = moment(context.createdtime).format("YYYY-MM-DD hh:mm:ss");
              },
              avatar: function(arg$){
                var node, context;
                node = arg$.node, context = arg$.context;
                return node.style.backgroundImage = "url(/s/avatar/" + context.owner + ".png)";
              },
              edit: function(arg$){
                var node, context;
                node = arg$.node, context = arg$.context;
                return node.setAttribute('href', "/post/" + context.slug + "/edit");
              },
              view: function(arg$){
                var node, context;
                node = arg$.node, context = arg$.context;
                return node.setAttribute('href', "/post/" + context.slug + "/");
              }
            }
          });
        },
        handler: function(arg$){
          var local, data;
          local = arg$.local, data = arg$.data;
          local.view.setContext(data);
          return local.view.render();
        }
      }
    }
  });
  return ld$.fetch('/dash/api/post/', {
    method: 'GET'
  }, {
    params: {
      brd: 'sch001'
    },
    type: 'json'
  }).then(function(it){
    lc.posts = it;
    return viewPosts.render();
  });
});