// Generated by LiveScript 1.3.0
ldc.register('adminJudgePerm', ['ldcvmgr', 'auth', 'sdbAdapter', 'error'], function(arg$){
  var ldcvmgr, auth, sdbAdapter, error, Ctrl;
  ldcvmgr = arg$.ldcvmgr, auth = arg$.auth, sdbAdapter = arg$.sdbAdapter, error = arg$.error;
  Ctrl = function(opt){
    var root, this$ = this;
    opt == null && (opt = {});
    this.data = {
      list: []
    };
    this.opt = opt;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.brd = opt.brd;
    this.grp = null;
    this.view = new ldView({
      root: this.root,
      action: {
        click: {
          add: function(){
            var name, email, payload;
            name = this$.view.get("name").value;
            email = this$.view.get("email").value;
            if (!(name && email)) {
              return;
            }
            if (this$.data.list.filter(function(it){
              return it.name === name || it.email === email;
            }).length) {
              return;
            }
            payload = {
              email: email,
              brd: this$.brd.slug,
              grp: this$.grp.key
            };
            this$.ldbtn.on();
            return auth.recaptcha.get().then(function(recaptcha){
              payload.recaptcha = recaptcha;
              return ld$.fetch("/dash/api/judgetoken", {
                method: 'POST'
              }, {
                json: payload,
                type: 'json'
              });
            }).then(function(r){
              var id;
              r == null && (r = {});
              if (!(r.id && r.token)) {
                return Promise.reject(new ldError(400));
              }
              id = r.id + ":1";
              this$.data.list.push({
                name: name,
                email: email,
                token: r.token,
                id: id
              });
              this$.update();
              return this$.view.render();
            })['finally'](function(){
              return this$.ldbtn.off();
            })['catch'](error());
          }
        }
      },
      init: {
        add: function(arg$){
          var node;
          node = arg$.node;
          return this$.ldbtn = new ldLoader({
            root: node
          });
        }
      },
      handler: {
        empty: function(arg$){
          var node, ref$;
          node = arg$.node;
          return node.classList.toggle('d-none', ((ref$ = this$.data).list || (ref$.list = [])).length);
        },
        judges: {
          list: function(){
            var ref$;
            return (ref$ = this$.data).list || (ref$.list = []);
          },
          init: function(arg$){
            var node, data, local, this$ = this;
            node = arg$.node, data = arg$.data, local = arg$.local;
            node.classList.remove('d-none');
            return local.view = new ldView({
              root: node,
              context: data,
              action: {
                click: {
                  'delete': function(arg$){
                    var context;
                    context = arg$.context;
                    this$.data.list.splice(this$.data.list.indexOf(context), 1);
                    this$.view.render();
                    return this$.update();
                  }
                }
              },
              init: {
                copylink: function(arg$){
                  var node, local;
                  node = arg$.node, local = arg$.local;
                  local.clipboard = new ClipboardJS(node, {
                    text: function(trigger){
                      var data;
                      data = trigger.data;
                      return "https://" + window.location.hostname + "/dash/judgetoken/" + data.token + "#" + data.email;
                    }
                  });
                  return local.clipboard.on('success', function(){
                    clearTimeout(local.h);
                    node.classList.add('tip-on');
                    return local.h = setTimeout(function(){
                      return node.classList.remove('tip-on');
                    }, 1000);
                  });
                }
              },
              handler: {
                copylink: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return node.data = context;
                }
              },
              text: {
                name: function(arg$){
                  var context;
                  context = arg$.context;
                  return context.name;
                },
                email: function(arg$){
                  var context;
                  context = arg$.context;
                  return context.email;
                }
              }
            });
          },
          handler: function(arg$){
            var local, data;
            local = arg$.local, data = arg$.data;
            local.view.setContext(data);
            return local.view.render();
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    update: function(){
      var this$ = this;
      return this.opsOut(function(){
        return this$.data;
      });
    },
    setData: function(grp){
      this.grp = grp;
      return this.view.render();
    },
    updateView: function(){
      return this.view.render();
    },
    opsIn: function(arg$){
      var data, ops, source, ref$;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.data = JSON.parse(JSON.stringify(data || {}));
      (ref$ = this.data).list || (ref$.list = []);
      return this.updateView();
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}