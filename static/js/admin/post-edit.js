// Generated by LiveScript 1.3.0
ldc.register(['auth', 'ldcvmgr', 'sdbAdapter', 'loader', 'error'], function(arg$){
  var auth, ldcvmgr, sdbAdapter, loader, error, Ctrl, ret, slug, ctrl;
  auth = arg$.auth, ldcvmgr = arg$.ldcvmgr, sdbAdapter = arg$.sdbAdapter, loader = arg$.loader, error = arg$.error;
  Ctrl = function(opt){
    var this$ = this;
    this.opt = opt;
    this.slug = opt.slug || suuid();
    this.data = {};
    this.update = debounce(function(){
      var this$ = this;
      return this.opsOut(function(){
        return this$.data;
      });
    });
    this.preview = new ldCover({
      root: '[ld=preview-ldcv]'
    });
    this.view = new ldView({
      root: document.body,
      handler: {
        url: function(arg$){
          var node, url;
          node = arg$.node;
          url = "/dash/post/" + this$.slug + "/";
          node.setAttribute('href', url);
          return node.innerText = url;
        },
        title: function(arg$){
          var node;
          node = arg$.node;
          return node.value = this$.data.title || ' ... ';
        }
      },
      action: {
        click: {
          preview: function(){
            this$.preview.toggle();
            return this$.view.get('preview-panel').innerHTML = DOMPurify.sanitize(marked(this$.data.content));
          },
          publish: function(arg$){
            var node, data;
            node = arg$.node;
            data = {
              payload: this$.data,
              type: 'post',
              slug: this$.slug
            };
            ldcvmgr.toggle('publishing', true);
            return auth.recaptcha.get().then(function(recaptcha){
              data.recaptcha = recaptcha;
              return ld$.fetch("/dash/api/detail", {
                method: 'PUT'
              }, {
                json: data,
                type: 'json'
              });
            })['finally'](function(){
              return ldcvmgr.toggle('publishing', false);
            }).then(function(){
              ldcvmgr.toggle('published', true);
              return debounce(2000).then(function(){
                return ldcvmgr.toggle('published', false);
              });
            })['catch'](error());
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    opsIn: function(arg$){
      var data, ops, source;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.data = JSON.parse(JSON.stringify(data));
      this.quill.root.innerHTML = this.data.content || '';
      return this.view.render();
    },
    init: function(){
      var this$ = this;
      return Promise.resolve().then(function(){
        var quill;
        this$.quill = quill = new Quill('#editor', {
          theme: 'snow',
          modules: {
            toolbar: [
              [{
                'header': [1, 2, 3, 4, 5, 6, false]
              }], ['bold', 'italic', 'underline', 'strike', 'link'], [{
                'align': []
              }], [
                {
                  'list': 'ordered'
                }, {
                  'list': 'bullet'
                }
              ], [
                {
                  'indent': '-1'
                }, {
                  'indent': '+1'
                }
              ], [
                {
                  'color': []
                }, {
                  'background': []
                }
              ], ['blockquote', 'code-block'], ['clean']
            ]
          }
        });
        return quill.on('text-change', function(delta, oldDelta, source){
          this$.data.content = quill.root.innerHTML;
          return this$.update();
        });
      });
    },
    fetch: function(){
      var this$ = this;
      return ld$.fetch("/dash/api/post/" + this.slug + "/", {
        method: 'GET'
      }, {
        type: 'json'
      }).then(function(it){
        return this$.post = it;
      });
    },
    render: function(){
      return this.view.render();
    },
    sharedb: function(){
      var sdb, this$ = this;
      console.log("initializing sharedb connection ...");
      this.sdb = sdb = new sharedbWrapper({
        url: {
          scheme: window.location.protocol.replace(':', ''),
          domain: window.location.host
        },
        path: '/dash/ws'
      });
      sdb.on('error', function(){
        return ldcvmgr.toggle('not-sync');
      });
      sdb.on('close', function(){
        ldcvmgr.toggle('offline-retry', true);
        return sdb.reconnect().then(function(){
          return this$.getdoc();
        }).then(function(){
          return this$.render();
        }).then(function(){
          return console.log("re-inited.");
        }).then(function(){
          return ldcvmgr.toggle('offline-retry', false);
        });
      });
      this.hub = new Hub({
        sdb: sdb
      });
      return sdb.ready();
    },
    getdoc: function(){
      var this$ = this;
      console.log("get post document ...");
      return this.sdb.get({
        id: "post/" + this.slug,
        watch: function(ops, source){
          return this$.hub.fire('change', {
            ops: ops,
            source: source
          });
        },
        create: function(){
          return this$.post.detail;
        }
      }).then(function(doc){
        return this$.hub.doc = doc;
      });
    }
  });
  loader.on();
  ret = /^\/dash\/post\/(.+)\/edit$/.exec(window.location.pathname);
  slug = ret[1];
  ctrl = new Ctrl({
    slug: slug
  });
  return ctrl.init().then(function(){
    return ctrl.fetch();
  }).then(function(){
    return ctrl.sharedb();
  }).then(function(){
    return ctrl.getdoc();
  }).then(function(){
    return ctrl.render();
  }).then(function(){
    return ctrl.adapt({
      hub: ctrl.hub,
      path: []
    });
  }).then(function(){
    return loader.off();
  });
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}