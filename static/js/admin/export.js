// Generated by LiveScript 1.3.0
ldc.register('adminBrdExport', ['error', 'loader', 'notify', 'ldcvmgr', 'auth', 'sdbAdapter', 'adminPanel'], function(arg$){
  var error, loader, notify, ldcvmgr, auth, sdbAdapter, adminPanel, Ctrl;
  error = arg$.error, loader = arg$.loader, notify = arg$.notify, ldcvmgr = arg$.ldcvmgr, auth = arg$.auth, sdbAdapter = arg$.sdbAdapter, adminPanel = arg$.adminPanel;
  Ctrl = function(opt){
    var view, this$ = this;
    this.toc = opt.toc;
    this.prjs = [];
    this.data = {};
    adminPanel.on('active', function(arg$){
      var nav, name, panel;
      nav = arg$.nav, name = arg$.name, panel = arg$.panel;
      if (name === 'brd-export') {
        return ld$.fetch("/dash/api/brd/" + this$.toc.brd.slug + "/list", {
          method: 'GET'
        }, {
          type: 'json'
        }).then(function(it){
          this$.prjs = it;
          this$.prjs = this$.prjs.filter(function(it){
            var ref$;
            return ((ref$ = it.system || (it.system = {})).badge || (ref$.badge = {})).winner;
          });
          this$.prjs.sort(function(a, b){
            return a.key - b.key;
          });
          this$.prjs.map(function(it){
            return it.info = it.detail.info;
          });
          return this$.view.render();
        })['catch'](error());
      }
    });
    this.update = function(){
      return this$.opsOut(function(){
        return this$.data;
      });
    };
    this.view = view = new ldView({
      root: opt.root,
      action: {
        input: {
          field: function(arg$){
            var node, name;
            node = arg$.node;
            name = node.getAttribute('data-name');
            this$.data[name] = node.value;
            return this$.update();
          }
        }
      },
      handler: {
        field: function(arg$){
          var node, name;
          node = arg$.node;
          name = node.getAttribute('data-name');
          return node.value = this$.data[name] || '';
        },
        prj: {
          list: function(){
            return this$.prjs;
          },
          handler: function(arg$){
            var node, local, data;
            node = arg$.node, local = arg$.local, data = arg$.data;
            local.view.setContext(data);
            return local.view.render();
          },
          init: function(arg$){
            var node, local, data;
            node = arg$.node, local = arg$.local, data = arg$.data;
            return local.view = new ldView({
              context: data,
              root: node,
              action: {
                input: {
                  amount: function(arg$){
                    var node, context, ref$, key$;
                    node = arg$.node, context = arg$.context;
                    ((ref$ = this$.data)[key$ = context.key] || (ref$[key$] = {})).amount = node.value || 0;
                    return this$.update();
                  },
                  state: function(arg$){
                    var node, context, ref$, key$;
                    node = arg$.node, context = arg$.context;
                    ((ref$ = this$.data)[key$ = context.key] || (ref$[key$] = {})).state = node.value || '';
                    return this$.update();
                  }
                }
              },
              text: {
                name: function(arg$){
                  var context;
                  context = arg$.context;
                  return context.name;
                }
              },
              handler: {
                amount: function(arg$){
                  var node, context, ref$, key$;
                  node = arg$.node, context = arg$.context;
                  return node.value = ((ref$ = this$.data)[key$ = context.key] || (ref$[key$] = {})).amount || 0;
                },
                state: function(arg$){
                  var node, context, ref$, key$;
                  node = arg$.node, context = arg$.context;
                  return node.value = ((ref$ = this$.data)[key$ = context.key] || (ref$[key$] = {})).state || '';
                }
              }
            });
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    setData: function(data){
      this.data = data;
      return this.view.render();
    },
    opsIn: function(arg$){
      var data, ops, source;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.data = JSON.parse(JSON.stringify(data));
      return this.view.render();
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}