// Generated by LiveScript 1.3.0
var slice$ = [].slice;
ldc.register('adminGuard', ['auth', 'loader', 'sdbAdapter', 'adminMenu', 'adminPanel', 'adminInfo', 'adminStage', 'adminPerm', 'adminNavbar'], function(arg$){
  var auth, loader, sdbAdapter, adminMenu, adminPanel, adminInfo, adminStage, adminPerm, adminNavbar, init, Hub, prepareSharedb;
  auth = arg$.auth, loader = arg$.loader, sdbAdapter = arg$.sdbAdapter, adminMenu = arg$.adminMenu, adminPanel = arg$.adminPanel, adminInfo = arg$.adminInfo, adminStage = arg$.adminStage, adminPerm = arg$.adminPerm, adminNavbar = arg$.adminNavbar;
  loader.on();
  console.log("fetch auth data ...");
  auth.fetch().then(function(g){
    var ref$, path, type, slug, hint;
    ref$ = /^\/([ob])\/([^/]+)\/admin/.exec(window.location.pathname) || [], path = ref$[0], type = ref$[1], slug = ref$[2];
    hint = import$({}, type
      ? type === 'o'
        ? {
          org: slug
        }
        : {
          brd: slug
        }
      : {});
    console.log("fetch sidemenu information ... ");
    return ld$.fetch('/d/toc/', {
      method: 'POST'
    }, {
      json: hint,
      type: 'json'
    }).then(function(toc){
      console.log("initialization ...");
      return init(toc)['catch'](function(e){
        console.log("admin init error", e);
        return lda.ldcvmgr.toggle('error');
      });
    })['catch'](function(){
      return lda.ldcvmgr.lock('create-brd-now');
    });
  })['catch'](function(){
    return lda.ldcvmgr.toggle('auth-required');
  }).then(function(){
    return loader.off();
  });
  init = function(toc){
    toc.doc = {};
    ['org', 'brd', 'brds', 'brdsFiltered', 'grps'].map(function(it){
      return toc[it] = toc[it] || [];
    });
    toc.brdsFiltered = toc.brds || [];
    console.log("sidemenu information: ", toc);
    return prepareSharedb(toc).then(function(arg$){
      var org, brd, menu, info, stage, perm, navbar;
      org = arg$.org, brd = arg$.brd;
      if (!brd.doc.data.page) {
        brd.doc.submitOp([{
          p: ["page"],
          oi: {
            navbar: {}
          }
        }]);
      }
      menu = new adminMenu({
        toc: toc
      });
      menu.adapt({
        hub: brd,
        path: ['group']
      });
      info = new adminInfo({
        root: '[ld-scope=brd-info]',
        type: 'brd'
      });
      info.adapt({
        hub: brd,
        path: ['info']
      });
      stage = new adminStage({
        toc: toc,
        root: '[ld-scope=brd-stage]'
      });
      stage.adapt({
        hub: brd,
        path: ['stage']
      });
      perm = new adminPerm({
        toc: toc,
        root: '[ld-scope=brd-perm]'
      });
      perm.adapt({
        hub: brd,
        path: ['perm']
      });
      navbar = new adminNavbar({
        toc: toc,
        root: '[ld-scope=navbar-editor]'
      });
      return navbar.adapt({
        hub: brd,
        path: ['page', 'navbar']
      });
    });
  };
  Hub = function(it){
    return import$((this.evtHandler = {}, this), it);
  };
  Hub.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    }
  });
  return prepareSharedb = function(toc){
    var sdb, hubs, prepare;
    console.log("prepare sharedb ...");
    sdb = sdb = new sharedbWrapper({
      url: {
        scheme: window.location.protocol.replace(':', ''),
        domain: window.location.host
      }
    });
    sdb.on('close', function(){
      loader.on();
      return sdb.reconnect().then(function(){
        return prepare();
      }).then(function(){
        return loader.off();
      });
    });
    hubs = {
      org: new Hub({
        sdb: sdb
      }),
      brd: new Hub({
        sdb: sdb
      })
    };
    prepare = function(){
      console.log("preparing sharedb document (org) ... ");
      return sdb.get({
        id: "org-" + toc.org.key,
        watch: function(ops, source){
          return org.fire('change', {
            ops: ops,
            source: source
          });
        }
      }).then(function(doc){
        return hubs.org.doc = doc;
      }).then(function(){
        return console.log("preparing sharedb document (brd) ... ");
      }).then(function(){
        return sdb.get({
          id: "brd-" + toc.brd.key,
          watch: function(ops, source){
            return hubs.brd.fire('change', {
              source: ops.source
            });
          }
        });
      }).then(function(doc){
        return hubs.brd.doc = doc;
      }).then(function(){
        return hubs;
      })['catch'](function(){
        return ldcvmgr.toggle('error');
      });
    };
    return prepare();
  };
});
ldc.app('adminGuard');
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}