// Generated by LiveScript 1.3.0
(function(){
  ldc.register('adminGuard', ['auth', 'loader', 'adminPanel', 'sdbAdapter', 'adminInfo'], function(arg$){
    var auth, loader, adminPanel, sdbAdapter, adminInfo, init, sdb, menu;
    auth = arg$.auth, loader = arg$.loader, adminPanel = arg$.adminPanel, sdbAdapter = arg$.sdbAdapter, adminInfo = arg$.adminInfo;
    loader.on();
    auth.fetch().then(function(g){
      var ref$, path, type, slug, hint;
      ref$ = /^\/([ob])\/([^/]+)\/admin/.exec(window.location.pathname) || [], path = ref$[0], type = ref$[1], slug = ref$[2];
      hint = import$({}, type
        ? type === 'o'
          ? {
            org: slug
          }
          : {
            brd: slug
          }
        : {});
      return ld$.fetch('/d/toc/', {
        method: 'POST'
      }, {
        json: hint,
        type: 'json'
      }).then(function(toc){
        return init(toc)['catch'](function(e){
          return lda.ldcvmgr.toggle('error');
        });
      })['catch'](function(){
        return lda.ldcvmgr.lock('create-brd-now');
      });
    })['catch'](function(){
      return lda.ldcvmgr.toggle('auth-required');
    }).then(function(){
      return loader.off();
    });
    init = function(toc){
      toc.doc = {};
      ['org', 'brd', 'brds', 'brdsFiltered', 'grps'].map(function(it){
        return toc[it] = toc[it] || [];
      });
      toc.brdsFiltered = toc.brds || [];
      console.log(toc);
      return sdb(toc).then(function(sdb){
        var info;
        menu(toc, sdb);
        info = new adminInfo({
          root: '[ld-scope=brd-info]',
          type: 'brd'
        });
        return info.adapt({
          sdb: sdb,
          doc: toc.doc.brd
        });
      });
    };
    sdb = function(toc){
      var sdb, watch, prepare;
      sdb = new sharedbWrapper({
        url: {
          scheme: window.location.protocol.replace(':', ''),
          domain: window.location.host
        }
      });
      sdb.on('close', function(){
        loader.on();
        return sdb.reconnect().then(function(){
          return prepare();
        }).then(function(){
          return loader.off();
        });
      });
      watch = function(){};
      prepare = function(){
        console.log("preparing sharedb documents ... ");
        return sdb.get({
          id: "org-" + toc.org.key,
          watch: watch
        }).then(function(doc){
          return toc.doc.org = doc;
        }).then(function(){
          return sdb.get({
            id: "brd-" + toc.brd.key,
            watch: watch
          });
        }).then(function(doc){
          return toc.doc.brd = doc;
        }).then(function(){
          return sdb;
        })['catch'](function(){
          return ldcvmgr.toggle('error');
        });
      };
      return prepare();
    };
    return menu = function(toc, sdb){
      var setGroup, search, root, view, adapter, notify;
      setGroup = function(grp){};
      search = debounce(function(val){
        toc.brdsFiltered = toc.brds.filter(function(it){
          return ~it.name.indexOf(val);
        });
        view.render();
        return view.get("brd-list").folder.fit();
      });
      root = ld$.find('[ld-scope=admin-menu]', 0);
      view = new ldView({
        root: root,
        action: {
          click: {
            "brd-bar": function(arg$){
              var node, ret;
              node = arg$.node;
              ret = view.get("brd-list").folder.toggle();
              return view.render('brd-list-toggle');
            },
            "grp-add": function(arg$){
              var node, i$, i, key;
              node = arg$.node;
              for (i$ = 0; i$ < 100; ++i$) {
                i = i$;
                key = "grp-" + Math.random().toString(36).substring(2);
                if (!toc.grps[key]) {
                  break;
                }
              }
              if (toc.grps[key]) {
                throw new ldError(1011);
              }
              toc.grps[key] = {
                key: key,
                name: "新分組"
              };
              view.render('grp-entry');
              return notify().now();
            }
          },
          input: {
            "brd-search": function(arg$){
              var node;
              node = arg$.node;
              return search(node.value);
            }
          }
        },
        text: {
          "org-name": function(){
            return toc.org.name;
          },
          "brd-name": function(){
            return toc.brd.name;
          },
          "brd-progress-text": function(){
            return "活動進行中";
          }
        },
        init: {
          "folder": function(arg$){
            var node;
            node = arg$.node;
            return node.folder = new ldui.Folder({
              root: node
            });
          }
        },
        handler: {
          "org-menu": function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', !toc.org.key);
          },
          "brd-progress": function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('text-success', true);
          },
          "brd-list-toggle": function(arg$){
            var node;
            node = arg$.node;
            if (view) {
              return node.classList.toggle('on', view.get("brd-list").classList.contains("show"));
            }
          },
          "brd": function(arg$){
            var node, ref$, ref1$;
            node = arg$.node;
            return node.classList.toggle('d-none', !(ref$ = !toc.brd.key) !== !(ref1$ = ~node.getAttribute('ld').indexOf('empty')) && (ref$ || ref1$));
          },
          "brds": function(arg$){
            var node, ref$, ref1$;
            node = arg$.node;
            return node.classList.toggle('d-none', !(ref$ = !toc.brds.length) !== !(ref1$ = ~node.getAttribute('ld').indexOf('empty')) && (ref$ || ref1$));
          },
          "brd-entry": {
            list: function(){
              return toc.brdsFiltered;
            },
            action: {
              click: function(arg$){
                var node, data;
                node = arg$.node, data = arg$.data;
                toc.brd = data;
                return view.render();
              }
            },
            handler: function(arg$){
              var node, data;
              node = arg$.node, data = arg$.data;
              ld$.find(node, 'span', 0).innerText = data.name;
              return ld$.find(node, '.text-sm', 0).innerText = data.description;
            }
          },
          "grp-entry": {
            list: function(){
              var k, ref$, v, results$ = [];
              for (k in ref$ = toc.grps || {}) {
                v = ref$[k];
                results$.push(v);
              }
              return results$;
            },
            init: function(arg$){
              var node, data;
              node = arg$.node, data = arg$.data;
              node.folder = new ldui.Folder({
                root: node
              });
              return node.view = new ldView({
                root: node,
                handler: {
                  name: function(arg$){
                    var node;
                    node = arg$.node;
                    return node.innerText = data.name;
                  }
                },
                action: {
                  click: {
                    "nav-tab": function(arg$){
                      var node;
                      node = arg$.node;
                      return setGroup(data);
                    }
                  }
                }
              });
            },
            handler: function(arg$){
              var node, data;
              node = arg$.node, data = arg$.data;
              return node.view.render('name');
            }
          }
        }
      });
      adapter = new sdbAdapter({
        path: ['group']
      });
      adapter.on('change', function(arg$){
        var ops, source;
        ops = arg$.ops, source = arg$.source;
        if (source) {
          return;
        }
        toc.grps = adapter.data
          ? JSON.parse(JSON.stringify(adapter.data))
          : {};
        if (!toc.grps) {
          toc.grps = {};
        }
        return view.render();
      });
      notify = debounce(500, function(){
        return adapter.update(function(){
          return JSON.parse(JSON.stringify(toc.grps));
        });
      });
      adapter.init({
        doc: toc.doc.brd,
        sdb: sdb
      });
      return loader.off();
    };
  });
  return ldc.app('adminGuard');
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}