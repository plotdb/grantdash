// Generated by LiveScript 1.3.0
var slice$ = [].slice;
ldc.register('adminPrjList', ['error', 'loader', 'notify', 'ldcvmgr', 'auth', 'sdbAdapter', 'adminPanel'], function(arg$){
  var error, loader, notify, ldcvmgr, auth, sdbAdapter, adminPanel, Ctrl;
  error = arg$.error, loader = arg$.loader, notify = arg$.notify, ldcvmgr = arg$.ldcvmgr, auth = arg$.auth, sdbAdapter = arg$.sdbAdapter, adminPanel = arg$.adminPanel;
  Ctrl = function(opt){
    var view, this$ = this;
    this.toc = opt.toc;
    this.evtHandler = {};
    this.data = [];
    adminPanel.on('active', function(arg$){
      var nav, name, panel;
      nav = arg$.nav, name = arg$.name, panel = arg$.panel;
      if (name === 'grp-list') {
        return ld$.fetch("/dash/api/brd/" + this$.toc.brd.slug + "/list", {
          method: 'GET'
        }, {
          type: 'json'
        }).then(function(it){
          this$.data = it;
          return this$.view.render();
        })['catch'](error());
      }
    });
    this.view = view = new ldView({
      root: opt.root,
      handler: {
        prj: {
          list: function(){
            return this$.data;
          },
          init: function(arg$){
            var node, local, data;
            node = arg$.node, local = arg$.local, data = arg$.data;
            return local.view = new ldView({
              context: data,
              root: node,
              action: {
                click: {
                  name: function(arg$){
                    var node, context;
                    node = arg$.node, context = arg$.context;
                    adminPanel.toggle({
                      nav: 'main',
                      name: 'grp-detail'
                    });
                    return this$.setPrj(context);
                  }
                }
              },
              handler: {
                name: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return node.innerText = context.name;
                },
                index: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return node.innerText = context.key;
                },
                ownername: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return node.innerText = context.ownername;
                },
                "budget-consume": function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                },
                "budget-detail": function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                }
              }
            });
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(Object.create(Object.prototype), {
    setPrj: function(prj){
      return this.fire('set-prj', prj);
    },
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}