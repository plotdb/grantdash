// Generated by LiveScript 1.3.0
var slice$ = [].slice;
ldc.register('adminPrjList', ['error', 'loader', 'notify', 'ldcvmgr', 'auth', 'sdbAdapter', 'adminPanel'], function(arg$){
  var error, loader, notify, ldcvmgr, auth, sdbAdapter, adminPanel, Ctrl;
  error = arg$.error, loader = arg$.loader, notify = arg$.notify, ldcvmgr = arg$.ldcvmgr, auth = arg$.auth, sdbAdapter = arg$.sdbAdapter, adminPanel = arg$.adminPanel;
  Ctrl = function(opt){
    var lc, renderDebounced, view, this$ = this;
    this.toc = opt.toc;
    this.evtHandler = {};
    this.data = [];
    adminPanel.on('active', function(arg$){
      var nav, name, panel;
      nav = arg$.nav, name = arg$.name, panel = arg$.panel;
      if (name === 'grp-list') {
        return ld$.fetch("/dash/api/brd/" + this$.toc.brd.slug + "/list", {
          method: 'GET'
        }, {
          params: {
            grp: this$.grp.key
          },
          type: 'json'
        }).then(function(it){
          this$.data = it;
          this$.data.map(function(it){
            return it.info = it.detail.info;
          });
          return this$.view.render();
        })['catch'](error());
      }
    });
    lc = {};
    renderDebounced = debounce(function(){
      return this$.view.render('prj');
    });
    this.view = view = new ldView({
      root: opt.root,
      action: {
        input: {
          "search-input": function(arg$){
            var node;
            node = arg$.node;
            return lc.keyword = node.value;
          }
        },
        keypress: {
          "search-input": function(arg$){
            var node, evt;
            node = arg$.node, evt = arg$.evt;
            if (evt.keyCode === 13) {
              return this$.view.render();
            }
          }
        },
        click: {
          search: function(){
            return this$.view.render();
          },
          download: function(arg$){
            var node, n;
            node = arg$.node;
            n = node.getAttribute('data-name');
            return ld$.fetch("/dash/api/brd/" + this$.toc.brd.slug + "/grp/" + this$.grp.key + "/prjs", {
              method: 'GET'
            }, {
              type: 'json'
            }).then(function(ret){
              var blob, url, a;
              ret == null && (ret = {});
              if (n === 'mail') {
                ret = ret.map(function(it){
                  return {
                    username: it.username,
                    name: it.name
                  };
                });
              }
              blob = new Blob([JSON.stringify(ret)], {
                type: "application/json"
              });
              url = URL.createObjectURL(blob);
              a = ld$.create({
                name: 'a',
                attr: {
                  href: url,
                  download: "projects-" + n + ".json"
                }
              });
              document.body.appendChild(a);
              a.click();
              document.body.removeChild(a);
              return a.remove();
            })['catch'](error());
          }
        }
      },
      handler: {
        empty: function(arg$){
          var node;
          node = arg$.node;
          return node.classList.toggle('d-none', this$.data.filter(function(it){
            return it.slug;
          }).length);
        },
        prj: {
          list: function(){
            return this$.data.filter(function(it){
              return it.slug && (!lc.keyword || ~[it.name, (it.info || (it.info = {})).teamname, it.username, it.ownername].filter(function(it){
                return it;
              }).join(' ').indexOf(lc.keyword));
            });
          },
          init: function(arg$){
            var node, local, data;
            node = arg$.node, local = arg$.local, data = arg$.data;
            return local.view = new ldView({
              context: data,
              root: node,
              action: {
                click: {
                  'delete': function(arg$){
                    var node, context;
                    node = arg$.node, context = arg$.context;
                    if (node.classList.contains('running')) {
                      return;
                    }
                    return ldcvmgr.get('confirm-deletion').then(function(it){
                      if (it !== 'yes') {
                        return;
                      }
                      node.classList.toggle('running', true);
                      return ld$.fetch("/dash/api/prj/" + context.slug, {
                        method: 'delete'
                      }, {
                        type: 'json'
                      })['finally'](function(){
                        return node.classList.toggle('running', false);
                      }).then(function(){
                        var idx;
                        notify.send('success', "成功刪除了「" + context.name + "」提案");
                        idx = this$.data.indexOf(context);
                        if (~idx) {
                          this$.data.splice(idx, 1);
                        }
                        return this$.view.render();
                      })['catch'](error());
                    });
                  },
                  name: function(arg$){
                    var node, context;
                    node = arg$.node, context = arg$.context;
                    adminPanel.toggle({
                      nav: 'main',
                      name: 'grp-detail'
                    });
                    return this$.setPrj(context);
                  }
                }
              },
              text: {
                name: function(arg$){
                  var context;
                  context = arg$.context;
                  return context.name || '(未命名的提案)';
                },
                index: function(arg$){
                  var context;
                  context = arg$.context;
                  return context.key;
                },
                ownername: function(arg$){
                  var context;
                  context = arg$.context;
                  return (context.info || (context.info = {})).teamname || context.ownername || '';
                },
                username: function(arg$){
                  var context;
                  context = arg$.context;
                  return context.ownername || '';
                }
              },
              handler: {
                "budget-consume": function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                },
                "budget-detail": function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                },
                avatar: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return node.style.background = "url(/s/avatar/" + context.owner + ".png)";
                }
              }
            });
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(Object.create(Object.prototype), {
    setData: function(grp){
      return this.grp = grp;
    },
    setPrj: function(prj){
      return this.fire('set-prj', prj);
    },
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}