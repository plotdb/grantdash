// Generated by LiveScript 1.3.0
ldc.register('adminStage', ['sdbAdapter'], function(arg$){
  var sdbAdapter, Ctrl;
  sdbAdapter = arg$.sdbAdapter;
  Ctrl = function(opt){
    var root, obj, view, isValid, stage, viewConfig, this$ = this;
    this.opt = opt;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.obj = obj = {
      cfg: null,
      update: function(){
        return this$.opsOut(function(){
          return this$.obj.cfg;
        });
      }
    };
    this.view = view = {};
    this.view.update = function(){
      this$.view.all.render();
      return this$.view.updateStage().now();
    };
    this.view.updateStage = debounce(100, function(){
      if (this$.reb.node.dragging) {
        return this$.view.updateStage();
      } else {
        return this$.view.stage.render();
      }
    });
    isValid = function(n){
      var o;
      if (!n) {
        return false;
      }
      if ((o = stage.get()) && o.name === n) {
        return true;
      }
      if (~obj.cfg.stage.map(function(it){
        return it.name;
      }).indexOf(n)) {
        return false;
      }
      return true;
    };
    this.stage = stage = {
      list: function(){
        var ref$;
        return (ref$ = obj.cfg).stage || (ref$.stage = []);
      },
      key: 'default',
      _key: function(k){
        return k = k != null
          ? k
          : this.key || 'default';
      },
      init: function(){
        if (!Array.isArray(obj.cfg.stage)) {
          return obj.cfg.stage = [{
            key: 'default'
          }];
        }
      },
      is: function(k){
        return this._key() === k;
      },
      isDefault: function(){
        return this._key() === 'default';
      },
      insertBefore: function(a, b){
        var st, ia, o, ib;
        st = obj.cfg.stage;
        ia = st.map(function(it){
          return it.key;
        }).indexOf(a);
        o = st.splice(ia, 1)[0];
        ib = b != null
          ? st.map(function(it){
            return it.key;
          }).indexOf(b)
          : st.length;
        return st.splice(ib, 0, o);
      },
      get: function(k){
        var this$ = this;
        return obj.cfg.stage.filter(function(it){
          return it.key === this$._key(k);
        })[0];
      },
      add: function(o){
        o == null && (o = {});
        if (this.get(o.key)) {
          return;
        }
        obj.cfg.stage.push(o);
        return this.key = o.key;
      },
      del: function(k){
        var idx, ref$;
        if ((k = this._key(k)) === 'default') {
          return;
        }
        idx = obj.cfg.stage.map(function(it){
          return it.key;
        }).indexOf(k);
        obj.cfg.stage.splice(idx, 1);
        if (k === this.key) {
          return this.key = ((ref$ = obj.cfg.stage)[ref$.length - 1] || {}).key || 'default';
        }
      },
      val: function(arg$){
        var name, value, key, o;
        name = arg$.name, value = arg$.value, key = arg$.key;
        key = this._key(key);
        if (!(o = obj.cfg.stage.filter(function(it){
          return it.key === key;
        })[0])) {
          return;
        }
        return value != null
          ? o[name] = value
          : o[name];
      },
      use: function(k){
        return this.key = k;
      }
    };
    viewConfig = {
      root: root,
      init: {},
      handler: {},
      action: {
        click: {},
        input: {}
      },
      initRender: false
    };
    import$(viewConfig.action.input, {
      "stage-name": function(arg$){
        var node, name, invalid;
        node = arg$.node;
        name = (node.value || '').trim();
        invalid = !isValid(name);
        node.classList.toggle('is-invalid', invalid);
        if (invalid) {
          return;
        }
        stage.val({
          name: 'name',
          value: node.value
        });
        obj.update();
        return view.update();
      }
    });
    import$(viewConfig.init, {
      stages: function(arg$){
        var node, evt, reb;
        node = arg$.node, evt = arg$.evt;
        return this$.reb = reb = new reblock({
          root: node,
          action: {
            beforeMoveNode: function(arg$){
              var src, des, ib;
              src = arg$.src, des = arg$.des, ib = arg$.ib;
            },
            afterMoveNode: function(arg$){
              var src, des, ib;
              src = arg$.src, des = arg$.des, ib = arg$.ib;
              stage.insertBefore(src._data.key || 'default', ib ? ib._data.key : null);
              return obj.update();
            }
          }
        });
      }
    });
    import$(viewConfig.action.click, {
      stages: function(arg$){
        var node, evt, n, type, key;
        node = arg$.node, evt = arg$.evt;
        n = evt.target;
        if (!(type = n.getAttribute('data-type'))) {
          return;
        }
        if (type === 'new-stage') {
          key = Math.random().toString(36).substring(2);
          stage.add({
            name: "新階段",
            key: key,
            desc: "自訂時段",
            config: {}
          });
          obj.update();
        } else {
          stage.use(n.getAttribute('data-key'));
        }
        return view.update();
      },
      "delete-stage": function(arg$){
        var node, evt;
        node = arg$.node, evt = arg$.evt;
        stage.del();
        obj.update();
        return view.update();
      }
    });
    import$(viewConfig.handler, {
      "default-view": function(arg$){
        var node;
        node = arg$.node;
        return node.classList.toggle('d-none', !stage.isDefault());
      },
      "custom-view": function(arg$){
        var node;
        node = arg$.node;
        return node.classList.toggle('d-none', stage.isDefault());
      },
      "stage-name": function(arg$){
        var node, name;
        node = arg$.node;
        node.value = stage.val({
          name: 'name'
        }) || '預設';
        name = (node.value || '').trim();
        return node.classList.toggle('is-invalid', !isValid(name));
      }
    });
    import$(viewConfig.action.input, {
      time: function(arg$){
        var node;
        node = arg$.node;
        stage.val({
          name: node.getAttribute('data-name'),
          value: node.value
        });
        return obj.update();
      }
    });
    import$(viewConfig.init, {
      time: function(arg$){
        var node;
        node = arg$.node;
        return tail.DateTime(node);
      }
    });
    import$(viewConfig.handler, {
      time: function(arg$){
        var node;
        node = arg$.node;
        return node.value = stage.val({
          name: node.getAttribute('data-name')
        }) || '';
      }
    });
    import$(viewConfig.action.click, {
      'switch': function(arg$){
        var node, c, ref$;
        node = arg$.node;
        node.classList.toggle('on');
        c = (ref$ = stage.get()).config || (ref$.config = {});
        c[node.getAttribute('data-name')] = node.classList.contains('on');
        return obj.update();
      }
    });
    import$(viewConfig.handler, {
      'switch': function(arg$){
        var node, c;
        node = arg$.node;
        c = stage.val({
          name: 'config'
        }) || {};
        return node.classList.toggle('on', !!c[node.getAttribute('data-name')]);
      }
    });
    this.view.all = new ldView(viewConfig);
    this.view.stage = new ldView({
      root: root,
      initRender: false,
      handler: {
        stage: {
          list: function(){
            return stage.list();
          },
          handler: function(arg$){
            var node, data, idx, key, x$, n;
            node = arg$.node, data = arg$.data, idx = arg$.idx;
            key = data.key || 'default';
            x$ = n = ld$.find(node, 'a', 0);
            x$.innerText = data.name || '預設';
            x$.classList.toggle('active', stage.is(key));
            x$.setAttribute('data-key', key);
            x$.setAttribute('data-type', 'tab');
            return x$;
          }
        }
      }
    });
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    opsIn: function(arg$){
      var data, ops, source;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.obj.cfg = JSON.parse(JSON.stringify(data || {}));
      this.stage.init();
      return this.view.update();
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}