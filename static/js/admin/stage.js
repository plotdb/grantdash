// Generated by LiveScript 1.3.0
ldc.register('adminStage', ['sdbAdapter'], function(arg$){
  var sdbAdapter, Ctrl;
  sdbAdapter = arg$.sdbAdapter;
  Ctrl = function(opt){
    var root, obj, updateData, isValid, viewConfig, view, this$ = this;
    this.opt = opt;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.obj = obj = {
      idx: 'default',
      cfg: null
    };
    updateData = function(){
      return this$.opsOut(function(){
        return this$.obj.cfg;
      });
    };
    isValid = function(n){
      var k, v;
      return n && (!~(function(){
        var ref$, results$ = [];
        for (k in ref$ = obj.cfg.stage) {
          v = ref$[k];
          results$.push(v.name);
        }
        return results$;
      }()).indexOf(n) || obj.cfg.stage[obj.idx].name === n);
    };
    viewConfig = {
      root: root,
      init: {},
      handler: {},
      action: {
        click: {},
        input: {}
      },
      initRender: false
    };
    import$(viewConfig.action.input, {
      "stage-name": function(arg$){
        var node, name, invalid, k, v;
        node = arg$.node;
        name = (node.value || '').trim();
        invalid = !isValid(name);
        (function(){
          var ref$, results$ = [];
          for (k in ref$ = obj.cfg.stage) {
            v = ref$[k];
            results$.push(v.name);
          }
          return results$;
        }()).indexOf(name);
        node.classList.toggle('is-invalid', invalid);
        if (invalid) {
          return;
        }
        obj.cfg.stage[obj.idx].name = node.value;
        updateData();
        return view.render();
      }
    });
    import$(viewConfig.action.click, {
      stages: function(arg$){
        var node, evt, n, type, key;
        node = arg$.node, evt = arg$.evt;
        n = evt.target;
        if (!(type = n.getAttribute('data-type'))) {
          return;
        }
        if (type === 'new-stage') {
          key = Math.random().toString(36).substring(2);
          obj.cfg.stage[key] = {
            name: "新階段",
            key: key,
            desc: "自訂時段",
            config: {}
          };
          updateData();
        } else {
          obj.idx = n.getAttribute('data-key');
        }
        return view.render();
      },
      "delete-stage": function(arg$){
        var node, evt, k;
        node = arg$.node, evt = arg$.evt;
        if (obj.idx === 'default') {
          return;
        }
        delete obj.cfg.stage[obj.idx];
        obj.idx = (function(){
          var results$ = [];
          for (k in obj.cfg.stage) {
            results$.push(k);
          }
          return results$;
        }())[0] || 'default';
        updateData();
        return view.render();
      }
    });
    import$(viewConfig.handler, {
      "default-view": function(arg$){
        var node;
        node = arg$.node;
        return node.classList.toggle('d-none', obj.idx !== 'default');
      },
      "custom-view": function(arg$){
        var node;
        node = arg$.node;
        return node.classList.toggle('d-none', obj.idx === 'default');
      },
      "stage-name": function(arg$){
        var node, name;
        node = arg$.node;
        node.value = obj.cfg.stage[obj.idx].name || '預設';
        name = (node.value || '').trim();
        return node.classList.toggle('is-invalid', !isValid(name));
      },
      stage: {
        list: function(){
          var k, ref$, v, results$ = [];
          for (k in ref$ = obj.cfg.stage) {
            v = ref$[k];
            results$.push(v);
          }
          return results$;
        },
        handler: function(arg$){
          var node, data, idx, key, x$, n;
          node = arg$.node, data = arg$.data, idx = arg$.idx;
          key = data.key || 'default';
          x$ = n = ld$.find(node, 'a', 0);
          x$.innerText = data.name || '預設';
          x$.classList.toggle('active', key === obj.idx);
          x$.setAttribute('data-key', key);
          x$.setAttribute('data-type', 'tab');
          return x$;
        }
      }
    });
    import$(viewConfig.action.input, {
      time: function(arg$){
        var node;
        node = arg$.node;
        obj.cfg.stage[obj.idx][node.getAttribute('data-name')] = node.value;
        return updateData();
      }
    });
    import$(viewConfig.init, {
      time: function(arg$){
        var node;
        node = arg$.node;
        return tail.DateTime(node);
      }
    });
    import$(viewConfig.handler, {
      time: function(arg$){
        var node;
        node = arg$.node;
        return node.value = obj.cfg.stage[obj.idx][node.getAttribute('data-name')] || '';
      }
    });
    import$(viewConfig.action.click, {
      'switch': function(arg$){
        var node, c, ref$;
        node = arg$.node;
        node.classList.toggle('on');
        c = (ref$ = obj.cfg.stage[obj.idx]).config || (ref$.config = {});
        if (!c) {
          return;
        }
        c[node.getAttribute('data-name')] = node.classList.contains('on');
        return updateData();
      }
    });
    import$(viewConfig.handler, {
      'switch': function(arg$){
        var node, ref$;
        node = arg$.node;
        return node.classList.toggle('on', !!((ref$ = obj.cfg.stage[obj.idx]).config || (ref$.config = {}))[node.getAttribute('data-name')]);
      }
    });
    this.view = view = new ldView(viewConfig);
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    opsIn: function(arg$){
      var data, ops, source, ref$, ref1$, k;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.obj.cfg = JSON.parse(JSON.stringify(data || {}));
      (ref$ = (ref1$ = this.obj.cfg).stage || (ref1$.stage = {}))['default'] || (ref$['default'] = {});
      if (!this.obj.cfg.stage[this.obj.idx]) {
        this.obj.idx = (function(){
          var results$ = [];
          for (k in this.obj.cfg.stage) {
            results$.push(k);
          }
          return results$;
        }.call(this))[0] || 'default';
      }
      return this.view.render();
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}