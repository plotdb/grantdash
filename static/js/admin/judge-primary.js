// Generated by LiveScript 1.3.0
ldc.register('adminJudgePrimary', ['ldcvmgr', 'auth', 'sdbAdapter', 'error', 'adminPanel'], function(arg$){
  var ldcvmgr, auth, sdbAdapter, error, adminPanel, Ctrl;
  ldcvmgr = arg$.ldcvmgr, auth = arg$.auth, sdbAdapter = arg$.sdbAdapter, error = arg$.error, adminPanel = arg$.adminPanel;
  Ctrl = function(opt){
    var root, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.path = opt.path;
    this.brd = opt.brd;
    this.grp = null;
    this.view = {};
    this.data = {};
    this.obj = {};
    adminPanel.on('active', function(arg$){
      var nav, name, panel;
      nav = arg$.nav, name = arg$.name, panel = arg$.panel;
      if (!(nav === 'grp-judge' && name === 'primary')) {
        return;
      }
      return this$.prepare().then(function(){
        return this$.view.render();
      })['catch'](error());
    });
    this.view = new ldView({
      root: this.root,
      init: {
        ldbar: function(arg$){
          var node, local;
          node = arg$.node, local = arg$.local;
          return local.ldbar = new ldBar(node);
        }
      },
      action: {
        change: {
          choice: function(arg$){
            var node, n;
            node = arg$.node;
            n = node.getAttribute('data-name');
            this$.obj[n] = node.value;
            this$.update();
            this$.getProgress();
            return this$.view.render('primary-judge');
          }
        },
        click: {
          'switch': function(arg$){
            var node, n;
            node = arg$.node;
            n = node.getAttribute('data-name');
            node.classList.toggle('on');
            this$.obj[n] = node.classList.contains('on');
            this$.update();
            this$.getProgress();
            return this$.view.render('primary-judge');
          }
        }
      },
      handler: {
        ldbar: function(arg$){
          var local;
          local = arg$.local;
          return local.ldbar.set(Math.floor(100 * (this$.data.progress || 0)));
        },
        choice: function(arg$){
          var node, n;
          node = arg$.node;
          n = node.getAttribute('data-name');
          return node.value = this$.obj[n] || '';
        },
        'switch': function(arg$){
          var node, n;
          node = arg$.node;
          n = node.getAttribute('data-name');
          return node.classList.toggle('on', !!this$.obj[n]);
        },
        "primary-user-link": function(arg$){
          var node;
          node = arg$.node;
          if (!this$.grp) {
            return;
          }
          return node.setAttribute('href', "/dash/brd/" + this$.brd.slug + "/grp/" + this$.grp.key + "/judge/primary/user");
        },
        "primary-all-link": function(arg$){
          var node;
          node = arg$.node;
          if (!this$.grp) {
            return;
          }
          return node.setAttribute('href', "/dash/brd/" + this$.brd.slug + "/grp/" + this$.grp.key + "/judge/primary/all");
        },
        "primary-judge": {
          list: function(){
            var ref$;
            return (ref$ = this$.data).users || (ref$.users = []);
          },
          init: function(arg$){
            var node, local, data;
            node = arg$.node, local = arg$.local, data = arg$.data;
            node.classList.toggle('d-none', false);
            return local.view = new ldView({
              root: node,
              context: data,
              handler: {
                name: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return node.innerText = context.name;
                },
                "progress-bar": function(arg$){
                  var node, context, v;
                  node = arg$.node, context = arg$.context;
                  v = +node.getAttribute('data-name');
                  context.count || (context.count = {});
                  return node.style.width = 100 * (context.count[v] || 0) / context.count.total + "%";
                }
              }
            });
          },
          handler: function(arg$){
            var local, data;
            local = arg$.local, data = arg$.data;
            local.view.setContext(data);
            return local.view.render();
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    opsIn: function(arg$){
      var data, ops, source;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.obj = JSON.parse(JSON.stringify(data || {}));
      return this.view.update();
    },
    update: function(){
      var this$ = this;
      return this.opsOut(function(){
        return this$.obj;
      });
    },
    prepare: function(){
      var this$ = this;
      return ld$.fetch("/dash/api/brd/" + this.brd.slug + "/grp/" + this.grp.key + "/judge/primary/all", {
        method: 'GET'
      }, {
        type: 'json'
      }).then(function(it){
        var data, ref$, ref1$;
        this$.data = data = it || {};
        (ref$ = (ref1$ = this$.data).data || (ref1$.data = {})).user || (ref$.user = {});
        return this$.getProgress();
      })['catch'](error());
    },
    getProgress: function(){
      var data, filterName, prjs, total, done, this$ = this;
      data = this.data;
      filterName = [];
      if (this.obj["filter-criteria"]) {
        filterName.push('criteria');
      }
      prjs = data.prjs || (data.prjs = []);
      if (filterName.length) {
        prjs = (prjs || []).filter(function(p){
          return filterName.reduce(function(a, b){
            var ref$;
            return a && ((ref$ = p.system || (p.system = {})).badge || (ref$.badge = {}))[b];
          }, true);
        });
      }
      total = ((data.users || (data.users = [])).length || 1) * (prjs.length || 1);
      done = 0;
      (data.users || (data.users = [])).map(function(u){
        var count, obj, ref$;
        count = {
          0: 0,
          1: 0,
          2: 0,
          total: prjs.length || 1
        };
        obj = (ref$ = data.data.user[u.key] || {}).prj || (ref$.prj = {});
        prjs.map(function(p){
          var v;
          if ((v = (obj[p.key] || {}).v) != null) {
            return count[v]++;
          }
        });
        done = done + count[0] + (this$.obj["option-type"] === '2way'
          ? 0
          : count[1]) + count[2];
        return u.count = count;
      });
      return data.progress = done / total;
    },
    setData: function(grp){
      var this$ = this;
      this.grp = grp;
      return this.prepare().then(function(){
        return this$.view.render();
      })['catch'](error());
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}