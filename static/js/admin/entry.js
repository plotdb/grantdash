// Generated by LiveScript 1.3.0
ldc.register('adminEntry', ['sdbAdapter'], function(arg$){
  var sdbAdapter, Ctrl;
  sdbAdapter = arg$.sdbAdapter;
  Ctrl = function(opt){
    var root, obj, view, this$ = this;
    this.opt = opt;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.obj = obj = {
      active: null,
      data: {
        entries: []
      }
    };
    this.view = view = new ldView({
      root: root,
      action: {
        input: {
          "entry-data": function(arg$){
            var node, evt, name;
            node = arg$.node, evt = arg$.evt;
            name = node.getAttribute('data-name');
            if (obj.active) {
              obj.active[name] = node.value;
            }
            view.render();
            return this$.update();
          }
        },
        click: {
          "delete-entry": function(arg$){
            var node, evt, idx;
            node = arg$.node, evt = arg$.evt;
            if (!~(idx = obj.data.entries.indexOf(obj.active))) {
              return;
            }
            obj.data.entries.splice(idx, 1);
            obj.active = obj.data.entries[idx] || obj.data.entries[idx - 1];
            view.render();
            return this$.update();
          },
          "new-entry": function(arg$){
            var node, evt, newData;
            node = arg$.node, evt = arg$.evt;
            obj.data.entries.push(newData = {
              name: "新項目",
              description: "未準備詳細描述的項目"
            });
            obj.active = newData;
            view.render();
            return this$.update();
          },
          'switch': function(arg$){
            var node, name, ref$;
            node = arg$.node;
            node.classList.toggle('on');
            name = node.getAttribute('data-name');
            if (obj.active) {
              ((ref$ = obj.active).config || (ref$.config = {}))[name] = node.classList.contains('on');
            }
            return this$.update();
          }
        }
      },
      handler: {
        'switch': function(arg$){
          var node, name, ref$;
          node = arg$.node;
          name = node.getAttribute('data-name');
          return node.classList.toggle('on', obj.active ? !!((ref$ = obj.active).config || (ref$.config = {}))[name] : false);
        },
        "entry-data": function(arg$){
          var node, name;
          node = arg$.node;
          name = node.getAttribute('data-name');
          return node.value = (obj.active || {})[name] || '';
        },
        "empty": function(arg$){
          var node;
          node = arg$.node;
          return node.classList.toggle('d-none', obj.data.entries.length);
        },
        entry: {
          list: function(){
            return obj.data.entries;
          },
          action: {
            click: function(arg$){
              var node, data, evt;
              node = arg$.node, data = arg$.data, evt = arg$.evt;
              obj.active = data;
              return view.render();
            }
          },
          handler: function(arg$){
            var node, data, n, ret;
            node = arg$.node, data = arg$.data;
            n = ld$.find(node, '.nav-link', 0);
            n.classList.toggle('active', data === obj.active);
            ret = ld$.find(n, '[ld=entry-text]').map(function(it){
              return it.innerText = data[it.getAttribute('data-name')] || '';
            });
            if (ret.length === 0) {
              return n.innerText = data.name;
            }
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    update: function(){
      var this$ = this;
      return this.opsOut(function(){
        return this$.obj.data;
      });
    },
    opsIn: function(arg$){
      var data, ops, source, idx, ref$;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      if (this.obj.data) {
        idx = this.obj.data.entries.indexOf(this.obj.active);
      }
      this.obj.data = JSON.parse(JSON.stringify(data || {}));
      this.obj.active = ((ref$ = this.obj.data).entries || (ref$.entries = []))[!~idx ? 0 : idx] || {};
      return this.view.render();
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}