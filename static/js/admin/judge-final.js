// Generated by LiveScript 1.3.0
ldc.register('adminJudgeFinal', ['ldcvmgr', 'auth', 'sdbAdapter', 'error', 'adminPanel'], function(arg$){
  var ldcvmgr, auth, sdbAdapter, error, adminPanel, Ctrl;
  ldcvmgr = arg$.ldcvmgr, auth = arg$.auth, sdbAdapter = arg$.sdbAdapter, error = arg$.error, adminPanel = arg$.adminPanel;
  Ctrl = function(opt){
    var root, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.path = opt.path;
    this.brd = opt.brd;
    this.grp = null;
    this.data = {};
    this.obj = {};
    adminPanel.on('active', function(arg$){
      var nav, name, panel;
      nav = arg$.nav, name = arg$.name, panel = arg$.panel;
      if (!(nav === 'grp-judge' && name === 'final')) {
        return;
      }
      return this$.prepare().then(function(){
        return this$.view.render();
      })['catch'](error());
    });
    this.view = new ldView({
      root: this.root,
      action: {
        click: {
          'switch': function(arg$){
            var node, n;
            node = arg$.node;
            n = node.getAttribute('data-name');
            node.classList.toggle('on');
            this$.obj[n] = node.classList.contains('on');
            return this$.update();
          }
        }
      },
      handler: {
        'switch': function(arg$){
          var node, n;
          node = arg$.node;
          n = node.getAttribute('data-name');
          return node.classList.toggle('on', !!this$.obj[n]);
        },
        "final-user-link": function(arg$){
          var node;
          node = arg$.node;
          if (!this$.grp) {
            return;
          }
          return node.setAttribute('href', "/dash/brd/" + this$.brd.slug + "/grp/" + this$.grp.key + "/judge/final/user");
        },
        "final-all-link": function(arg$){
          var node;
          node = arg$.node;
          if (!this$.grp) {
            return;
          }
          return node.setAttribute('href', "/dash/brd/" + this$.brd.slug + "/grp/" + this$.grp.key + "/judge/final/all");
        }
        /*"final-judge": do
          list: ~> @data.[]users
          init: ({node, local, data}) ~>
            node.classList.toggle \d-none, false
            local.view = new ldView do
              root: node,
              context: data
              handler: do
                name: ({node, context}) ~>
                  node.innerText = context.name
                  #node.setAttribute \href, "/dash/brd/#{@brd.slug}/grp/#{@grp.key}/judge/final/user/#{context.key}"
                "progress-bar": ({node, context}) -> node.style.width = "#{context.percent}%"
          handler: ({local, data}) ->
            local.view.setContext data
            local.view.render!
        */
      }
    });
    return this;
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    opsIn: function(arg$){
      var data, ops, source;
      data = arg$.data, ops = arg$.ops, source = arg$.source;
      if (source) {
        return;
      }
      this.obj = JSON.parse(JSON.stringify(data || {}));
      return this.view.update();
    },
    update: function(){
      var this$ = this;
      return this.opsOut(function(){
        return this$.obj;
      });
    },
    prepare: function(){
      var this$ = this;
      return ld$.fetch("/dash/api/brd/" + this.brd.slug + "/grp/" + this.grp.key + "/judge/final/all", {
        method: 'GET'
      }, {
        type: 'json'
      }).then(function(it){
        var data, ref$, ref1$, prjs;
        this$.data = data = it || {};
        (ref$ = (ref1$ = this$.data).data || (ref1$.data = {})).user || (ref$.user = {});
        prjs = data.prjs;
        return (data.users || []).map(function(u){
          var ret;
          ret = prjs.filter(function(p){
            var v, ref$, ref1$, key$, ref2$, ref3$, key1$;
            v = (ref$ = (ref1$ = (ref2$ = (ref3$ = data.data.user)[key1$ = u.key] || (ref3$[key1$] = {})).prj || (ref2$.prj = {}))[key$ = p.key] || (ref1$[key$] = {})).v || (ref$.v = {});
            return !((ref$ = (ref1$ = this$.grp).grade || (ref1$.grade = {})).entries || (ref$.entries = [])).filter(function(g){
              return !(v[g.key] != null) || v[g.key] === '';
            }).length;
          });
          return u.percent = ret.length * 100 / prjs.length;
        });
      })['catch'](error());
    },
    setData: function(grp){
      var this$ = this;
      this.grp = grp;
      return this.prepare().then(function(){
        return this$.view.render();
      })['catch'](error());
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}