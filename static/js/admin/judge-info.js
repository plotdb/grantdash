// Generated by LiveScript 1.3.0
ldc.register('adminJudgeInfo', ['ldcvmgr', 'auth', 'sdbAdapter', 'error', 'adminPanel'], function(arg$){
  var ldcvmgr, auth, sdbAdapter, error, adminPanel, Ctrl;
  ldcvmgr = arg$.ldcvmgr, auth = arg$.auth, sdbAdapter = arg$.sdbAdapter, error = arg$.error, adminPanel = arg$.adminPanel;
  Ctrl = function(opt){
    var root, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.brd = opt.brd;
    this.grp = null;
    this.view = {};
    this.prepare = {};
    this.data = {};
    adminPanel.on('active', function(arg$){
      var nav, name, panel;
      nav = arg$.nav, name = arg$.name, panel = arg$.panel;
      if (!(nav === 'grp-judge')) {
        return;
      }
      if (name === 'criteria') {
        return this$.view.criteria.render();
      } else if (name === 'primary') {
        return this$.prepare.primary().then(function(){
          return this$.view.primary.render();
        });
      }
    });
    this.view.criteria = new ldView({
      root: this.root,
      handler: {
        "criteria-user-link": function(arg$){
          var node;
          node = arg$.node;
          if (!this$.grp) {
            return;
          }
          return node.setAttribute('href', "/dash/brd/" + this$.brd.slug + "/grp/" + this$.grp.key + "/judge/criteria/user");
        },
        "criteria-all-link": function(arg$){
          var node;
          node = arg$.node;
          if (!this$.grp) {
            return;
          }
          return node.setAttribute('href', "/dash/brd/" + this$.brd.slug + "/grp/" + this$.grp.key + "/judge/criteria/all");
        }
      }
    });
    this.prepare.primary = function(){
      return ld$.fetch("/dash/api/brd/" + this$.brd.slug + "/grp/" + this$.grp.key + "/judge/primary/user", {
        method: 'GET'
      }, {
        type: 'json'
      }).then(function(it){
        var data;
        this$.data.primary = data = it;
        this$.data.primary.users = data.users.map(function(u){
          var count, obj, ref$;
          count = {
            0: 0,
            1: 0,
            2: 0,
            total: 0
          };
          obj = (ref$ = data.data.user[u.key] || {}).prj || (ref$.prj = {});
          data.prjs.map(function(p){
            var v;
            if ((v = (obj[p.key] || {}).v) != null) {
              return count[v]++;
            }
          });
          u.count = count;
          count.total = count[0] + count[1] + count[2] || 1;
          return u;
        });
        return this$;
      })['catch'](error());
    };
    this.view.primary = new ldView({
      root: this.root,
      handler: {
        "primary-user-link": function(arg$){
          var node;
          node = arg$.node;
          if (!this$.grp) {
            return;
          }
          return node.setAttribute('href', "/dash/brd/" + this$.brd.slug + "/grp/" + this$.grp.key + "/judge/primary/user");
        },
        "primary-all-link": function(arg$){
          var node;
          node = arg$.node;
          if (!this$.grp) {
            return;
          }
          return node.setAttribute('href', "/dash/brd/" + this$.brd.slug + "/grp/" + this$.grp.key + "/judge/primary/all");
        },
        "primary-judge": {
          list: function(){
            var ref$, ref1$;
            return (ref$ = (ref1$ = this$.data).primary || (ref1$.primary = {})).users || (ref$.users = []);
          },
          init: function(arg$){
            var node, local, data;
            node = arg$.node, local = arg$.local, data = arg$.data;
            node.classList.toggle('d-none', false);
            return local.view = new ldView({
              root: node,
              context: data,
              handler: {
                name: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return node.innerText = context.name;
                },
                "progress-bar": function(arg$){
                  var node, context, v;
                  node = arg$.node, context = arg$.context;
                  v = +node.getAttribute('data-name');
                  return node.style.width = 100 * context.count[v] / context.count.total + "%";
                }
              }
            });
          },
          handler: function(arg$){
            var local, data;
            local = arg$.local, data = arg$.data;
            local.view.setContext = data;
            return local.view.render();
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(Object.create(Object.prototype), {
    prepare: function(){},
    setData: function(grp){
      return this.grp = grp;
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}