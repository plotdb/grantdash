// Generated by LiveScript 1.3.0
ldc.register('adminNavbar', ['sdbAdapter'], function(arg$){
  var sdbAdapter, Ctrl;
  sdbAdapter = arg$.sdbAdapter;
  Ctrl = function(opt){
    var root, obj, updateData, renderFolder, reb, this$ = this;
    this.opt = opt;
    this.view = {};
    this.node = {};
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.obj = obj = {
      tree: {
        children: [
          {
            name: "活動辦法",
            url: "/about"
          }, {
            name: "關於我們"
          }, {
            name: "歷屆活動",
            toggle: true,
            children: [
              {
                name: "2018春季"
              }, {
                name: "2018秋季"
              }
            ]
          }, {
            name: "成果報告"
          }
        ]
      }
    };
    this.node = {
      view: ld$.find(this.root, '[ld=folder-root]', 0),
      sample: ld$.find(this.root, '[ld-scope=folder-sample]', 0)
    };
    this.view.sample = new ldView({
      root: this.node.sample,
      handler: {
        item: function(){},
        folder: function(){}
      }
    });
    updateData = function(){
      return this$.ops.out(function(){
        return obj.tree;
      });
    };
    renderFolder = function(arg$){
      var node, data, parent, rn, rootData, view;
      node = arg$.node, data = arg$.data, parent = arg$.parent;
      rn = node;
      rootData = data;
      return view = new ldView({
        root: node,
        action: {
          input: {
            name: function(arg$){
              var node, evt;
              node = arg$.node, evt = arg$.evt;
              return data.name = node.value;
            },
            url: function(arg$){
              var node, evt;
              node = arg$.node, evt = arg$.evt;
              return data.url = node.value;
            }
          },
          click: {
            clone: function(arg$){
              var node, evt, idx;
              node = arg$.node, evt = arg$.evt;
              idx = rn.pdata.children.indexOf(data);
              rn.pdata.children.splice(idx + 1, 0, JSON.parse(JSON.stringify(data)));
              this$.view.root.render();
              return console.log(JSON.stringify(obj.tree));
            },
            'delete': function(arg$){
              var node, evt, idx;
              node = arg$.node, evt = arg$.evt;
              idx = rn.pdata.children.indexOf(data);
              rn.pdata.children.splice(idx, 1);
              return this$.view.root.render();
            },
            "toggle-fold": function(arg$){
              var node, evt, idx, children, newData;
              node = arg$.node, evt = arg$.evt;
              if (data.children) {
                idx = rn.pdata.children.indexOf(data);
                children = data.children;
                delete data.children;
                delete data.toggle;
                children = [JSON.parse(JSON.stringify(data))].concat(children);
                rn.pdata.children.splice.apply(rn.pdata.children, [idx, 1].concat(children));
                return this$.view.root.render();
              } else {
                idx = rn.pdata.children.indexOf(data);
                newData = JSON.parse(JSON.stringify(data));
                newData.toggle = true;
                newData.children = [];
                rn.pdata.children.splice.apply(rn.pdata.children, [idx, 1].concat([newData]));
                return this$.view.root.render();
              }
            }
          }
        },
        handler: {
          name: function(arg$){
            var node;
            node = arg$.node;
            return node.value = data.name || '';
          },
          url: function(arg$){
            var node;
            node = arg$.node;
            return node.value = data.url || '';
          },
          list: {
            list: function(){
              return data.children;
            },
            init: function(arg$){
              var node, data, des;
              node = arg$.node, data = arg$.data;
              des = this$.view.sample.get(data.children ? 'folder' : 'item').childNodes[0];
              node.setAttribute('class', des.getAttribute('class'));
              node.setAttribute('draggable', true);
              node.innerHTML = des.innerHTML;
              if (data.children) {
                node.childNodes[0].innerHTML = this$.view.sample.get('item').childNodes[0].innerHTML;
                node.childNodes[0].classList.add('folder-toggle');
                node.folder = new ldui.Folder({
                  root: node
                });
              }
              node.pdata = rootData;
              return node.view = renderFolder({
                node: node,
                data: data
              });
            },
            handler: function(arg$){
              var node, data;
              node = arg$.node, data = arg$.data;
              if (node.view) {
                return node.view.render();
              }
            }
          }
        }
      });
    };
    this.view.root = renderFolder({
      node: this.node.view,
      data: obj.tree
    });
    reb = new reblock({
      root: root,
      action: {
        beforeMove: function(src, des){
          var n;
          if (des.classList.contains('folder')) {
            return null;
          }
          while (des) {
            if (!des.parentNode.classList) {
              return null;
            }
            if (des.classList.contains('folder-toggle')) {
              if (src === des.parentNode) {
                return null;
              }
              if (n = ld$.find(des.parentNode, '.folder-menu', 0)) {
                n.insertBefore(des = document.createElement('div'), n.childNodes[0]);
                des.dummy = true;
                break;
              }
            }
            if (des.parentNode.classList.contains('folder-menu') || des.parentNode.classList.contains('folder-root')) {
              break;
            }
            if (des.parentNode === src.parentNode) {
              break;
            } else {
              des = des.parentNode;
            }
          }
          if (!des || src === des || ld$.parent(des, null, src)) {
            if (des.dummy) {
              des.parentNode.removeChild(des);
            }
            return null;
          }
          return des;
        },
        moving: function(src, des, dir){
          var d;
          if (dir === 0 && des.dummy) {
            d = des;
            des = des.parentNode.parentNode;
            d.parentNode.removeChild(d);
          }
          return des;
        },
        afterMove: function(src, des, dir){
          if (des.dummy) {
            return des.parentNode.removeChild(des);
          }
        },
        beforeMoveNode: function(arg$){
          var src, des, ib, n, d;
          src = arg$.src, des = arg$.des, ib = arg$.ib;
          n = src.parentNode;
          while (n && !n._data) {
            n = n.parentNode;
          }
          d = !n
            ? obj.tree
            : n._data;
          d.children.splice(d.children.indexOf(src._data), 1);
          return (n
            ? n.view
            : this$.view.root).unbindEachNode({
            name: 'list',
            container: src.parentNode,
            node: src
          });
        },
        afterMoveNode: function(arg$){
          var src, des, ib, n, d, idx;
          src = arg$.src, des = arg$.des, ib = arg$.ib;
          n = src.parentNode;
          while (n && !n._data) {
            n = n.parentNode;
          }
          d = !n
            ? obj.tree
            : n._data;
          idx = Array.from(src.parentNode.childNodes).indexOf(src);
          d.children.splice(Array.from(src.parentNode.childNodes).indexOf(src), 0, src._data);
          (n
            ? n.view
            : this$.view.root).bindEachNode({
            name: 'list',
            container: src.parentNode,
            idx: idx,
            node: src
          });
          src.pdata = d;
          if (n) {
            return n.view.render();
          } else {
            return this$.view.root.render();
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(import$(Object.create(Object.prototype), sdbAdapter['interface']), {
    opsIn: function(arg$){
      var data;
      data = arg$.data;
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}