// Generated by LiveScript 1.3.0
ldc.register('userSearch', ['auth', 'error'], function(arg$){
  var auth, error, Ctrl;
  auth = arg$.auth, error = arg$.error;
  Ctrl = function(opt){
    var root, this$ = this;
    this.opt = opt;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.users = [];
    this.search = debounce(this.opt.delay || 500, function(n){
      return this$._search(n);
    });
    return this;
  };
  Ctrl.prototype = import$(Object.create(Object.prototype), {
    render: function(){
      return this.view.render();
    },
    init: function(){
      var view, this$ = this;
      return this.view = view = new ldView({
        root: this.root,
        action: {
          input: {
            input: function(arg$){
              var node, local;
              node = arg$.node, local = arg$.local;
              return this$.search(node.value);
            }
          },
          click: {
            clear: function(){
              return this$.clear();
            }
          }
        },
        handler: {
          picked: function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', !this$.picked);
          },
          "picked-avatar": function(arg$){
            var node;
            node = arg$.node;
            if (this$.picked) {
              return node.style.backgroundImage = "url(/s/avatar/" + this$.picked.key + ".png)";
            }
          },
          "picked-name": function(arg$){
            var node;
            node = arg$.node;
            if (this$.picked) {
              return node.innerText = this$.picked.displayname;
            }
          },
          clear: function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', !this$.picked);
          },
          loading: function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', !this$.loading);
          },
          users: function(arg$){
            var node;
            node = arg$.node;
            return node.classList.toggle('d-none', !this$.users.length);
          },
          user: {
            list: function(){
              return this$.users || [];
            },
            action: {
              click: function(arg$){
                var node, data;
                node = arg$.node, data = arg$.data;
                this$.users = [];
                if (!data.empty) {
                  this$.picked = data;
                }
                this$.view.get("input").value = '';
                return this$.render();
              }
            },
            init: function(arg$){
              var node, data, local;
              node = arg$.node, data = arg$.data, local = arg$.local;
              return local.view = new ldView({
                context: data,
                root: node,
                handler: {
                  avatar: function(arg$){
                    var node, context;
                    node = arg$.node, context = arg$.context;
                    node.classList.toggle('d-none', !!context.empty);
                    if (context.key) {
                      return node.style.backgroundImage = "url(/s/avatar/" + context.key + ".png)";
                    }
                  },
                  name: function(arg$){
                    var node, context;
                    node = arg$.node, context = arg$.context;
                    return node.innerText = context.empty
                      ? '找不到相似的用戶'
                      : context.displayname;
                  }
                }
              });
            },
            render: function(arg$){
              var local, data;
              local = arg$.local, data = arg$.data;
              local.view.setContext(data);
              return local.view.render();
            }
          }
        }
      });
    },
    clear: function(){
      this.picked = null;
      this.users = [];
      return this.render();
    },
    _search: function(name){
      var this$ = this;
      if (!(name && name.length >= 3)) {
        return this.users = [], this.loading = false, this;
      }
      this.users = [];
      this.loading = true;
      this.render();
      return auth.get().then(function(){
        var payload;
        payload = {
          name: name
        };
        return ld$.fetch('/d/account', {
          method: 'POST'
        }, {
          json: payload,
          type: 'json'
        });
      }).then(function(it){
        if (!(it && it.length)) {
          this$.users = [{
            empty: true
          }];
        } else {
          this$.users = it;
        }
        return this$.render();
      })['finally'](function(){
        return debounce(1000).then(function(){
          return this$.loading = false;
        });
      }).then(function(){
        return this$.render();
      })['catch'](error);
    }
  });
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}