// Generated by LiveScript 1.3.0
ldc.register('prjViewSimple', [], function(){
  var Ctrl;
  Ctrl = function(opt){
    var root, this$ = this;
    this.root = root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.form = opt.form;
    this.answer = opt.answer;
    this.prj = opt.prj;
    this.brd = opt.brd;
    this.org = opt.org;
    this.view = new ldView({
      root: root,
      handler: {
        item: {
          list: function(){
            return this$.form.list;
          },
          init: function(arg$){
            var node, local, data;
            node = arg$.node, local = arg$.local, data = arg$.data;
            return local.view = new ldView({
              context: data,
              root: node,
              handler: {
                title: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return node.innerText = context.title;
                },
                desc: function(arg$){
                  var node, context;
                  node = arg$.node, context = arg$.context;
                  return node.innerText = context.desc;
                },
                answer: function(arg$){
                  var node, context, ret;
                  node = arg$.node, context = arg$.context;
                  ret = Ctrl.render({
                    block: context,
                    answer: this$.answer[context.key],
                    prj: this$.prj,
                    org: this$.org
                  });
                  return node.innerHTML = DOMPurify.sanitize(ret);
                }
              }
            });
          },
          handler: function(arg$){
            var local, data;
            local = arg$.local, data = arg$.data;
            local.view.setContext(data);
            return local.view.render();
          }
        }
      }
    });
    return this;
  };
  Ctrl.prototype = import$(Object.create(Object.prototype), {
    render: function(){
      return this.view.render();
    }
  });
  Ctrl.render = function(arg$){
    var block, answer, prj, brd, org, result, ref$, ret, list;
    block = arg$.block, answer = arg$.answer, prj = arg$.prj, brd = arg$.brd, org = arg$.org;
    result = {};
    if (!(block && answer)) {
      return;
    }
    if (answer.content) {
      if (answer.useMarkdown) {
        result = DOMPurify.sanitize(marked(answer.content));
      } else {
        result = htmlentities(answer.content);
      }
    } else if (answer.list) {
      if ((ref$ = block.name) === 'form-file' || ref$ === 'form-thumbnail') {
        ret = (answer.list || []).map(function(f){
          return "<li><a href=\"/dash/org/" + org + "/prj/" + prj + "/upload/" + f.path + "\">\n" + htmlentities(f.name) + "\n</a></li>";
        }).join('');
        result = DOMPurify.sanitize(ret);
      } else if (block.name === 'form-checkpoint') {
        ret = (answer.list || []).map(function(d){
          return "<p><div><b><big>" + htmlentities(d.title) + "</big></b></div>\n<div>" + htmlentities(d.desc) + "</div></p>";
        }).join('');
        result = "<blockquote style='margin-left:1em'>" + DOMPurify.sanitize(ret) + "</blockquote>";
      } else {
        list = answer.list.concat(answer.otherValue && answer.other
          ? [answer.otherValue]
          : []);
        result = DOMPurify.sanitize(list.join("<br>"));
      }
    }
    return result;
  };
  return Ctrl;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}