// Generated by LiveScript 1.3.0
ldc.register('prjCreate', [], function(){
  var Propose;
  Propose = function(){
    return this;
  };
  Propose.prototype = import$(Object.create(Object.prototype), {
    toggle: function(v){
      return this.init().then(function(){
        return ldcvmgr.toggle('prj-create', v);
      });
    },
    init: function(){
      var this$ = this;
      return Promise.resolve().then(function(){
        if (!this$.cover) {
          return ldcvmgr.getcover('prj-create').then(function(it){
            return this$.cover = it;
          });
        }
      }).then(function(){
        if (!this$.dom) {
          return ldcvmgr.getdom('prj-create').then(function(it){
            return this$.dom = it;
          });
        }
      }).then(function(){
        if (this$.form) {
          return;
        }
        return this$.form = new ldForm({
          root: '[data-name=prj-create]',
          submit: '[data-name=prj-create] .btn[ld=submit]',
          verify: function(n, v, e){
            if (n === 'description') {
              return 1;
            } else {
              return !!v ? 0 : 1;
            }
          },
          afterCheck: function(s, f){
            return s.all = s.name;
          }
        });
      }).then(function(){
        return this$.form.reset();
      }).then(function(){
        if (this$.view) {
          return;
        }
        return this$.view = new ldView({
          root: '[data-name=prj-create]',
          action: {
            click: {
              submit: function(arg$){
                var node, payload;
                node = arg$.node;
                if (node.classList.contains('disabled') || node.classList.contains('running')) {
                  return;
                }
                node.classList.add('running');
                payload = form.values();
                return ld$.fetch('/d/p/', {
                  method: 'POST'
                }, {
                  json: payload,
                  type: 'json'
                }).then(function(){
                  return ldcvmgr.toggle('redirect');
                })['catch'](error())['finally'](function(){
                  return node.classList.remove('running');
                });
              }
            }
          },
          handler: {
            "brd-name": function(arg$){
              var node;
              node = arg$.node;
              return node.innerText = "這個活動";
            },
            submit: function(){}
          }
        });
      });
    }
  });
  return Propose;
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}