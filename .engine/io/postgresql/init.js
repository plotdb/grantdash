// Generated by LiveScript 1.3.0
(function(){
  var secret, postgresql, pg, queries, initExceptionTable, initUsersTable, initMailverifytokenTable, initPwresettokenTable, initSessionsTable, initSessionsKeyTable, client;
  secret = require('../../../secret');
  postgresql = require('../postgresql');
  pg = require('pg');
  queries = [];
  queries.push("create extension if not exists pg_trgm;");
  queries.push(initExceptionTable = "create table if not exists exception (\n  key serial primary key,\n  detail jsonb,\n  ip text,\n  createdtime timestamp default now()\n)");
  queries.push(initUsersTable = "create table if not exists users (\n  key serial primary key,\n  username text not null unique constraint nlen check (char_length(username) <= 100),\n  password text constraint pwlen check (char_length(password) <= 100),\n  usepasswd boolean,\n  verified jsonb,\n  displayname text, constraint displaynamelength check (char_length(displayname) <= 100),\n  description text,\n  datasize int,\n  createdtime timestamp,\n  lastactive timestamp,\n  public_email boolean,\n  avatar text,\n  detail jsonb,\n  plan jsonb,\n  payment jsonb,\n  config jsonb,\n  staff int,\n  deleted boolean\n)");
  queries.push(initMailverifytokenTable = "create table if not exists mailverifytoken (\n  owner int references users(key) on delete cascade,\n  token text,\n  time timestamp\n)");
  queries.push(initPwresettokenTable = "create table if not exists pwresettoken (\n  owner int references users(key) on delete cascade,\n  token text,\n  time timestamp\n)");
  queries.push(initSessionsTable = "create table if not exists sessions (\n  key text not null unique primary key,\n  detail jsonb\n)");
  queries.push(initSessionsKeyTable = "create index if not exists sessions_detail_key on sessions (((detail->'passport'->'user'->>'key')::int))");
  client = new pg.Client(secret.ioPg.uri);
  client.connect(function(e){
    var query, consume;
    if (e) {
      return console.log(e);
    }
    console.log("connected");
    query = function(q){
      return new Promise(function(res, rej){
        return client.query(q, function(e, r){
          if (e) {
            rej(e);
          }
          return res(r);
        });
      });
    };
    consume = function(){
      var task;
      if (queries.length) {
        task = queries.splice(0, 1)[0];
        return query(task).then(function(){
          return consume();
        })['catch'](function(it){
          return [console.log(it), client.end()];
        });
      } else {
        console.log("done.");
        return client.end();
      }
    };
    return consume();
  });
}).call(this);
