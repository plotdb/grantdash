// Generated by LiveScript 1.3.0
(function(){
  var secret, postgresql, pg, queries, client;
  secret = require('../../../secret');
  postgresql = require('../postgresql');
  pg = require('pg');
  queries = [];
  queries.push("create type state as enum ('active','pending','deleted','canceled','suspended','invalid');");
  queries.push("create table if not exists board (\n  key serial primary key,\n  owner int references users(key) not null,\n  slug text not null,\n  title text not null constraint title_len check (char_length(title) <= 100),\n  description text constraint description_len check (char_length(description) <= 500),\n  detail jsonb,\n  createdtime timestamp not null default now(),\n  state state not null,\n  deleted bool default false\n)");
  queries.push("create table if not exists project (\n  key serial primary key,\n  owner int references users(key) not null,\n  slug text not null,\n  board int references board(key),\n  title text not null constraint title_len check (char_length(title) <= 100),\n  description text constraint description_len check (char_length(description) <= 500),\n  detail jsonb,\n  createdtime timestamp not null default now(),\n  state state not null,\n  deleted bool default false\n)");
  client = new pg.Client(secret.ioPg.uri);
  client.connect(function(e){
    var query, consume;
    if (e) {
      return console.log(e);
    }
    console.log("connected");
    query = function(q){
      return new Promise(function(res, rej){
        return client.query(q, function(e, r){
          if (e) {
            rej(e);
          }
          return res(r);
        });
      });
    };
    consume = function(){
      var task;
      if (queries.length) {
        task = queries.splice(0, 1)[0];
        return query(task).then(function(){
          return consume();
        })['catch'](function(it){
          return [console.log(it), client.end()];
        });
      } else {
        console.log("done.");
        return client.end();
      }
    };
    return consume();
  });
}).call(this);
