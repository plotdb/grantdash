// Generated by LiveScript 1.3.0
(function(){
  var fs, path, lderror, aux;
  fs = require('fs');
  path = require('path');
  lderror = require('lderror');
  aux = require('../aux');
  (function(it){
    return module.exports = it;
  })(function(engine, io){
    var api;
    api = engine.router.api;
    api.get('/discus/', function(req, res){
      var slug, limit, ref$, offset;
      slug = req.query.slug;
      limit = isNaN(req.query.limit)
        ? 20
        : (ref$ = +req.query.limit) < 100 ? ref$ : 100;
      offset = isNaN(req.query.offset)
        ? 0
        : +req.query.offset;
      if (!slug) {
        return aux.r404(res);
      }
      return io.query("select c.*, u.displayname from comment as c, discus as d, users as u\nwhere d.slug = $1 and d.key = c.discus and c.owner = u.key\nand c.deleted is not true\nand c.state = 'active'\norder by distance limit $2 offset $3", [slug, limit, offset]).then(function(r){
        r == null && (r = {});
        return res.send(r.rows || []);
      })['catch'](aux.errorHandler(res));
    });
    api.post('/comment/', function(req, res){
      var lc;
      if (!req.user) {
        return aux.r404(res);
      }
      lc = {};
      return Promise.resolve().then(function(){
        var ref$;
        lc.slug = (ref$ = req.body).slug;
        lc.reply = ref$.reply;
        lc.content = ref$.content;
        if (!lc.slug) {
          return aux.reject(404);
        }
        return lc.content = {
          body: (ref$ = lc.content).body,
          config: ref$.config
        };
      }).then(function(){
        return lc.reply
          ? io.query("select c.* from comment as c\nwhere key = $1 and c.deleted is not true and c.state = 'active'", [lc.reply])
          : io.query("select count(c.key) as distance, d.key as discus\nfrom comment as c, discus as d where d.slug = $1 and d.key = c.discus group by d.key", [lc.slug]);
      }).then(function(r){
        var ret, distance;
        r == null && (r = {});
        ret = (r.rows || (r.rows = []))[0] || {};
        distance = isNaN(+ret.distance)
          ? 0
          : +ret.distance;
        lc.distance = distance + 1;
        lc.discus = ret.discus;
        lc.state = 'active';
        if (!lc.discus) {
          return io.query("select key from discus where slug = $1", [lc.slug]).then(function(r){
            r == null && (r = {});
            if ((r.rows || (r.rows = [])).length) {
              return Promise.resolve(r);
            } else {
              return io.query("insert into discus (slug) values ($1) returning key", [lc.slug]);
            }
          }).then(function(r){
            r == null && (r = {});
            return ((r.rows || (r.rows = []))[0] || {}).key;
          })['catch'](function(){
            return aux.reject(new lderror(400));
          });
        } else {
          return Promise.resolve(lc.discus);
        }
      }).then(function(ret){
        lc.discus = ret;
        return io.query("insert into comment\n(owner,discus,distance,content,state) values ($1,$2,$3,$4,$5)\nreturning key", [req.user.key, lc.discus, lc.distance, lc.content, lc.state]);
      }).then(function(r){
        r == null && (r = {});
        return res.send((r.rows || (r.rows = []))[0] || {});
      })['catch'](aux.errorHandler(res));
    });
    api.put('/comment/:id', function(req, res){
      var lc;
      if (!req.user) {
        return aux.r404(res);
      }
      lc = {};
      return Promise.resolve().then(function(){
        var ref$;
        lc.content = {
          body: (ref$ = req.body.content).body,
          config: ref$.config
        };
        return io.query("update comment set (content) = ($1)", [lc.content]);
      }).then(function(){
        return res.send();
      })['catch'](aux.errorHandler(res));
    });
    return api['delete']('/comment/:id', function(req, res){
      var key;
      if (!req.user) {
        return aux.r404(res);
      }
      if (isNaN(key = +req.params.id)) {
        return aux.r404(res);
      }
      return io.query("update comment set deleted = true where key = $1 and owner = $2", [key, req.user.key]).then(function(){
        return res.send();
      })['catch'](aux.errorHandler(res));
    });
  });
}).call(this);
