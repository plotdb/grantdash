// Generated by LiveScript 1.3.0
(function(){
  var crypto, expressRateLimit, aux, mail;
  crypto = require('crypto');
  expressRateLimit = require('express-rate-limit');
  aux = require('../../aux');
  mail = require('../util/mail');
  (function(it){
    return module.exports = it;
  })(function(engine, io){
    var throttling;
    throttling = {
      send: expressRateLimit({
        windowMs: 30 * 60 * 1000,
        max: 10,
        keyGenerator: aux.throttling.key
      })
    };
    engine.router.api.post('/me/passwd/reset/:token', function(req, res){
      var token, password;
      token = req.params.token;
      password = {
        plain: req.body.password
      };
      return io.authio.user.hashing(password.plain, true, true).then(function(ret){
        password.hashed = ret;
        return io.query(["select users.key from users,pwresettoken", "where pwresettoken.token=$1 and users.key=pwresettoken.owner"].join(" "), [token]);
      }).then(function(r){
        var user;
        r == null && (r = {});
        if (!(r.rows || (r.rows = [])).length) {
          return aux.reject(403);
        }
        user = r.rows[0];
        user.password = password.hashed;
        return io.query("update users set (password,usepasswd) = ($2,$3) where key = $1", [user.key, user.password, true]);
      }).then(function(){
        return io.query("delete from pwresettoken where pwresettoken.token=$1", [token]);
      }).then(function(){
        res.redirect('/dash/auth/reset/done');
        return null;
      })['catch'](aux.errorHandler(res, true));
    });
    engine.app.get('/me/passwd/reset/:token', function(req, res){
      var token;
      token = req.params.token;
      if (!token) {
        return aux.r400(res, "", true);
      }
      return io.query("select owner,time from pwresettoken where token = $1", [token]).then(function(r){
        var obj;
        r == null && (r = {});
        if (!(r.rows || (r.rows = [])).length) {
          return aux.reject(403, "");
        }
        obj = r.rows[0];
        if (new Date().getTime() - new Date(obj.time).getTime() > 1000 * 600) {
          res.redirect('/auth/reset/expire/');
          return null;
        }
        res.cookie("password-reset-token", token);
        res.redirect("/dash/auth/reset/change/");
        return null;
      })['catch'](aux.errorHandler(res, true));
    });
    return engine.router.api.post('/me/passwd/reset', throttling.send, function(req, res){
      var email, obj;
      email = (req.body.email + "").trim();
      if (!email) {
        return aux.r400(res, "did you provide you email?", true);
      }
      obj = {};
      return io.query("select key from users where username = $1", [email]).then(function(r){
        var time;
        r == null && (r = {});
        if ((r.rows || (r.rows = [])).length === 0) {
          return aux.reject(404);
        }
        time = new Date();
        obj.key = r.rows[0].key;
        obj.hex = (r.rows[0].key + "") + crypto.randomBytes(30).toString('hex');
        obj.time = time;
        return io.query("delete from pwresettoken where owner=$1", [obj.key]);
      }).then(function(){
        return io.query("insert into pwresettoken (owner,token,time) values ($1,$2,$3)", [obj.key, obj.hex, obj.time]);
      }).then(function(){
        return mail.byTemplate('reset-password', email, {
          token: obj.hex,
          domain: 'grantdash.io',
          teamname: 'Grant Dash'
        }, {
          now: true
        });
      }).then(function(){
        return res.send('');
      })['catch'](aux.errorHandler(res, true));
    });
  });
}).call(this);
