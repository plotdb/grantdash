// Generated by LiveScript 1.3.0
(function(){
  var fs, fsExtra, path, crypto, readChunk, sharp, expressFormidable, uploadr, lderror, aux, secret, grecaptcha, throttle;
  fs = require('fs');
  fsExtra = require('fs-extra');
  path = require('path');
  crypto = require('crypto');
  readChunk = require('read-chunk');
  sharp = require('sharp');
  expressFormidable = require('express-formidable');
  uploadr = require('uploadr');
  lderror = require('lderror');
  aux = require('../aux');
  secret = require('../../secret');
  grecaptcha = require('../util/grecaptcha');
  throttle = require('../util/throttle');
  (function(it){
    return module.exports = it;
  })(function(engine, io){
    var api, app;
    api = engine.router.api;
    app = engine.app;
    app.get('/', function(req, res){
      var lc;
      lc = {};
      if (!(req.scope && req.scope.org)) {
        return aux.r404(res);
      }
      return io.query("select * from org where org.slug = $1 and org.deleted is not true", [req.scope.org]).then(function(r){
        r == null && (r = {});
        if (!(lc.org = (r.rows || (r.rows = []))[0])) {
          return aux.r404(res);
        }
        return io.query("select name,description,slug,key from brd where brd.org = $1 and brd.deleted is not true\norder by createdtime desc", [req.scope.org]);
      }).then(function(r){
        var brds;
        r == null && (r = {});
        brds = r.rows || (r.rows = []);
        return res.render('view/default/org.pug', {
          org: lc.org,
          brds: brds
        });
      })['catch'](aux.errorHandler(res));
    });
    return api.post('/org', aux.signed, throttle.count.userMd, expressFormidable(), grecaptcha, function(req, res){
      var lc, ref$, name, description, slug, detail;
      lc = {};
      ref$ = req.fields, name = ref$.name, description = ref$.description, slug = ref$.slug;
      if (!name || !org || !/^[a-zA-Z0-9+_-]+$/.exec(slug)) {
        return aux.r400(res);
      }
      if (!secret.publicServer) {
        return aux.r404(res);
      }
      detail = {
        info: {
          name: name,
          description: description
        }
      };
      return io.query("select key from org where slug = $1", [slug]).then(function(r){
        r == null && (r = {});
        if (r.rows && r.rows.length) {
          return aux.reject(new lderror(1011));
        }
        return io.query("insert into org (name,description,slug,owner,detail)\nvalues ($1,$2,$3,$4,$5) returning key", [name, description, slug, req.user.key, detail]);
      }).then(function(r){
        r == null && (r = {});
        return res.send(((r.rows || (r.rows = [])) || [])[0]);
      })['catch'](aux.errorHandler(res));
    });
  });
}).call(this);
