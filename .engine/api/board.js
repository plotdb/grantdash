// Generated by LiveScript 1.3.0
(function(){
  var fs, fsExtra, path, crypto, readChunk, sharp, expressFormidable, uploadr, lderror, aux;
  fs = require('fs');
  fsExtra = require('fs-extra');
  path = require('path');
  crypto = require('crypto');
  readChunk = require('read-chunk');
  sharp = require('sharp');
  expressFormidable = require('express-formidable');
  uploadr = require('uploadr');
  lderror = require('lderror');
  aux = require('../aux');
  (function(it){
    return module.exports = it;
  })(function(engine, io){
    var api, app;
    api = engine.router.api;
    app = engine.app;
    app.get('/b/:key', aux.signed, function(req, res){
      var lc;
      lc = {};
      if (!req.user) {
        return aux.r403(res);
      }
      return io.query("select * from board where key = $1", [req.params.key]).then(function(r){
        var board;
        r == null && (r = {});
        if (!(lc.board = board = (r.rows || (r.rows = []))[0])) {
          return aux.reject(404);
        }
        if (board.owner !== req.user.key) {
          return aux.reject(403);
        }
        return io.query("select * from project where board = $1", [board.key]);
      }).then(function(r){
        r == null && (r = {});
        lc.projects = r.rows || (r.rows = []);
        return res.render('b/index.pug', {
          board: lc.board,
          projects: lc.projects
        });
      })['catch'](aux.errorHandler(res));
    });
    api.post('/b', aux.signed, expressFormidable(), function(req, res){
      var lc, ref$, name, description, slug, starttime, endtime, org, thumb;
      lc = {};
      ref$ = req.fields, name = ref$.name, description = ref$.description, slug = ref$.slug, starttime = ref$.starttime, endtime = ref$.endtime, org = ref$.org;
      thumb = (req.files["thumbnail[]"] || {}).path;
      return io.query("select key from board where slug = $1", [slug]).then(function(r){
        r == null && (r = {});
        if (r.rows && r.rows.length) {
          return aux.reject(new lderror(1011));
        }
        return io.query("insert into board (name,description,slug,starttime,endtime,org,owner)\nvalues ($1,$2,$3,$4,$5,$6,$7) returning key", [name, description, slug, starttime || null, endtime || null, org || null, req.user.key]);
      }).then(function(r){
        r == null && (r = {});
        lc.ret = ((r.rows || (r.rows = [])) || [])[0];
        if (!thumb) {
          return;
        }
        return new Promise(function(res, rej){
          var root;
          root = "static/assets/uploads/b/" + slug;
          return fsExtra.ensureDir(root, function(e){
            if (e) {
              return rej(e);
            }
            return sharp(thumb).toFile(path.join(root, "thumb.png"), function(e, i){
              if (e) {
                return rej(e);
              } else {
                return res();
              }
            });
          });
        });
      }).then(function(){
        return res.send(lc.ret);
      })['catch'](aux.errorHandler(res));
    });
    app.get('/o/:key/admin', aux.signed, function(req, res){
      return res.render('admin/index.pug', {
        org: {
          key: req.params.key
        }
      });
    });
    app.get('/b/:key/admin', aux.signed, function(req, res){
      var lc;
      lc = {};
      return io.query("select * from board where key = $1", [req.params.key]).then(function(r){
        var board;
        r == null && (r = {});
        if (!(board = (r.rows || (r.rows = []))[0])) {
          return aux.reject(404);
        }
        if (board.owner !== req.user.key) {
          return aux.reject(403);
        }
        lc.board = board;
        return !board.org
          ? Promise.resolve()
          : io.query("select * from org where key = $1", [board.org]);
      }).then(function(r){
        var org;
        r == null && (r = {});
        org = (r.rows || (r.rows = {}))[0];
        res.render('admin/index.pug', {
          org: org,
          board: lc.board
        });
        return null;
      })['catch'](aux.errorHandler(res));
    });
    return api.post('/slug-check/:type', function(req, res){
      var type;
      type = {
        o: 'org',
        b: 'board'
      }[req.params.type];
      if (!type) {
        return aux.r404();
      }
      return io.query("select key from " + type + " where slug = $1", [req.body.slug]).then(function(r){
        r == null && (r = {});
        return res.send({
          result: (r.rows || []).length ? 'used' : 'free'
        });
      })['catch'](function(it){
        return aux.errorHandler(res)(it);
      });
    });
  });
}).call(this);
