// Generated by LiveScript 1.3.0
(function(){
  var fs, fsExtra, path, crypto, readChunk, sharp, expressFormidable, uploadr, lderror, suuid, cache, aux;
  fs = require('fs');
  fsExtra = require('fs-extra');
  path = require('path');
  crypto = require('crypto');
  readChunk = require('read-chunk');
  sharp = require('sharp');
  expressFormidable = require('express-formidable');
  uploadr = require('uploadr');
  lderror = require('lderror');
  suuid = require('suuid');
  cache = require('./cache');
  aux = require('../aux');
  (function(it){
    return module.exports = it;
  })(function(engine, io){
    var api, app;
    api = engine.router.api;
    app = engine.app;
    api.get('/post', aux.signed, function(req, res){
      var slug;
      if (!(slug = req.query.brd)) {
        return aux.r400(res);
      }
      return cache.perm.check({
        io: io,
        user: req.user,
        type: 'brd',
        slug: slug,
        action: 'owner'
      }).then(function(){
        return io.query("select p.*, u.displayname as ownername\nfrom post as p\nleft join users as u on u.key = p.owner\nwhere brd = $1 and p.deleted is not true\norder by p.createdtime desc", [slug]);
      }).then(function(r){
        r == null && (r = {});
        return res.send(r.rows || (r.rows = []));
      })['catch'](aux.errorHandler(res));
    });
    api.get('/post/:slug', aux.signed, function(req, res){
      var lc, slug;
      lc = {};
      if (!(slug = req.params.slug)) {
        return aux.r400(res);
      }
      return io.query("select p.*,u.displayname as ownername\nfrom post as p, users as u\nwhere slug = $1 and p.owner = u.key", [slug]).then(function(r){
        r == null && (r = {});
        if (!(lc.post = (r.rows || (r.rows = []))[0])) {
          return aux.reject(404);
        }
        return cache.perm.check({
          io: io,
          user: req.user,
          type: 'brd',
          slug: lc.post.brd
        });
      }).then(function(){
        return res.send(lc.post);
      })['catch'](aux.errorHandler(res));
    });
    app.get('/post/:slug', function(req, res){
      var lc, slug;
      lc = {};
      if (!(slug = req.params.slug)) {
        return aux.r400(res);
      }
      return io.query("select p.*,u.displayname as ownername\nfrom post as p, users as u\nwhere slug = $1 and p.owner = u.key", [slug]).then(function(r){
        var post;
        r == null && (r = {});
        if (!(lc.post = post = (r.rows || (r.rows = []))[0])) {
          return aux.reject(404);
        }
        return cache.stage.check({
          io: io,
          type: 'brd',
          slug: lc.post.brd
        });
      }).then(function(arg$){
        var config;
        config = (arg$ != null
          ? arg$
          : {
            config: {}
          }).config;
        if (!config["public"]) {
          return aux.reject(403);
        }
        return res.render('work/post-view.pug', {
          exports: {
            post: lc.post
          }
        });
      })['catch'](aux.errorHandler(res));
    });
    return api.post('/post', aux.signed, function(req, res){
      var ref$, brd, title;
      ref$ = {
        brd: (ref$ = req.body).brd,
        title: ref$.title
      }, brd = ref$.brd, title = ref$.title;
      return cache.perm.check({
        io: io,
        user: req.user,
        type: 'brd',
        slug: brd
      }).then(function(){
        var slug, detail;
        slug = suuid();
        detail = {
          content: "",
          title: title
        };
        return io.query("insert into post (title,owner,slug,brd,detail) values ($1, $2, $3, $4, $5) returning slug", [title, req.user.key, slug, brd, detail]);
      }).then(function(r){
        r == null && (r = {});
        return res.send((r.rows || (r.rows = []))[0] || {});
      })['catch'](aux.errorHandler(res));
    });
  });
}).call(this);
