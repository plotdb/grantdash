// Generated by LiveScript 1.3.0
(function(){
  var fs, fsExtra, path, crypto, readChunk, sharp, expressFormidable, uploadr, lderror, suuid, aux, cache;
  fs = require('fs');
  fsExtra = require('fs-extra');
  path = require('path');
  crypto = require('crypto');
  readChunk = require('read-chunk');
  sharp = require('sharp');
  expressFormidable = require('express-formidable');
  uploadr = require('uploadr');
  lderror = require('lderror');
  suuid = require('suuid');
  aux = require('../aux');
  cache = require('./cache');
  (function(it){
    return module.exports = it;
  })(function(engine, io){
    var api, app;
    api = engine.router.api;
    app = engine.app;
    api.post('/account', aux.signed, function(req, res){
      var name;
      if (!(name = req.body.name)) {
        return aux.r404(res);
      }
      name = (name + "").substring(0, 32);
      return io.query("select key,displayname from users where lower(displayname) ~ lower($1)", [name]).then(function(r){
        r == null && (r = {});
        return res.send(r.rows || (r.rows = []));
      })['catch'](aux.errorHandler(res));
    });
    api.get('/stage', function(req, res){
      var brd;
      brd = {
        brd: req.query.brd
      }.brd;
      if (!brd) {
        return aux.r400(res);
      }
      return cache.stage.check({
        io: io,
        type: 'brd',
        slug: brd
      }).then(function(it){
        return res.send(it);
      })['catch'](aux.errorHandler(res));
    });
    api.post('/token', aux.signed, function(req, res){
      var ref$, token, id, hint, type, slug;
      ref$ = [suuid(), suuid()], token = ref$[0], id = ref$[1];
      hint = {
        org: (ref$ = import$(import$({}, req.scope), req.body)).org,
        brd: ref$.brd
      };
      type = hint.brd ? 'brd' : 'org';
      slug = hint.brd
        ? hint.brd
        : hint.org;
      return cache.perm.check({
        io: io,
        user: req.user,
        type: type,
        slug: slug,
        action: 'owner'
      }).then(function(){
        return io.query("insert into permtoken (token,id) values ($1, $2)", [token, id]);
      }).then(function(){
        return res.send({
          id: id,
          token: token
        });
      })['catch'](aux.errorHandler(res));
    });
    app.get('/token/:token', function(req, res){
      var token;
      if (!(token = req.params.token)) {
        return aux.r400(res);
      }
      return res.render("auth/perm/claim.pug", {
        exports: {
          token: token
        }
      });
    });
    return api.put('/token', aux.signed, function(req, res){
      var token;
      if (!(token = req.body.token)) {
        return aux.r400(res);
      }
      return io.query("select token,id,redeemspan,createdtime from permtoken where token = $1", [token]).then(function(r){
        var ret;
        r == null && (r = {});
        if (!(ret = (r.rows || (r.rows = []))[0])) {
          return aux.reject(404);
        }
        if (Date.now() >= new Date(ret.createdtime).getTime() + ret.redeemspan) {
          return aux.reject(1013);
        }
        return io.query("insert into perm (id, owner) values ($1, $2)", [ret.id, req.user.key]);
      })['finally'](function(){
        return io.query("delete from permtoken where token = $1", [token]);
      }).then(function(){
        return res.send({});
      })['catch'](aux.errorHandler(res));
    });
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
