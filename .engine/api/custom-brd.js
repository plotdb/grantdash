// Generated by LiveScript 1.3.0
(function(){
  var fs, fsExtra, path, crypto, lderror, suuid, mimeTypes, puppeteer, tmp, easyPdfMerge, request, aux, cache, common, grecaptcha, throttle, storage, secret, printer;
  fs = require('fs');
  fsExtra = require('fs-extra');
  path = require('path');
  crypto = require('crypto');
  lderror = require('lderror');
  suuid = require('suuid');
  mimeTypes = require('mime-types');
  suuid = require('suuid');
  puppeteer = require('puppeteer');
  tmp = require('tmp');
  easyPdfMerge = require('easy-pdf-merge');
  request = require('request');
  aux = require('../aux');
  cache = require('./cache');
  common = require('./common');
  grecaptcha = require('../util/grecaptcha');
  throttle = require('../util/throttle');
  storage = require('@google-cloud/storage');
  secret = require('../../secret');
  printer = require('./printer');
  printer = printer.get();
  (function(it){
    return module.exports = it;
  })(function(engine, io){
    var gcs, api, app, fileUrl;
    if (!secret.gcs) {
      return;
    }
    gcs = new storage.Storage(secret.gcs);
    api = engine.router.api;
    app = engine.app;
    fileUrl = function(arg$){
      var id, req, res, lc;
      id = arg$.id, req = arg$.req, res = arg$.res;
      lc = {};
      return io.query("select brd,grp,owner from perm_gcs where id = $1", [id]).then(function(r){
        var ret;
        r == null && (r = {});
        if (!(lc.ret = ret = (r.rows || (r.rows = []))[0])) {
          return aux.reject(404);
        }
        if (ret.owner === req.user.key) {
          return true;
        }
        return cache.perm.check({
          io: io,
          type: 'brd',
          slug: ret.brd,
          user: req.user,
          action: ['judge', 'owner']
        })['catch'](function(){
          return io.query("select owner from perm_judge where brd = $1 and owner = $2", [lc.ret.brd, req.user.key]).then(function(r){
            r == null && (r = {});
            if (!(r.rows || (r.rows = [])).length) {
              return aux.reject(403);
            }
          });
        });
      }).then(function(){
        return gcs.bucket(secret.gcs.bucket).file(id).getSignedUrl({
          action: 'read',
          version: 'v4',
          expires: Date.now() + 60000
        });
      }).then(function(it){
        return it[0];
      });
    };
    api.post('/gcs/upload', aux.signed, function(req, res){
      var lc, owner, field, brd;
      lc = {};
      if (!(req.user && req.user.key)) {
        return aux.r403(res);
      }
      owner = req.body.owner || req.user.key;
      if (!(field = req.body.field)) {
        return aux.r400(res);
      }
      if (!(brd = req.body.brd)) {
        return aux.r404(res);
      }
      return cache.stage.check({
        io: io,
        type: 'brd',
        slug: brd,
        name: 'prj-edit'
      }).then(function(){
        if (owner !== req.user.key) {
          return cache.perm.check({
            io: io,
            type: 'brd',
            slug: brd,
            user: req.user,
            action: ['owner']
          });
        } else {
          return Promise.resolve();
        }
      }).then(function(){
        return lc.id = brd + "/" + suuid();
      }).then(function(){
        return gcs.bucket(secret.gcs.bucket).file(lc.id).getSignedUrl({
          action: 'write',
          version: 'v4',
          expires: Date.now() + 2 * 60 * 1000
        });
      }).then(function(it){
        lc.url = it[0];
        if (!lc.perm) {
          return io.query("insert into perm_gcs (id, owner, brd, grp, field) values ($1, $2, $3, $4, $5)", [lc.id, owner, brd || null, null, field]);
        }
      }).then(function(){
        return res.send({
          signedUrl: lc.url,
          id: lc.id
        });
      })['catch'](aux.errorHandler(res));
    });
    app.get('/gcs/upload/:brd/:id', aux.signed, function(req, res){
      var id;
      id = req.params.brd + "/" + req.params.id;
      return fileUrl({
        id: id,
        req: req,
        res: res
      }).then(function(it){
        return res.status(302).redirect(it);
      })['catch'](aux.errorHandler(res));
    });
    return api.post('/custom/print', throttle.count.user, grecaptcha, function(req, res){
      var lc;
      lc = {};
      return printer.print({
        html: req.body.html
      }).then(function(it){
        return res.send(it);
      })['catch'](aux.errorHandler(res));
    });
  });
}).call(this);
