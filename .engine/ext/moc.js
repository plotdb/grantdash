// Generated by LiveScript 1.3.0
(function(){
  var express, crypto, fs, fsExtra;
  express = require('express');
  crypto = require('crypto');
  fs = require('fs');
  fsExtra = require('fs-extra');
  (function(it){
    return module.exports = it;
  })(function(engine, io){
    var sample, _parser, parser, fetch, encode, decode;
    sample = [{
      "案件編號": "測試",
      "申請者": "測試",
      "計畫名稱": "測試",
      "年度": "測試",
      "承辦人": "測試",
      "承辦人電話": "測試",
      "承辦人email": "測試",
      "補助金額": "測試",
      "案件狀態": "測試",
      "計畫聯絡人": "測試",
      "團體負責人": "測試",
      "統一編號": "測試"
    }];
    _parser = {
      "flagship-1": function(arg$){
        var prj, brd, form;
        prj = arg$.prj, brd = arg$.brd;
        form = prj.detail.custom.raw;
        return {
          "案件編號": prj.key,
          "申請者": form['申請單位'],
          "計畫聯絡人": form['聯絡人'],
          "團體負責人": form['負責人'],
          "統一編號": 'n/a',
          "計畫名稱": form['計畫名稱'],
          "案件狀態": 'n/a'
        };
      },
      "flagship-2": function(arg$){
        var prj, brd, form;
        prj = arg$.prj, brd = arg$.brd;
        form = prj.detail.custom.form;
        return {
          "案件編號": prj.key,
          "申請者": form.teamname,
          "計畫聯絡人": form["contact-name"],
          "團體負責人": form.pic,
          "統一編號": form.vatid,
          "計畫名稱": form.name,
          "案件狀態": 'n/a'
        };
      },
      "future-content": function(arg$){
        var prj, brd, form;
        prj = arg$.prj, brd = arg$.brd;
        form = prj.detail.custom.raw;
        return {
          "案件編號": prj.key,
          "申請者": form['(代表)提案單位'],
          "計畫聯絡人": form['聯絡人'],
          "團體負責人": form['負責人'],
          "統一編號": form['統一編號'],
          "計畫名稱": form['計畫名稱'],
          "案件狀態": 'n/a'
        };
      },
      "future-content-111": function(arg$){
        var prj, brd, form;
        prj = arg$.prj, brd = arg$.brd;
        form = prj.detail.custom.open;
        return {
          "案件編號": prj.key,
          "申請者": (form['提案單位'] || (form['提案單位'] = {})).v,
          "計畫聯絡人": (form['聯絡人姓名'] || (form['聯絡人姓名'] = {})).v,
          "團體負責人": (form['負責人'] || (form['負責人'] = {})).v,
          "統一編號": (form['統一編號'] || (form['統一編號'] = {})).v,
          "計畫名稱": (form['計畫名稱'] || (form['計畫名稱'] = {})).v,
          "案件狀態": 'n/a'
        };
      },
      "fcm-111": function(arg$){
        var prj, brd, form;
        prj = arg$.prj, brd = arg$.brd;
        form = prj.detail.custom.open;
        return {
          "案件編號": prj.key,
          "申請者": (form['單位名稱'] || (form['單位名稱'] = {})).v,
          "計畫聯絡人": (form['聯絡人姓名'] || (form['聯絡人姓名'] = {})).v,
          "團體負責人": (form['負責人'] || (form['負責人'] = {})).v,
          "統一編號": (form['統一編號'] || (form['統一編號'] = {})).v,
          "計畫名稱": (form['計畫名稱'] || (form['計畫名稱'] = {})).v,
          "案件狀態": 'n/a'
        };
      },
      "icg-111": function(arg$){
        var prj, brd, form;
        prj = arg$.prj, brd = arg$.brd;
        form = prj.detail.custom.basic;
        return {
          "案件編號": prj.key,
          "申請者": (form['applicant-zh'] || (form['applicant-zh'] = {})).v,
          "計畫聯絡人": (form['聯絡人姓名'] || (form['聯絡人姓名'] = {})).v,
          "團體負責人": (form['pic'] || (form['pic'] = {})).v,
          "統一編號": (form['taxid'] || (form['taxid'] = {})).v,
          "計畫名稱": (form['name-zh'] || (form['name-zh'] = {})).v,
          "案件狀態": 'n/a'
        };
      }
    };
    parser = function(arg$){
      var prj, brd;
      prj = arg$.prj, brd = arg$.brd;
      if (!_parser[brd.slug]) {
        console.log("parser for `" + brd.slug + "` not implemented.");
        return {};
      }
      return _parser[brd.slug]({
        prj: prj,
        brd: brd
      });
    };
    fetch = function(arg$){
      var id, all, date, name, jsons, d1Name, d2Name, d1Json, d2Json, e;
      id = arg$.id, all = arg$.all;
      try {
        date = new Date();
        name = "_moc/" + ((date.getYear() + 1900) + "").padStart(4, '0') + "-" + ((date.getMonth() + 1) + "").padStart(2, '0') + "-" + (date.getDate() + "").padStart(2, '0') + ".json";
        fsExtra.ensureDirSync('_moc');
        jsons = fs.readdirSync('_moc').map(function(it){
          return "_moc/" + it;
        }).filter(function(it){
          return /\.json$/.exec(it);
        });
        jsons.sort(function(a, b){
          if (a > b) {
            return -1;
          } else if (a < b) {
            return 1;
          } else {
            return 0;
          }
        });
        d1Name = jsons[0];
        d2Name = jsons[1];
        d1Json = d1Name
          ? JSON.parse(fs.readFileSync(d1Name).toString())
          : [];
        d2Json = d2Name
          ? JSON.parse(fs.readFileSync(d2Name).toString())
          : [];
      } catch (e$) {
        e = e$;
        return Promise.reject(e);
      }
      return Promise.resolve().then(function(){
        var list, result;
        if (d1Name === name) {
          return [d1Json, d2Json];
        }
        list = ["flagship-2", "flagship-1", "future-content", "future-content-111", "icg-111", "fcm-111", "icg-110"];
        result = [];
        return io.query(" select * from brd where deleted is not true", []).then(function(r){
          var ps;
          r == null && (r = {});
          ps = (r.rows || (r.rows = [])).map(function(brd){
            var meta;
            meta = brd.detail['export'] || {};
            meta.cfg || (meta.cfg = {});
            meta.prj || (meta.prj = {});
            if (!meta.cfg.enabled) {
              return Promise.resolve();
            }
            return io.query("select key,brd,detail,system from prj where\n  (system->'badge'->>'winner')::bool = true\n  and brd = $1", [brd.slug]).then(function(r){
              var prjs;
              r == null && (r = {});
              prjs = r.rows || (r.rows = []);
              return prjs.map(function(prj){
                var ret, map, ref$, key$;
                ret = parser({
                  brd: brd,
                  prj: prj
                });
                map = (ret["年度"] = meta.cfg.year || 'n/a', ret["承辦人"] = meta.cfg.pic || 'n/a', ret["承辦人電話"] = meta.cfg.phone || 'n/a', ret["承辦人email"] = meta.cfg.email || 'n/a', ret["核定金額"] = ((ref$ = meta.prj)[key$ = prj.key] || (ref$[key$] = {})).amount || 'n/a', ret["案件狀態"] = ((ref$ = meta.prj)[key$ = prj.key] || (ref$[key$] = {})).state || 'n/a', ret);
                return result.push(map);
              });
            });
          });
          return Promise.all(ps);
        }).then(function(){
          fs.writeFileSync(name, JSON.stringify(result));
          return [result, d1Json];
        });
      }).then(function(ret){
        var d2, payload, i$, ref$, len$, prj, key;
        d2 = {};
        if (!all) {
          (ret[1] || []).map(function(it){
            return d2[it["案件編號"]] = it;
          });
        }
        payload = [];
        for (i$ = 0, len$ = (ref$ = ret[0] || []).length; i$ < len$; ++i$) {
          prj = ref$[i$];
          key = prj["案件編號"];
          if (!d2[key] || JSON.stringify(prj) !== JSON.stringify(d2[key])) {
            payload.push(prj);
          }
        }
        return payload;
      })['catch'](function(it){
        return console.log(it);
      });
    };
    encode = function(arg$){
      var json, key, iv, data, cipher, code;
      json = arg$.json, key = arg$.key, iv = arg$.iv;
      data = JSON.stringify(json);
      cipher = crypto.createCipheriv('aes-256-cbc', key, iv);
      code = Buffer.concat([cipher.update(data), cipher.final()]).toString('base64');
      return code;
    };
    decode = function(arg$){
      var code, key, iv, decipher, ret;
      code = arg$.code, key = arg$.key, iv = arg$.iv;
      decipher = crypto.createDecipheriv("aes-256-cbc", key, iv);
      ret = Buffer.concat([decipher.update(Buffer.from(code, 'base64')), decipher.final()]).toString();
      return JSON.parse(ret);
    };
    return engine.router.ext.get('/moc-portal', function(req, res){
      var ref$, id, all, moc, key;
      ref$ = [req.query.id, req.query.all], id = ref$[0], all = ref$[1];
      if (!(moc = engine.config.moc)) {
        return res.send();
      }
      key = id + "" + moc.token;
      return fetch({
        id: id,
        all: all
      }).then(function(payload){
        var ret;
        ret = encode({
          json: payload,
          key: key,
          iv: moc.iv
        });
        return res.send(ret);
      })['catch'](function(it){
        res.status(500).send();
        return console.log("[MOC ERROR]", it);
      });
    });
  });
}).call(this);
