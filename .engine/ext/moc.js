// Generated by LiveScript 1.3.0
(function(){
  var express, crypto, fs;
  express = require('express');
  crypto = require('crypto');
  fs = require('fs');
  (function(it){
    return module.exports = it;
  })(function(engine, io){
    var sample, encode, decode;
    sample = [{
      "案件編號": "測試",
      "申請者": "測試",
      "計畫名稱": "測試",
      "年度": "測試",
      "承辦人": "測試",
      "承辦人電話": "測試",
      "承辦人email": "測試",
      "補助金額": "測試",
      "案件狀態": "測試",
      "計畫聯聯人": "測試",
      "團體負責人": "測試",
      "統一編號": "測試"
    }];
    encode = function(arg$){
      var json, key, iv, data, cipher, code;
      json = arg$.json, key = arg$.key, iv = arg$.iv;
      data = JSON.stringify(json);
      cipher = crypto.createCipheriv('aes-256-cbc', key, iv);
      code = Buffer.concat([cipher.update(data), cipher.final()]).toString('base64');
      return code;
    };
    decode = function(arg$){
      var code, key, iv, decipher, ret;
      code = arg$.code, key = arg$.key, iv = arg$.iv;
      decipher = crypto.createDecipheriv("aes-256-cbc", key, iv);
      ret = Buffer.concat([decipher.update(Buffer.from(code, 'base64')), decipher.final()]).toString();
      return JSON.parse(ret);
    };
    return engine.router.ext.get('/moc-portal', function(req, res){
      var ref$, id, all, moc, key, ret, e;
      ref$ = [req.query.id, req.query.all], id = ref$[0], all = ref$[1];
      if (!(moc = engine.config.moc)) {
        return res.send();
      }
      key = id + "" + moc.token;
      try {
        ret = encode({
          json: sample,
          key: key,
          iv: moc.iv
        });
        return res.send(ret);
      } catch (e$) {
        e = e$;
        return res.send();
      }
    });
  });
}).call(this);
